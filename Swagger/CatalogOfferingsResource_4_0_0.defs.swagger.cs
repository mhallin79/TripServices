using JsonSubTypes;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using RestSharp;
using SwaggerDateConverter = TripServices.Swagger.Client.SwaggerDateConverter;
using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web;
using TripServices.Swagger.Client;
using TripServices.Swagger.Model;
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromCatalogOfferings
        /// </summary>
        /// <remarks>
        /// Build a subset of CatalogOfferings for branding
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromCatalogOfferings"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>CatalogOfferingsResponse</returns>
        CatalogOfferingsResponse BuildOptionsFromCatalogOfferings (CatalogOfferingsQueryBuildOptionsFromCatalogOfferings catalogOfferingsQueryBuildOptionsFromCatalogOfferings, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromCatalogOfferings
        /// </summary>
        /// <remarks>
        /// Build a subset of CatalogOfferings for branding
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromCatalogOfferings"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>ApiResponse of CatalogOfferingsResponse</returns>
        ApiResponse<CatalogOfferingsResponse> BuildOptionsFromCatalogOfferingsWithHttpInfo (CatalogOfferingsQueryBuildOptionsFromCatalogOfferings catalogOfferingsQueryBuildOptionsFromCatalogOfferings, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromProducts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromProducts"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>CatalogOfferingsResponse</returns>
        CatalogOfferingsResponse BuildOptionsFromProducts (CatalogOfferingsQueryBuildOptionsFromProducts catalogOfferingsQueryBuildOptionsFromProducts, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromProducts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromProducts"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>ApiResponse of CatalogOfferingsResponse</returns>
        ApiResponse<CatalogOfferingsResponse> BuildOptionsFromProductsWithHttpInfo (CatalogOfferingsQueryBuildOptionsFromProducts catalogOfferingsQueryBuildOptionsFromProducts, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - Create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>CatalogOfferingsResponse</returns>
        CatalogOfferingsResponse Create (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - Create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>ApiResponse of CatalogOfferingsResponse</returns>
        ApiResponse<CatalogOfferingsResponse> CreateWithHttpInfo (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - CreateAirChange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>CatalogOfferingsResponse</returns>
        CatalogOfferingsResponse CreateAirChange (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - CreateAirChange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>ApiResponse of CatalogOfferingsResponse</returns>
        ApiResponse<CatalogOfferingsResponse> CreateAirChangeWithHttpInfo (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - Get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the CatalogOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="upsellInd">if true response will include CatalogOffering plus one upsell (next higher fare) (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>CatalogOfferingsResponse</returns>
        CatalogOfferingsResponse Get (string identifier = null, string pageNumber = null, string view = null, bool? upsellInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - Get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the CatalogOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="upsellInd">if true response will include CatalogOffering plus one upsell (next higher fare) (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>ApiResponse of CatalogOfferingsResponse</returns>
        ApiResponse<CatalogOfferingsResponse> GetWithHttpInfo (string identifier = null, string pageNumber = null, string view = null, bool? upsellInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromCatalogOfferings
        /// </summary>
        /// <remarks>
        /// Build a subset of CatalogOfferings for branding
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromCatalogOfferings"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of CatalogOfferingsResponse</returns>
        System.Threading.Tasks.Task<CatalogOfferingsResponse> BuildOptionsFromCatalogOfferingsAsync (CatalogOfferingsQueryBuildOptionsFromCatalogOfferings catalogOfferingsQueryBuildOptionsFromCatalogOfferings, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromCatalogOfferings
        /// </summary>
        /// <remarks>
        /// Build a subset of CatalogOfferings for branding
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromCatalogOfferings"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of ApiResponse (CatalogOfferingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogOfferingsResponse>> BuildOptionsFromCatalogOfferingsAsyncWithHttpInfo (CatalogOfferingsQueryBuildOptionsFromCatalogOfferings catalogOfferingsQueryBuildOptionsFromCatalogOfferings, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromProducts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromProducts"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of CatalogOfferingsResponse</returns>
        System.Threading.Tasks.Task<CatalogOfferingsResponse> BuildOptionsFromProductsAsync (CatalogOfferingsQueryBuildOptionsFromProducts catalogOfferingsQueryBuildOptionsFromProducts, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromProducts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromProducts"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of ApiResponse (CatalogOfferingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogOfferingsResponse>> BuildOptionsFromProductsAsyncWithHttpInfo (CatalogOfferingsQueryBuildOptionsFromProducts catalogOfferingsQueryBuildOptionsFromProducts, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - Create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of CatalogOfferingsResponse</returns>
        System.Threading.Tasks.Task<CatalogOfferingsResponse> CreateAsync (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - Create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of ApiResponse (CatalogOfferingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogOfferingsResponse>> CreateAsyncWithHttpInfo (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - CreateAirChange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of CatalogOfferingsResponse</returns>
        System.Threading.Tasks.Task<CatalogOfferingsResponse> CreateAirChangeAsync (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - CreateAirChange
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of ApiResponse (CatalogOfferingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogOfferingsResponse>> CreateAirChangeAsyncWithHttpInfo (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - Get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the CatalogOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="upsellInd">if true response will include CatalogOffering plus one upsell (next higher fare) (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of CatalogOfferingsResponse</returns>
        System.Threading.Tasks.Task<CatalogOfferingsResponse> GetAsync (string identifier = null, string pageNumber = null, string view = null, bool? upsellInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        /// <summary>
        /// CatalogOfferingsResource - Get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the CatalogOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="upsellInd">if true response will include CatalogOffering plus one upsell (next higher fare) (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of ApiResponse (CatalogOfferingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CatalogOfferingsResponse>> GetAsyncWithHttpInfo (string identifier = null, string pageNumber = null, string view = null, bool? upsellInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null);
        #endregion Asynchronous Operations
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private TripServices.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new TripServices.Swagger.Client.Configuration { BasePath = basePath };
            ExceptionFactory = TripServices.Swagger.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(TripServices.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TripServices.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;
            ExceptionFactory = TripServices.Swagger.Client.Configuration.DefaultExceptionFactory;
        }
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }
        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TripServices.Swagger.Client.Configuration Configuration {get; set;}
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TripServices.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }
        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }
        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromCatalogOfferings Build a subset of CatalogOfferings for branding
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromCatalogOfferings"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>CatalogOfferingsResponse</returns>
        public CatalogOfferingsResponse BuildOptionsFromCatalogOfferings (CatalogOfferingsQueryBuildOptionsFromCatalogOfferings catalogOfferingsQueryBuildOptionsFromCatalogOfferings, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
             ApiResponse<CatalogOfferingsResponse> localVarResponse = BuildOptionsFromCatalogOfferingsWithHttpInfo(catalogOfferingsQueryBuildOptionsFromCatalogOfferings, e2ETrackingId, XAUTH_TRAVELPORT_ACCESSGROUP);
             return localVarResponse.Data;
        }
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromCatalogOfferings Build a subset of CatalogOfferings for branding
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromCatalogOfferings"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>ApiResponse of CatalogOfferingsResponse</returns>
        public ApiResponse< CatalogOfferingsResponse > BuildOptionsFromCatalogOfferingsWithHttpInfo (CatalogOfferingsQueryBuildOptionsFromCatalogOfferings catalogOfferingsQueryBuildOptionsFromCatalogOfferings, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
            // verify the required parameter 'catalogOfferingsQueryBuildOptionsFromCatalogOfferings' is set
            if (catalogOfferingsQueryBuildOptionsFromCatalogOfferings == null)
                throw new ApiException(400, "Missing required parameter 'catalogOfferingsQueryBuildOptionsFromCatalogOfferings' when calling DefaultApi->BuildOptionsFromCatalogOfferings");
            var localVarPath = "/catalogofferings/buildoptionsfromcatalogofferings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (e2ETrackingId != null) localVarHeaderParams.Add("E2ETrackingId", this.Configuration.ApiClient.ParameterToString(e2ETrackingId)); // header parameter
            if (XAUTH_TRAVELPORT_ACCESSGROUP != null) localVarHeaderParams.Add("XAUTH_TRAVELPORT_ACCESSGROUP", this.Configuration.ApiClient.ParameterToString(XAUTH_TRAVELPORT_ACCESSGROUP)); // header parameter
            if (catalogOfferingsQueryBuildOptionsFromCatalogOfferings != null && catalogOfferingsQueryBuildOptionsFromCatalogOfferings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogOfferingsQueryBuildOptionsFromCatalogOfferings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogOfferingsQueryBuildOptionsFromCatalogOfferings; // byte array
            }
            // authentication (BasicAuthSceme) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildOptionsFromCatalogOfferings", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<CatalogOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogOfferingsResponse)));
        }
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromCatalogOfferings Build a subset of CatalogOfferings for branding
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromCatalogOfferings"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of CatalogOfferingsResponse</returns>
        public async System.Threading.Tasks.Task<CatalogOfferingsResponse> BuildOptionsFromCatalogOfferingsAsync (CatalogOfferingsQueryBuildOptionsFromCatalogOfferings catalogOfferingsQueryBuildOptionsFromCatalogOfferings, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
             ApiResponse<CatalogOfferingsResponse> localVarResponse = await BuildOptionsFromCatalogOfferingsAsyncWithHttpInfo(catalogOfferingsQueryBuildOptionsFromCatalogOfferings, e2ETrackingId, XAUTH_TRAVELPORT_ACCESSGROUP);
             return localVarResponse.Data;
        }
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromCatalogOfferings Build a subset of CatalogOfferings for branding
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromCatalogOfferings"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of ApiResponse (CatalogOfferingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogOfferingsResponse>> BuildOptionsFromCatalogOfferingsAsyncWithHttpInfo (CatalogOfferingsQueryBuildOptionsFromCatalogOfferings catalogOfferingsQueryBuildOptionsFromCatalogOfferings, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
            // verify the required parameter 'catalogOfferingsQueryBuildOptionsFromCatalogOfferings' is set
            if (catalogOfferingsQueryBuildOptionsFromCatalogOfferings == null)
                throw new ApiException(400, "Missing required parameter 'catalogOfferingsQueryBuildOptionsFromCatalogOfferings' when calling DefaultApi->BuildOptionsFromCatalogOfferings");
            var localVarPath = "/catalogofferings/buildoptionsfromcatalogofferings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (e2ETrackingId != null) localVarHeaderParams.Add("E2ETrackingId", this.Configuration.ApiClient.ParameterToString(e2ETrackingId)); // header parameter
            if (XAUTH_TRAVELPORT_ACCESSGROUP != null) localVarHeaderParams.Add("XAUTH_TRAVELPORT_ACCESSGROUP", this.Configuration.ApiClient.ParameterToString(XAUTH_TRAVELPORT_ACCESSGROUP)); // header parameter
            if (catalogOfferingsQueryBuildOptionsFromCatalogOfferings != null && catalogOfferingsQueryBuildOptionsFromCatalogOfferings.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogOfferingsQueryBuildOptionsFromCatalogOfferings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogOfferingsQueryBuildOptionsFromCatalogOfferings; // byte array
            }
            // authentication (BasicAuthSceme) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildOptionsFromCatalogOfferings", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<CatalogOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogOfferingsResponse)));
        }
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromProducts 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromProducts"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>CatalogOfferingsResponse</returns>
        public CatalogOfferingsResponse BuildOptionsFromProducts (CatalogOfferingsQueryBuildOptionsFromProducts catalogOfferingsQueryBuildOptionsFromProducts, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
             ApiResponse<CatalogOfferingsResponse> localVarResponse = BuildOptionsFromProductsWithHttpInfo(catalogOfferingsQueryBuildOptionsFromProducts, e2ETrackingId, XAUTH_TRAVELPORT_ACCESSGROUP);
             return localVarResponse.Data;
        }
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromProducts 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromProducts"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>ApiResponse of CatalogOfferingsResponse</returns>
        public ApiResponse< CatalogOfferingsResponse > BuildOptionsFromProductsWithHttpInfo (CatalogOfferingsQueryBuildOptionsFromProducts catalogOfferingsQueryBuildOptionsFromProducts, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
            // verify the required parameter 'catalogOfferingsQueryBuildOptionsFromProducts' is set
            if (catalogOfferingsQueryBuildOptionsFromProducts == null)
                throw new ApiException(400, "Missing required parameter 'catalogOfferingsQueryBuildOptionsFromProducts' when calling DefaultApi->BuildOptionsFromProducts");
            var localVarPath = "/catalogofferings/buildoptionsfromcatalogproducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (e2ETrackingId != null) localVarHeaderParams.Add("E2ETrackingId", this.Configuration.ApiClient.ParameterToString(e2ETrackingId)); // header parameter
            if (XAUTH_TRAVELPORT_ACCESSGROUP != null) localVarHeaderParams.Add("XAUTH_TRAVELPORT_ACCESSGROUP", this.Configuration.ApiClient.ParameterToString(XAUTH_TRAVELPORT_ACCESSGROUP)); // header parameter
            if (catalogOfferingsQueryBuildOptionsFromProducts != null && catalogOfferingsQueryBuildOptionsFromProducts.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogOfferingsQueryBuildOptionsFromProducts); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogOfferingsQueryBuildOptionsFromProducts; // byte array
            }
            // authentication (BasicAuthSceme) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildOptionsFromProducts", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<CatalogOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogOfferingsResponse)));
        }
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromProducts 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromProducts"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of CatalogOfferingsResponse</returns>
        public async System.Threading.Tasks.Task<CatalogOfferingsResponse> BuildOptionsFromProductsAsync (CatalogOfferingsQueryBuildOptionsFromProducts catalogOfferingsQueryBuildOptionsFromProducts, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
             ApiResponse<CatalogOfferingsResponse> localVarResponse = await BuildOptionsFromProductsAsyncWithHttpInfo(catalogOfferingsQueryBuildOptionsFromProducts, e2ETrackingId, XAUTH_TRAVELPORT_ACCESSGROUP);
             return localVarResponse.Data;
        }
        /// <summary>
        /// CatalogOfferingsResource - BuildOptionsFromProducts 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryBuildOptionsFromProducts"></param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of ApiResponse (CatalogOfferingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogOfferingsResponse>> BuildOptionsFromProductsAsyncWithHttpInfo (CatalogOfferingsQueryBuildOptionsFromProducts catalogOfferingsQueryBuildOptionsFromProducts, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
            // verify the required parameter 'catalogOfferingsQueryBuildOptionsFromProducts' is set
            if (catalogOfferingsQueryBuildOptionsFromProducts == null)
                throw new ApiException(400, "Missing required parameter 'catalogOfferingsQueryBuildOptionsFromProducts' when calling DefaultApi->BuildOptionsFromProducts");
            var localVarPath = "/catalogofferings/buildoptionsfromcatalogproducts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (e2ETrackingId != null) localVarHeaderParams.Add("E2ETrackingId", this.Configuration.ApiClient.ParameterToString(e2ETrackingId)); // header parameter
            if (XAUTH_TRAVELPORT_ACCESSGROUP != null) localVarHeaderParams.Add("XAUTH_TRAVELPORT_ACCESSGROUP", this.Configuration.ApiClient.ParameterToString(XAUTH_TRAVELPORT_ACCESSGROUP)); // header parameter
            if (catalogOfferingsQueryBuildOptionsFromProducts != null && catalogOfferingsQueryBuildOptionsFromProducts.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogOfferingsQueryBuildOptionsFromProducts); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogOfferingsQueryBuildOptionsFromProducts; // byte array
            }
            // authentication (BasicAuthSceme) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BuildOptionsFromProducts", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<CatalogOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogOfferingsResponse)));
        }
        /// <summary>
        /// CatalogOfferingsResource - Create 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>CatalogOfferingsResponse</returns>
        public CatalogOfferingsResponse Create (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
             ApiResponse<CatalogOfferingsResponse> localVarResponse = CreateWithHttpInfo(catalogOfferingsQueryRequest, view, sccType, sccChannelID, upsellInd, asynchInd, e2ETrackingId, XAUTH_TRAVELPORT_ACCESSGROUP);
             return localVarResponse.Data;
        }
        /// <summary>
        /// CatalogOfferingsResource - Create 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>ApiResponse of CatalogOfferingsResponse</returns>
        public ApiResponse< CatalogOfferingsResponse > CreateWithHttpInfo (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
            // verify the required parameter 'catalogOfferingsQueryRequest' is set
            if (catalogOfferingsQueryRequest == null)
                throw new ApiException(400, "Missing required parameter 'catalogOfferingsQueryRequest' when calling DefaultApi->Create");
            var localVarPath = "/catalogofferings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (sccType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sccType", sccType)); // query parameter
            if (sccChannelID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sccChannelID", sccChannelID)); // query parameter
            if (upsellInd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upsellInd", upsellInd)); // query parameter
            if (asynchInd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asynchInd", asynchInd)); // query parameter
            if (e2ETrackingId != null) localVarHeaderParams.Add("E2ETrackingId", this.Configuration.ApiClient.ParameterToString(e2ETrackingId)); // header parameter
            if (XAUTH_TRAVELPORT_ACCESSGROUP != null) localVarHeaderParams.Add("XAUTH_TRAVELPORT_ACCESSGROUP", this.Configuration.ApiClient.ParameterToString(XAUTH_TRAVELPORT_ACCESSGROUP)); // header parameter
            if (catalogOfferingsQueryRequest != null && catalogOfferingsQueryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogOfferingsQueryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogOfferingsQueryRequest; // byte array
            }
            // authentication (BasicAuthSceme) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<CatalogOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogOfferingsResponse)));
        }
        /// <summary>
        /// CatalogOfferingsResource - Create 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of CatalogOfferingsResponse</returns>
        public async System.Threading.Tasks.Task<CatalogOfferingsResponse> CreateAsync (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
             ApiResponse<CatalogOfferingsResponse> localVarResponse = await CreateAsyncWithHttpInfo(catalogOfferingsQueryRequest, view, sccType, sccChannelID, upsellInd, asynchInd, e2ETrackingId, XAUTH_TRAVELPORT_ACCESSGROUP);
             return localVarResponse.Data;
        }
        /// <summary>
        /// CatalogOfferingsResource - Create 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of ApiResponse (CatalogOfferingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogOfferingsResponse>> CreateAsyncWithHttpInfo (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
            // verify the required parameter 'catalogOfferingsQueryRequest' is set
            if (catalogOfferingsQueryRequest == null)
                throw new ApiException(400, "Missing required parameter 'catalogOfferingsQueryRequest' when calling DefaultApi->Create");
            var localVarPath = "/catalogofferings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (sccType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sccType", sccType)); // query parameter
            if (sccChannelID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sccChannelID", sccChannelID)); // query parameter
            if (upsellInd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upsellInd", upsellInd)); // query parameter
            if (asynchInd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asynchInd", asynchInd)); // query parameter
            if (e2ETrackingId != null) localVarHeaderParams.Add("E2ETrackingId", this.Configuration.ApiClient.ParameterToString(e2ETrackingId)); // header parameter
            if (XAUTH_TRAVELPORT_ACCESSGROUP != null) localVarHeaderParams.Add("XAUTH_TRAVELPORT_ACCESSGROUP", this.Configuration.ApiClient.ParameterToString(XAUTH_TRAVELPORT_ACCESSGROUP)); // header parameter
            if (catalogOfferingsQueryRequest != null && catalogOfferingsQueryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogOfferingsQueryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogOfferingsQueryRequest; // byte array
            }
            // authentication (BasicAuthSceme) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<CatalogOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogOfferingsResponse)));
        }
        /// <summary>
        /// CatalogOfferingsResource - CreateAirChange 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>CatalogOfferingsResponse</returns>
        public CatalogOfferingsResponse CreateAirChange (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
             ApiResponse<CatalogOfferingsResponse> localVarResponse = CreateAirChangeWithHttpInfo(catalogOfferingsQueryRequest, view, sccType, sccChannelID, upsellInd, asynchInd, e2ETrackingId, XAUTH_TRAVELPORT_ACCESSGROUP);
             return localVarResponse.Data;
        }
        /// <summary>
        /// CatalogOfferingsResource - CreateAirChange 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>ApiResponse of CatalogOfferingsResponse</returns>
        public ApiResponse< CatalogOfferingsResponse > CreateAirChangeWithHttpInfo (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
            // verify the required parameter 'catalogOfferingsQueryRequest' is set
            if (catalogOfferingsQueryRequest == null)
                throw new ApiException(400, "Missing required parameter 'catalogOfferingsQueryRequest' when calling DefaultApi->CreateAirChange");
            var localVarPath = "/catalogofferings/airchange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (sccType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sccType", sccType)); // query parameter
            if (sccChannelID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sccChannelID", sccChannelID)); // query parameter
            if (upsellInd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upsellInd", upsellInd)); // query parameter
            if (asynchInd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asynchInd", asynchInd)); // query parameter
            if (e2ETrackingId != null) localVarHeaderParams.Add("E2ETrackingId", this.Configuration.ApiClient.ParameterToString(e2ETrackingId)); // header parameter
            if (XAUTH_TRAVELPORT_ACCESSGROUP != null) localVarHeaderParams.Add("XAUTH_TRAVELPORT_ACCESSGROUP", this.Configuration.ApiClient.ParameterToString(XAUTH_TRAVELPORT_ACCESSGROUP)); // header parameter
            if (catalogOfferingsQueryRequest != null && catalogOfferingsQueryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogOfferingsQueryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogOfferingsQueryRequest; // byte array
            }
            // authentication (BasicAuthSceme) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAirChange", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<CatalogOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogOfferingsResponse)));
        }
        /// <summary>
        /// CatalogOfferingsResource - CreateAirChange 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of CatalogOfferingsResponse</returns>
        public async System.Threading.Tasks.Task<CatalogOfferingsResponse> CreateAirChangeAsync (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
             ApiResponse<CatalogOfferingsResponse> localVarResponse = await CreateAirChangeAsyncWithHttpInfo(catalogOfferingsQueryRequest, view, sccType, sccChannelID, upsellInd, asynchInd, e2ETrackingId, XAUTH_TRAVELPORT_ACCESSGROUP);
             return localVarResponse.Data;
        }
        /// <summary>
        /// CatalogOfferingsResource - CreateAirChange 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogOfferingsQueryRequest"></param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console. (optional)</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query (optional)</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false. (optional)</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response. (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of ApiResponse (CatalogOfferingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogOfferingsResponse>> CreateAirChangeAsyncWithHttpInfo (CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string view = null, string sccType = null, string sccChannelID = null, bool? upsellInd = null, bool? asynchInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
            // verify the required parameter 'catalogOfferingsQueryRequest' is set
            if (catalogOfferingsQueryRequest == null)
                throw new ApiException(400, "Missing required parameter 'catalogOfferingsQueryRequest' when calling DefaultApi->CreateAirChange");
            var localVarPath = "/catalogofferings/airchange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (sccType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sccType", sccType)); // query parameter
            if (sccChannelID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sccChannelID", sccChannelID)); // query parameter
            if (upsellInd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upsellInd", upsellInd)); // query parameter
            if (asynchInd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asynchInd", asynchInd)); // query parameter
            if (e2ETrackingId != null) localVarHeaderParams.Add("E2ETrackingId", this.Configuration.ApiClient.ParameterToString(e2ETrackingId)); // header parameter
            if (XAUTH_TRAVELPORT_ACCESSGROUP != null) localVarHeaderParams.Add("XAUTH_TRAVELPORT_ACCESSGROUP", this.Configuration.ApiClient.ParameterToString(XAUTH_TRAVELPORT_ACCESSGROUP)); // header parameter
            if (catalogOfferingsQueryRequest != null && catalogOfferingsQueryRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(catalogOfferingsQueryRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = catalogOfferingsQueryRequest; // byte array
            }
            // authentication (BasicAuthSceme) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAirChange", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<CatalogOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogOfferingsResponse)));
        }
        /// <summary>
        /// CatalogOfferingsResource - Get 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the CatalogOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="upsellInd">if true response will include CatalogOffering plus one upsell (next higher fare) (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>CatalogOfferingsResponse</returns>
        public CatalogOfferingsResponse Get (string identifier = null, string pageNumber = null, string view = null, bool? upsellInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
             ApiResponse<CatalogOfferingsResponse> localVarResponse = GetWithHttpInfo(identifier, pageNumber, view, upsellInd, e2ETrackingId, XAUTH_TRAVELPORT_ACCESSGROUP);
             return localVarResponse.Data;
        }
        /// <summary>
        /// CatalogOfferingsResource - Get 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the CatalogOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="upsellInd">if true response will include CatalogOffering plus one upsell (next higher fare) (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>ApiResponse of CatalogOfferingsResponse</returns>
        public ApiResponse< CatalogOfferingsResponse > GetWithHttpInfo (string identifier = null, string pageNumber = null, string view = null, bool? upsellInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
            var localVarPath = "/catalogofferings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (identifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identifier", identifier)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (upsellInd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upsellInd", upsellInd)); // query parameter
            if (e2ETrackingId != null) localVarHeaderParams.Add("E2ETrackingId", this.Configuration.ApiClient.ParameterToString(e2ETrackingId)); // header parameter
            if (XAUTH_TRAVELPORT_ACCESSGROUP != null) localVarHeaderParams.Add("XAUTH_TRAVELPORT_ACCESSGROUP", this.Configuration.ApiClient.ParameterToString(XAUTH_TRAVELPORT_ACCESSGROUP)); // header parameter
            // authentication (BasicAuthSceme) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<CatalogOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogOfferingsResponse)));
        }
        /// <summary>
        /// CatalogOfferingsResource - Get 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the CatalogOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="upsellInd">if true response will include CatalogOffering plus one upsell (next higher fare) (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of CatalogOfferingsResponse</returns>
        public async System.Threading.Tasks.Task<CatalogOfferingsResponse> GetAsync (string identifier = null, string pageNumber = null, string view = null, bool? upsellInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
             ApiResponse<CatalogOfferingsResponse> localVarResponse = await GetAsyncWithHttpInfo(identifier, pageNumber, view, upsellInd, e2ETrackingId, XAUTH_TRAVELPORT_ACCESSGROUP);
             return localVarResponse.Data;
        }
        /// <summary>
        /// CatalogOfferingsResource - Get 
        /// </summary>
        /// <exception cref="TripServices.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The Identifier of the CatalogOfferings from which a page is to be returned (optional)</param>
        /// <param name="pageNumber">The page number to be returned (optional)</param>
        /// <param name="view">The view.  Either detail or summary. (optional)</param>
        /// <param name="upsellInd">if true response will include CatalogOffering plus one upsell (next higher fare) (optional)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems. (optional)</param>
        /// <param name="XAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated (optional)</param>
        /// <returns>Task of ApiResponse (CatalogOfferingsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CatalogOfferingsResponse>> GetAsyncWithHttpInfo (string identifier = null, string pageNumber = null, string view = null, bool? upsellInd = null, string e2ETrackingId = null, string XAUTH_TRAVELPORT_ACCESSGROUP = null)
        {
            var localVarPath = "/catalogofferings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;
            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);
            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (identifier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "identifier", identifier)); // query parameter
            if (pageNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (view != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "view", view)); // query parameter
            if (upsellInd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "upsellInd", upsellInd)); // query parameter
            if (e2ETrackingId != null) localVarHeaderParams.Add("E2ETrackingId", this.Configuration.ApiClient.ParameterToString(e2ETrackingId)); // header parameter
            if (XAUTH_TRAVELPORT_ACCESSGROUP != null) localVarHeaderParams.Add("XAUTH_TRAVELPORT_ACCESSGROUP", this.Configuration.ApiClient.ParameterToString(XAUTH_TRAVELPORT_ACCESSGROUP)); // header parameter
            // authentication (BasicAuthSceme) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);
            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }
            return new ApiResponse<CatalogOfferingsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CatalogOfferingsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CatalogOfferingsResponse)));
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Client
{
    /// <summary>
    /// API client is mainly responsible for making the HTTP call to the API backend.
    /// </summary>
    public partial class ApiClient
    {
        private JsonSerializerSettings serializerSettings = new JsonSerializerSettings
        {
            ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor
        };
        /// <summary>
        /// Allows for extending request processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        partial void InterceptRequest(IRestRequest request);
        /// <summary>
        /// Allows for extending response processing for <see cref="ApiClient"/> generated code.
        /// </summary>
        /// <param name="request">The RestSharp request object</param>
        /// <param name="response">The RestSharp response object</param>
        partial void InterceptResponse(IRestRequest request, IRestResponse response);
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default configuration.
        /// </summary>
        public ApiClient()
        {
            Configuration = TripServices.Swagger.Client.Configuration.Default;
            RestClient = new RestClient("http://127.0.0.1/v4_0");
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default base path (http://127.0.0.1/v4_0).
        /// </summary>
        /// <param name="config">An instance of Configuration.</param>
        public ApiClient(Configuration config)
        {
            Configuration = config ?? TripServices.Swagger.Client.Configuration.Default;
            RestClient = new RestClient(Configuration.BasePath);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClient" /> class
        /// with default configuration.
        /// </summary>
        /// <param name="basePath">The base path.</param>
        public ApiClient(String basePath = "http://127.0.0.1/v4_0")
        {
           if (String.IsNullOrEmpty(basePath))
                throw new ArgumentException("basePath cannot be empty");
            RestClient = new RestClient(basePath);
            Configuration = Client.Configuration.Default;
        }
        /// <summary>
        /// Gets or sets the default API client for making HTTP calls.
        /// </summary>
        /// <value>The default API client.</value>
        [Obsolete("ApiClient.Default is deprecated, please use 'Configuration.Default.ApiClient' instead.")]
        public static ApiClient Default;
        /// <summary>
        /// Gets or sets an instance of the IReadableConfiguration.
        /// </summary>
        /// <value>An instance of the IReadableConfiguration.</value>
        /// <remarks>
        /// <see cref="IReadableConfiguration"/> helps us to avoid modifying possibly global
        /// configuration values from within a given client. It does not guarantee thread-safety
        /// of the <see cref="Configuration"/> instance in any way.
        /// </remarks>
        public IReadableConfiguration Configuration { get; set; }
        /// <summary>
        /// Gets or sets the RestClient.
        /// </summary>
        /// <value>An instance of the RestClient</value>
        public RestClient RestClient { get; set; }
        // Creates and sets up a RestRequest prior to a call.
        private RestRequest PrepareRequest(
            String path, RestSharp.Method method, List<KeyValuePair<String, String>> queryParams, Object postBody,
            Dictionary<String, String> headerParams, Dictionary<String, String> formParams,
            Dictionary<String, FileParameter> fileParams, Dictionary<String, String> pathParams,
            String contentType)
        {
            var request = new RestRequest(path, method);
            // add path parameter, if any
            foreach(var param in pathParams)
                request.AddParameter(param.Key, param.Value, ParameterType.UrlSegment);
            // add header parameter, if any
            foreach(var param in headerParams)
                request.AddHeader(param.Key, param.Value);
            // add query parameter, if any
            foreach(var param in queryParams)
                request.AddQueryParameter(param.Key, param.Value);
            // add form parameter, if any
            foreach(var param in formParams)
                request.AddParameter(param.Key, param.Value);
            // add file parameter, if any
            foreach(var param in fileParams)
            {
                request.AddFile(param.Value.Name, param.Value.Writer, param.Value.FileName, param.Value.ContentType);
            }
            if (postBody != null) // http body (model or byte[]) parameter
            {
                request.AddParameter(contentType, postBody, ParameterType.RequestBody);
            }
            return request;
        }
        /// <summary>
        /// Makes the HTTP request (Sync).
        /// </summary>
        /// <param name="path">URL path.</param>
        /// <param name="method">HTTP method.</param>
        /// <param name="queryParams">Query parameters.</param>
        /// <param name="postBody">HTTP body (POST request).</param>
        /// <param name="headerParams">Header parameters.</param>
        /// <param name="formParams">Form parameters.</param>
        /// <param name="fileParams">File parameters.</param>
        /// <param name="pathParams">Path parameters.</param>
        /// <param name="contentType">Content Type of the request</param>
        /// <returns>Object</returns>
        public Object CallApi(
            String path, RestSharp.Method method, List<KeyValuePair<String, String>> queryParams, Object postBody,
            Dictionary<String, String> headerParams, Dictionary<String, String> formParams,
            Dictionary<String, FileParameter> fileParams, Dictionary<String, String> pathParams,
            String contentType)
        {
            var request = PrepareRequest(
                path, method, queryParams, postBody, headerParams, formParams, fileParams,
                pathParams, contentType);
            // set timeout
            RestClient.Timeout = Configuration.Timeout;
            // set user agent
            RestClient.UserAgent = Configuration.UserAgent;
            InterceptRequest(request);
            var response = RestClient.Execute(request);
            InterceptResponse(request, response);
            return (Object) response;
        }
        /// <summary>
        /// Makes the asynchronous HTTP request.
        /// </summary>
        /// <param name="path">URL path.</param>
        /// <param name="method">HTTP method.</param>
        /// <param name="queryParams">Query parameters.</param>
        /// <param name="postBody">HTTP body (POST request).</param>
        /// <param name="headerParams">Header parameters.</param>
        /// <param name="formParams">Form parameters.</param>
        /// <param name="fileParams">File parameters.</param>
        /// <param name="pathParams">Path parameters.</param>
        /// <param name="contentType">Content type.</param>
        /// <returns>The Task instance.</returns>
        public async System.Threading.Tasks.Task<Object> CallApiAsync(
            String path, RestSharp.Method method, List<KeyValuePair<String, String>> queryParams, Object postBody,
            Dictionary<String, String> headerParams, Dictionary<String, String> formParams,
            Dictionary<String, FileParameter> fileParams, Dictionary<String, String> pathParams,
            String contentType)
        {
            var request = PrepareRequest(
                path, method, queryParams, postBody, headerParams, formParams, fileParams,
                pathParams, contentType);
            InterceptRequest(request);
            var response = await RestClient.ExecuteTaskAsync(request);
            InterceptResponse(request, response);
            return (Object)response;
        }
        /// <summary>
        /// Escape string (url-encoded).
        /// </summary>
        /// <param name="str">String to be escaped.</param>
        /// <returns>Escaped string.</returns>
        public string EscapeString(string str)
        {
            return UrlEncode(str);
        }
        /// <summary>
        /// Create FileParameter based on Stream.
        /// </summary>
        /// <param name="name">Parameter name.</param>
        /// <param name="stream">Input stream.</param>
        /// <returns>FileParameter.</returns>
        public FileParameter ParameterToFile(string name, Stream stream)
        {
            if (stream is FileStream)
                return FileParameter.Create(name, ReadAsBytes(stream), Path.GetFileName(((FileStream)stream).Name));
            else
                return FileParameter.Create(name, ReadAsBytes(stream), "no_file_name_provided");
        }
        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <returns>Formatted string.</returns>
        public string ParameterToString(object obj)
        {
            if (obj is DateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return ((DateTime)obj).ToString (Configuration.DateTimeFormat);
            else if (obj is DateTimeOffset)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return ((DateTimeOffset)obj).ToString (Configuration.DateTimeFormat);
            else if (obj is IList)
            {
                var flattenedString = new StringBuilder();
                foreach (var param in (IList)obj)
                {
                    if (flattenedString.Length > 0)
                        flattenedString.Append(",");
                    flattenedString.Append(param);
                }
                return flattenedString.ToString();
            }
            else
                return Convert.ToString (obj);
        }
        /// <summary>
        /// Deserialize the JSON string into a proper object.
        /// </summary>
        /// <param name="response">The HTTP response.</param>
        /// <param name="type">Object type.</param>
        /// <returns>Object representation of the JSON string.</returns>
        public object Deserialize(IRestResponse response, Type type)
        {
            IList<Parameter> headers = response.Headers;
            if (type == typeof(byte[])) // return byte array
            {
                return response.RawBytes;
            }
            // TODO: ? if (type.IsAssignableFrom(typeof(Stream)))
            if (type == typeof(Stream))
            {
                if (headers != null)
                {
                    var filePath = String.IsNullOrEmpty(Configuration.TempFolderPath)
                        ? Path.GetTempPath()
                        : Configuration.TempFolderPath;
                    var regex = new Regex(@"Content-Disposition=.*filename=['""]?([^'""\s]+)['""]?$");
                    foreach (var header in headers)
                    {
                        var match = regex.Match(header.ToString());
                        if (match.Success)
                        {
                            string fileName = filePath + SanitizeFilename(match.Groups[1].Value.Replace("\"", "").Replace("'", ""));
                            File.WriteAllBytes(fileName, response.RawBytes);
                            return new FileStream(fileName, FileMode.Open);
                        }
                    }
                }
                var stream = new MemoryStream(response.RawBytes);
                return stream;
            }
            if (type.Name.StartsWith("System.Nullable`1[[System.DateTime")) // return a datetime object
            {
                return DateTime.Parse(response.Content,  null, System.Globalization.DateTimeStyles.RoundtripKind);
            }
            if (type == typeof(String) || type.Name.StartsWith("System.Nullable")) // return primitive type
            {
                return ConvertType(response.Content, type);
            }
            // at this point, it must be a model (json)
            try
            {
                return JsonConvert.DeserializeObject(response.Content, type, serializerSettings);
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }
        /// <summary>
        /// Serialize an input (model) into JSON string
        /// </summary>
        /// <param name="obj">Object.</param>
        /// <returns>JSON string.</returns>
        public String Serialize(object obj)
        {
            try
            {
                return obj != null ? JsonConvert.SerializeObject(obj) : null;
            }
            catch (Exception e)
            {
                throw new ApiException(500, e.Message);
            }
        }
        /// <summary>
        ///Check if the given MIME is a JSON MIME.
        ///JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public bool IsJsonMime(String mime)
        {
            var jsonRegex = new Regex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$");
            return mime != null && (jsonRegex.IsMatch(mime) || mime.Equals("application/json-patch+json"));
        }
        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public String SelectHeaderContentType(String[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return "application/json";
            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType.ToLower()))
                    return contentType;
            }
            return contentTypes[0]; // use the first content type specified in 'consumes'
        }
        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public String SelectHeaderAccept(String[] accepts)
        {
            if (accepts.Length == 0)
                return null;
            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";
            return String.Join(",", accepts);
        }
        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">String to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(text));
        }
        /// <summary>
        /// Dynamically cast the object into target type.
        /// </summary>
        /// <param name="fromObject">Object to be casted</param>
        /// <param name="toObject">Target type</param>
        /// <returns>Casted object</returns>
        public static dynamic ConvertType(dynamic fromObject, Type toObject)
        {
            return Convert.ChangeType(fromObject, toObject);
        }
        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            byte[] buf = new byte[16*1024];
            using (MemoryStream ms = new MemoryStream())
            {
                int count;
                while ((count = inputStream.Read(buf, 0, buf.Length)) > 0)
                {
                    ms.Write(buf, 0, count);
                }
                return ms.ToArray();
            }
        }
        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">String to be URL encoded</param>
        /// <returns>Byte array</returns>
        public static string UrlEncode(string input)
        {
            const int maxLength = 32766;
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            if (input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }
            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;
            while (index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);
                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }
            return sb.ToString();
        }
        /// <summary>
        /// Sanitize filename by removing the path
        /// </summary>
        /// <param name="filename">Filename</param>
        /// <returns>Filename</returns>
        public static string SanitizeFilename(string filename)
        {
            Match match = Regex.Match(filename, @".*[/\\](.*)$");
            if (match.Success)
            {
                return match.Groups[1].Value;
            }
            else
            {
                return filename;
            }
        }
        /// <summary>
        /// Convert params to key/value pairs. 
        /// Use collectionFormat to properly format lists and collections.
        /// </summary>
        /// <param name="name">Key name.</param>
        /// <param name="value">Value object.</param>
        /// <returns>A list of KeyValuePairs</returns>
        public IEnumerable<KeyValuePair<string, string>> ParameterToKeyValuePairs(string collectionFormat, string name, object value)
        {
            var parameters = new List<KeyValuePair<string, string>>();
            if (IsCollection(value) && collectionFormat == "multi")
            {
                var valueCollection = value as IEnumerable;
                parameters.AddRange(from object item in valueCollection select new KeyValuePair<string, string>(name, ParameterToString(item)));
            }
            else
            {
                parameters.Add(new KeyValuePair<string, string>(name, ParameterToString(value)));
            }
            return parameters;
        }
        /// <summary>
        /// Check if generic object is a collection.
        /// </summary>
        /// <param name="value"></param>
        /// <returns>True if object is a collection type</returns>
        private static bool IsCollection(object value)
        {
            return value is IList || value is ICollection;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Client
{
    /// <summary>
    /// API Exception
    /// </summary>
    public class ApiException : Exception
    {
        /// <summary>
        /// Gets or sets the error code (HTTP status code)
        /// </summary>
        /// <value>The error code (HTTP status code).</value>
        public int ErrorCode { get; set; }
        /// <summary>
        /// Gets or sets the error content (body json object)
        /// </summary>
        /// <value>The error content (Http response body).</value>
        public dynamic ErrorContent { get; private set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        public ApiException() {}
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        /// <param name="errorCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        public ApiException(int errorCode, string message) : base(message)
        {
            this.ErrorCode = errorCode;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        /// <param name="errorCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        /// <param name="errorContent">Error content.</param>
        public ApiException(int errorCode, string message, dynamic errorContent = null) : base(message)
        {
            this.ErrorCode = errorCode;
            this.ErrorContent = errorContent;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Client
{
    /// <summary>
    /// API Response
    /// </summary>
    public class ApiResponse<T>
    {
        /// <summary>
        /// Gets or sets the status code (HTTP status code)
        /// </summary>
        /// <value>The status code.</value>
        public int StatusCode { get; private set; }
        /// <summary>
        /// Gets or sets the HTTP headers
        /// </summary>
        /// <value>HTTP headers</value>
        public IDictionary<string, string> Headers { get; private set; }
        /// <summary>
        /// Gets or sets the data (parsed HTTP body)
        /// </summary>
        /// <value>The data.</value>
        public T Data { get; private set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiResponse&lt;T&gt;" /> class.
        /// </summary>
        /// <param name="statusCode">HTTP status code.</param>
        /// <param name="headers">HTTP headers.</param>
        /// <param name="data">Data (parsed HTTP body)</param>
        public ApiResponse(int statusCode, IDictionary<string, string> headers, T data)
        {
            this.StatusCode= statusCode;
            this.Headers = headers;
            this.Data = data;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Client
{
    /// <summary>
    /// Represents a set of configuration settings
    /// </summary>
    public class Configuration : IReadableConfiguration
    {
        #region Constants
        /// <summary>
        /// Version of the package.
        /// </summary>
        /// <value>Version of the package.</value>
        public const string Version = "1.0.0";
        /// <summary>
        /// Identifier for ISO 8601 DateTime Format
        /// </summary>
        /// <remarks>See https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8 for more information.</remarks>
        // ReSharper disable once InconsistentNaming
        public const string ISO8601_DATETIME_FORMAT = "o";
        #endregion Constants
        #region Static Members
        private static readonly object GlobalConfigSync = new { };
        private static Configuration _globalConfiguration;
        /// <summary>
        /// Default creation of exceptions for a given method name and response object
        /// </summary>
        public static readonly ExceptionFactory DefaultExceptionFactory = (methodName, response) =>
        {
            var status = (int)response.StatusCode;
            if (status >= 400)
            {
                return new ApiException(status,
                    string.Format("Error calling {0}: {1}", methodName, response.Content),
                    response.Content);
            }
            if (status == 0)
            {
                return new ApiException(status,
                    string.Format("Error calling {0}: {1}", methodName, response.ErrorMessage), response.ErrorMessage);
            }
            return null;
        };
        /// <summary>
        /// Gets or sets the default Configuration.
        /// </summary>
        /// <value>Configuration.</value>
        public static Configuration Default
        {
            get { return _globalConfiguration; }
            set
            {
                lock (GlobalConfigSync)
                {
                    _globalConfiguration = value;
                }
            }
        }
        #endregion Static Members
        #region Private Members
        /// <summary>
        /// Gets or sets the API key based on the authentication name.
        /// </summary>
        /// <value>The API key.</value>
        private IDictionary<string, string> _apiKey = null;
        /// <summary>
        /// Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
        /// </summary>
        /// <value>The prefix of the API key.</value>
        private IDictionary<string, string> _apiKeyPrefix = null;
        private string _dateTimeFormat = ISO8601_DATETIME_FORMAT;
        private string _tempFolderPath = Path.GetTempPath();
        #endregion Private Members
        #region Constructors
        static Configuration()
        {
            _globalConfiguration = new GlobalConfiguration();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class
        /// </summary>
        public Configuration()
        {
            UserAgent = "Swagger-Codegen/1.0.0/csharp";
            BasePath = "http://127.0.0.1/v4_0";
            DefaultHeader = new ConcurrentDictionary<string, string>();
            ApiKey = new ConcurrentDictionary<string, string>();
            ApiKeyPrefix = new ConcurrentDictionary<string, string>();
            // Setting Timeout has side effects (forces ApiClient creation).
            Timeout = 100000;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class
        /// </summary>
        public Configuration(
            IDictionary<string, string> defaultHeader,
            IDictionary<string, string> apiKey,
            IDictionary<string, string> apiKeyPrefix,
            string basePath = "http://127.0.0.1/v4_0") : this()
        {
            if (string.IsNullOrWhiteSpace(basePath))
                throw new ArgumentException("The provided basePath is invalid.", "basePath");
            if (defaultHeader == null)
                throw new ArgumentNullException("defaultHeader");
            if (apiKey == null)
                throw new ArgumentNullException("apiKey");
            if (apiKeyPrefix == null)
                throw new ArgumentNullException("apiKeyPrefix");
            BasePath = basePath;
            foreach (var keyValuePair in defaultHeader)
            {
                DefaultHeader.Add(keyValuePair);
            }
            foreach (var keyValuePair in apiKey)
            {
                ApiKey.Add(keyValuePair);
            }
            foreach (var keyValuePair in apiKeyPrefix)
            {
                ApiKeyPrefix.Add(keyValuePair);
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Configuration" /> class with different settings
        /// </summary>
        /// <param name="apiClient">Api client</param>
        /// <param name="defaultHeader">Dictionary of default HTTP header</param>
        /// <param name="username">Username</param>
        /// <param name="password">Password</param>
        /// <param name="accessToken">accessToken</param>
        /// <param name="apiKey">Dictionary of API key</param>
        /// <param name="apiKeyPrefix">Dictionary of API key prefix</param>
        /// <param name="tempFolderPath">Temp folder path</param>
        /// <param name="dateTimeFormat">DateTime format string</param>
        /// <param name="timeout">HTTP connection timeout (in milliseconds)</param>
        /// <param name="userAgent">HTTP user agent</param>
        [Obsolete("Use explicit object construction and setting of properties.", true)]
        public Configuration(
            // ReSharper disable UnusedParameter.Local
            ApiClient apiClient = null,
            IDictionary<string, string> defaultHeader = null,
            string username = null,
            string password = null,
            string accessToken = null,
            IDictionary<string, string> apiKey = null,
            IDictionary<string, string> apiKeyPrefix = null,
            string tempFolderPath = null,
            string dateTimeFormat = null,
            int timeout = 100000,
            string userAgent = "Swagger-Codegen/1.0.0/csharp"
            // ReSharper restore UnusedParameter.Local
            )
        {
        }
        /// <summary>
        /// Initializes a new instance of the Configuration class.
        /// </summary>
        /// <param name="apiClient">Api client.</param>
        [Obsolete("This constructor caused unexpected sharing of static data. It is no longer supported.", true)]
        // ReSharper disable once UnusedParameter.Local
        public Configuration(ApiClient apiClient)
        {
        }
        #endregion Constructors
        #region Properties
        private ApiClient _apiClient = null;
        /// <summary>
        /// Gets an instance of an ApiClient for this configuration
        /// </summary>
        public virtual ApiClient ApiClient
        {
            get
            {
                if (_apiClient == null) _apiClient = CreateApiClient();
                return _apiClient;
            }
        }
        private String _basePath = null;
        /// <summary>
        /// Gets or sets the base path for API access.
        /// </summary>
        public virtual string BasePath {
            get { return _basePath; }
            set {
                _basePath = value;
                // pass-through to ApiClient if it's set.
                if(_apiClient != null) {
                    _apiClient.RestClient.BaseUrl = new Uri(_basePath);
                }
            }
        }
        /// <summary>
        /// Gets or sets the default header.
        /// </summary>
        public virtual IDictionary<string, string> DefaultHeader { get; set; }
        /// <summary>
        /// Gets or sets the HTTP timeout (milliseconds) of ApiClient. Default to 100000 milliseconds.
        /// </summary>
        public virtual int Timeout
        {
            get { return ApiClient.RestClient.Timeout; }
            set { ApiClient.RestClient.Timeout = value; }
        }
        /// <summary>
        /// Gets or sets the HTTP user agent.
        /// </summary>
        /// <value>Http user agent.</value>
        public virtual string UserAgent { get; set; }
        /// <summary>
        /// Gets or sets the username (HTTP basic authentication).
        /// </summary>
        /// <value>The username.</value>
        public virtual string Username { get; set; }
        /// <summary>
        /// Gets or sets the password (HTTP basic authentication).
        /// </summary>
        /// <value>The password.</value>
        public virtual string Password { get; set; }
        /// <summary>
        /// Gets the API key with prefix.
        /// </summary>
        /// <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
        /// <returns>API key with prefix.</returns>
        public string GetApiKeyWithPrefix(string apiKeyIdentifier)
        {
            var apiKeyValue = "";
            ApiKey.TryGetValue (apiKeyIdentifier, out apiKeyValue);
            var apiKeyPrefix = "";
            if (ApiKeyPrefix.TryGetValue (apiKeyIdentifier, out apiKeyPrefix))
                return apiKeyPrefix + " " + apiKeyValue;
            else
                return apiKeyValue;
        }
        /// <summary>
        /// Gets or sets the access token for OAuth2 authentication.
        /// </summary>
        /// <value>The access token.</value>
        public virtual string AccessToken { get; set; }
        /// <summary>
        /// Gets or sets the temporary folder path to store the files downloaded from the server.
        /// </summary>
        /// <value>Folder path.</value>
        public virtual string TempFolderPath
        {
            get { return _tempFolderPath; }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    // Possible breaking change since swagger-codegen 2.2.1, enforce a valid temporary path on set.
                    _tempFolderPath = Path.GetTempPath();
                    return;
                }
                // create the directory if it does not exist
                if (!Directory.Exists(value))
                {
                    Directory.CreateDirectory(value);
                }
                // check if the path contains directory separator at the end
                if (value[value.Length - 1] == Path.DirectorySeparatorChar)
                {
                    _tempFolderPath = value;
                }
                else
                {
                    _tempFolderPath = value + Path.DirectorySeparatorChar;
                }
            }
        }
        /// <summary>
        /// Gets or sets the the date time format used when serializing in the ApiClient
        /// By default, it's set to ISO 8601 - "o", for others see:
        /// https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx
        /// and https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx
        /// No validation is done to ensure that the string you're providing is valid
        /// </summary>
        /// <value>The DateTimeFormat string</value>
        public virtual string DateTimeFormat
        {
            get { return _dateTimeFormat; }
            set
            {
                if (string.IsNullOrEmpty(value))
                {
                    // Never allow a blank or null string, go back to the default
                    _dateTimeFormat = ISO8601_DATETIME_FORMAT;
                    return;
                }
                // Caution, no validation when you choose date time format other than ISO 8601
                // Take a look at the above links
                _dateTimeFormat = value;
            }
        }
        /// <summary>
        /// Gets or sets the prefix (e.g. Token) of the API key based on the authentication name.
        /// </summary>
        /// <value>The prefix of the API key.</value>
        public virtual IDictionary<string, string> ApiKeyPrefix
        {
            get { return _apiKeyPrefix; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("ApiKeyPrefix collection may not be null.");
                }
                _apiKeyPrefix = value;
            }
        }
        /// <summary>
        /// Gets or sets the API key based on the authentication name.
        /// </summary>
        /// <value>The API key.</value>
        public virtual IDictionary<string, string> ApiKey
        {
            get { return _apiKey; }
            set
            {
                if (value == null)
                {
                    throw new InvalidOperationException("ApiKey collection may not be null.");
                }
                _apiKey = value;
            }
        }
        #endregion Properties
        #region Methods
        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        public void AddDefaultHeader(string key, string value)
        {
            DefaultHeader[key] = value;
        }
        /// <summary>
        /// Creates a new <see cref="ApiClient" /> based on this <see cref="Configuration" /> instance.
        /// </summary>
        /// <returns></returns>
        public ApiClient CreateApiClient()
        {
            return new ApiClient(BasePath) { Configuration = this };
        }
        /// <summary>
        /// Returns a string with essential information for debugging.
        /// </summary>
        public static String ToDebugReport()
        {
            String report = "C# SDK (TripServices.Swagger) Debug Report:\n";
            report += "    OS: " + System.Environment.OSVersion + "\n";
            report += "    .NET Framework Version: " + System.Environment.Version  + "\n";
            report += "    Version of the API: 4.0.0\n";
            report += "    SDK Package Version: 1.0.0\n";
            return report;
        }
        /// <summary>
        /// Add Api Key Header.
        /// </summary>
        /// <param name="key">Api Key name.</param>
        /// <param name="value">Api Key value.</param>
        /// <returns></returns>
        public void AddApiKey(string key, string value)
        {
            ApiKey[key] = value;
        }
        /// <summary>
        /// Sets the API key prefix.
        /// </summary>
        /// <param name="key">Api Key name.</param>
        /// <param name="value">Api Key value.</param>
        public void AddApiKeyPrefix(string key, string value)
        {
            ApiKeyPrefix[key] = value;
        }
        #endregion Methods
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Client
{
    /// <summary>
    /// A delegate to ExceptionFactory method
    /// </summary>
    /// <param name="methodName">Method name</param>
    /// <param name="response">Response</param>
    /// <returns>Exceptions</returns>
    public delegate Exception ExceptionFactory(string methodName, IRestResponse response);
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Client
{
    /// <summary>
    /// <see cref="GlobalConfiguration"/> provides a compile-time extension point for globally configuring
    /// API Clients.
    /// </summary>
    /// <remarks>
    /// A customized implementation via partial class may reside in another file and may
    /// be excluded from automatic generation via a .swagger-codegen-ignore file.
    /// </remarks>
    public partial class GlobalConfiguration : Configuration
    {
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Client
{
    /// <summary>
    /// Represents configuration aspects required to interact with the API endpoints.
    /// </summary>
    public interface IApiAccessor
    {
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        Configuration Configuration {get; set;}
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        String GetBasePath();
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        ExceptionFactory ExceptionFactory { get; set; }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Client
{
    /// <summary>
    /// Represents a readable-only configuration contract.
    /// </summary>
    public interface IReadableConfiguration
    {
        /// <summary>
        /// Gets the access token.
        /// </summary>
        /// <value>Access token.</value>
        string AccessToken { get; }
        /// <summary>
        /// Gets the API key.
        /// </summary>
        /// <value>API key.</value>
        IDictionary<string, string> ApiKey { get; }
        /// <summary>
        /// Gets the API key prefix.
        /// </summary>
        /// <value>API key prefix.</value>
        IDictionary<string, string> ApiKeyPrefix { get; }
        /// <summary>
        /// Gets the base path.
        /// </summary>
        /// <value>Base path.</value>
        string BasePath { get; }
        /// <summary>
        /// Gets the date time format.
        /// </summary>
        /// <value>Date time foramt.</value>
        string DateTimeFormat { get; }
        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <value>Default header.</value>
        IDictionary<string, string> DefaultHeader { get; }
        /// <summary>
        /// Gets the temp folder path.
        /// </summary>
        /// <value>Temp folder path.</value>
        string TempFolderPath { get; }
        /// <summary>
        /// Gets the HTTP connection timeout (in milliseconds)
        /// </summary>
        /// <value>HTTP connection timeout.</value>
        int Timeout { get; }
        /// <summary>
        /// Gets the user agent.
        /// </summary>
        /// <value>User agent.</value>
        string UserAgent { get; }
        /// <summary>
        /// Gets the username.
        /// </summary>
        /// <value>Username.</value>
        string Username { get; }
        /// <summary>
        /// Gets the password.
        /// </summary>
        /// <value>Password.</value>
        string Password { get; }
        /// <summary>
        /// Gets the API key with prefix.
        /// </summary>
        /// <param name="apiKeyIdentifier">API key identifier (authentication scheme).</param>
        /// <returns>API key with prefix.</returns>
        string GetApiKeyWithPrefix(string apiKeyIdentifier);
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Client
{
    /// <summary>
    /// Formatter for 'date' swagger formats ss defined by full-date - RFC3339
    /// see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types
    /// </summary>
    public class SwaggerDateConverter : IsoDateTimeConverter
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SwaggerDateConverter" /> class.
        /// </summary>
        public SwaggerDateConverter()
        {
            // full-date   = date-fullyear "-" date-month "-" date-mday
            DateTimeFormat = "yyyy-MM-dd";
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Amount
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class Amount :  IEquatable<Amount>, IValidatableObject
    {
        /// <summary>
        /// Source of the selection of this currenct
        /// </summary>
        /// <value>Source of the selection of this currenct</value>
        [DataMember(Name="currencySource", EmitDefaultValue=false)]
        public CurrencySourceEnum? CurrencySource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Amount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Amount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Amount" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="currencySource">Source of the selection of this currenct.</param>
        /// <param name="currencyCode">Assigned Type: c-0400:CurrencyCodeISO.</param>
        /// <param name="_base">The price prior to all applicable taxes of a product such as the rate for a room or fare for a flight..</param>
        /// <param name="taxes">Assigned Type: c-0400:Taxes.</param>
        /// <param name="fees">Assigned Type: c-0400:Fees.</param>
        /// <param name="total">Specifies the total price including base + taxes + fees (required).</param>
        /// <param name="approximateInd">True if this amount has been converted from the original amount.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public Amount(string type = default(string), CurrencySourceEnum? currencySource = default(CurrencySourceEnum?), string currencyCode = default(string), float? _base = default(float?), Taxes taxes = default(Taxes), Fees fees = default(Fees), float? total = default(float?), bool? approximateInd = default(bool?), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Amount and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "total" is required (not null)
            if (total == null)
            {
                throw new InvalidDataException("total is a required property for Amount and cannot be null");
            }
            else
            {
                this.Total = total;
            }
            this.CurrencySource = currencySource;
            this.CurrencyCode = currencyCode;
            this.Base = _base;
            this.Taxes = taxes;
            this.Fees = fees;
            this.ApproximateInd = approximateInd;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CurrencyCodeISO
        /// </summary>
        /// <value>Assigned Type: c-0400:CurrencyCodeISO</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// The price prior to all applicable taxes of a product such as the rate for a room or fare for a flight.
        /// </summary>
        /// <value>The price prior to all applicable taxes of a product such as the rate for a room or fare for a flight.</value>
        [DataMember(Name="Base", EmitDefaultValue=false)]
        public float? Base { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Taxes
        /// </summary>
        /// <value>Assigned Type: c-0400:Taxes</value>
        [DataMember(Name="Taxes", EmitDefaultValue=false)]
        public Taxes Taxes { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Fees
        /// </summary>
        /// <value>Assigned Type: c-0400:Fees</value>
        [DataMember(Name="Fees", EmitDefaultValue=false)]
        public Fees Fees { get; set; }
        /// <summary>
        /// Specifies the total price including base + taxes + fees
        /// </summary>
        /// <value>Specifies the total price including base + taxes + fees</value>
        [DataMember(Name="Total", EmitDefaultValue=false)]
        public float? Total { get; set; }
        /// <summary>
        /// True if this amount has been converted from the original amount
        /// </summary>
        /// <value>True if this amount has been converted from the original amount</value>
        [DataMember(Name="approximateInd", EmitDefaultValue=false)]
        public bool? ApproximateInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Amount {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CurrencySource: ").Append(CurrencySource).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  ApproximateInd: ").Append(ApproximateInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Amount);
        }
        /// <summary>
        /// Returns true if Amount instances are equal
        /// </summary>
        /// <param name="input">Instance of Amount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Amount input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CurrencySource == input.CurrencySource ||
                    (this.CurrencySource != null &&
                    this.CurrencySource.Equals(input.CurrencySource))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Base == input.Base ||
                    (this.Base != null &&
                    this.Base.Equals(input.Base))
                ) && 
                (
                    this.Taxes == input.Taxes ||
                    (this.Taxes != null &&
                    this.Taxes.Equals(input.Taxes))
                ) && 
                (
                    this.Fees == input.Fees ||
                    (this.Fees != null &&
                    this.Fees.Equals(input.Fees))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.ApproximateInd == input.ApproximateInd ||
                    (this.ApproximateInd != null &&
                    this.ApproximateInd.Equals(input.ApproximateInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CurrencySource != null)
                    hashCode = hashCode * 59 + this.CurrencySource.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Base != null)
                    hashCode = hashCode * 59 + this.Base.GetHashCode();
                if (this.Taxes != null)
                    hashCode = hashCode * 59 + this.Taxes.GetHashCode();
                if (this.Fees != null)
                    hashCode = hashCode * 59 + this.Fees.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.ApproximateInd != null)
                    hashCode = hashCode * 59 + this.ApproximateInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // CurrencyCode (string) pattern
            Regex regexCurrencyCode = new Regex(@"[a-zA-Z]{3}", RegexOptions.CultureInvariant);
            if (false == regexCurrencyCode.Match(this.CurrencyCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyCode, must match a pattern of " + regexCurrencyCode, new [] { "CurrencyCode" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// AncillaryBrandText
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(AncillaryBrandTextDetail), "AncillaryBrandTextDetail")]
    public partial class AncillaryBrandText :  IEquatable<AncillaryBrandText>, IValidatableObject
    {
        /// <summary>
        /// The audience targeted for the brand information
        /// </summary>
        /// <value>The audience targeted for the brand information</value>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public BrandTargetEnum? Target { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AncillaryBrandText" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AncillaryBrandText() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AncillaryBrandText" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">Internally referenced id.</param>
        /// <param name="target">The audience targeted for the brand information.</param>
        /// <param name="textFormatted">textFormatted (required).</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public AncillaryBrandText(string type = default(string), string id = default(string), BrandTargetEnum? target = default(BrandTargetEnum?), List<TextFormatted> textFormatted = default(List<TextFormatted>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for AncillaryBrandText and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "textFormatted" is required (not null)
            if (textFormatted == null)
            {
                throw new InvalidDataException("textFormatted is a required property for AncillaryBrandText and cannot be null");
            }
            else
            {
                this.TextFormatted = textFormatted;
            }
            this.Id = id;
            this.Target = target;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Internally referenced id
        /// </summary>
        /// <value>Internally referenced id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets TextFormatted
        /// </summary>
        [DataMember(Name="TextFormatted", EmitDefaultValue=false)]
        public List<TextFormatted> TextFormatted { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AncillaryBrandText {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  TextFormatted: ").Append(TextFormatted).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AncillaryBrandText);
        }
        /// <summary>
        /// Returns true if AncillaryBrandText instances are equal
        /// </summary>
        /// <param name="input">Instance of AncillaryBrandText to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AncillaryBrandText input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.TextFormatted == input.TextFormatted ||
                    this.TextFormatted != null &&
                    this.TextFormatted.SequenceEqual(input.TextFormatted)
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                if (this.TextFormatted != null)
                    hashCode = hashCode * 59 + this.TextFormatted.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// AncillaryBrandTextDetail
    /// </summary>
    [DataContract]
    public partial class AncillaryBrandTextDetail : AncillaryBrandText,  IEquatable<AncillaryBrandTextDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AncillaryBrandTextDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AncillaryBrandTextDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AncillaryBrandTextDetail" /> class.
        /// </summary>
        /// <param name="sequence">The order of the text block, if there are more than one block..</param>
        /// <param name="description">Assigned Type: c-0400:Description.</param>
        /// <param name="image">Assigned Type: c-0400:Image.</param>
        /// <param name="uRL">A URL for this block.</param>
        /// <param name="dateCreateModify">Assigned Type: c-0400:DateCreateModify (required).</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public AncillaryBrandTextDetail(int? sequence = default(int?), string description = default(string), Image image = default(Image), string uRL = default(string), DateCreateModify dateCreateModify = default(DateCreateModify), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "AncillaryBrandTextDetail", string id = default(string), BrandTargetEnum? target = default(BrandTargetEnum?), List<TextFormatted> textFormatted = default(List<TextFormatted>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, id, target, textFormatted, extensionPointSummary)
        {
            // to ensure "dateCreateModify" is required (not null)
            if (dateCreateModify == null)
            {
                throw new InvalidDataException("dateCreateModify is a required property for AncillaryBrandTextDetail and cannot be null");
            }
            else
            {
                this.DateCreateModify = dateCreateModify;
            }
            this.Sequence = sequence;
            this.Description = description;
            this.Image = image;
            this.URL = uRL;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// The order of the text block, if there are more than one block.
        /// </summary>
        /// <value>The order of the text block, if there are more than one block.</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Description
        /// </summary>
        /// <value>Assigned Type: c-0400:Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Image
        /// </summary>
        /// <value>Assigned Type: c-0400:Image</value>
        [DataMember(Name="Image", EmitDefaultValue=false)]
        public Image Image { get; set; }
        /// <summary>
        /// A URL for this block
        /// </summary>
        /// <value>A URL for this block</value>
        [DataMember(Name="URL", EmitDefaultValue=false)]
        public string URL { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:DateCreateModify
        /// </summary>
        /// <value>Assigned Type: c-0400:DateCreateModify</value>
        [DataMember(Name="DateCreateModify", EmitDefaultValue=false)]
        public DateCreateModify DateCreateModify { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AncillaryBrandTextDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  DateCreateModify: ").Append(DateCreateModify).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AncillaryBrandTextDetail);
        }
        /// <summary>
        /// Returns true if AncillaryBrandTextDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of AncillaryBrandTextDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AncillaryBrandTextDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && base.Equals(input) && 
                (
                    this.URL == input.URL ||
                    (this.URL != null &&
                    this.URL.Equals(input.URL))
                ) && base.Equals(input) && 
                (
                    this.DateCreateModify == input.DateCreateModify ||
                    (this.DateCreateModify != null &&
                    this.DateCreateModify.Equals(input.DateCreateModify))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.URL != null)
                    hashCode = hashCode * 59 + this.URL.GetHashCode();
                if (this.DateCreateModify != null)
                    hashCode = hashCode * 59 + this.DateCreateModify.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Arrival
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(ArrivalDetail), "ArrivalDetail")]
    public partial class Arrival :  IEquatable<Arrival>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Arrival" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Arrival() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Arrival" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="location">Assigned Type: c-0400:LocationCodeIATA (required).</param>
        /// <param name="date">Local date of for arrival or departure (required).</param>
        /// <param name="time">Local time Date of for arrival or departure (required).</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public Arrival(string type = default(string), string location = default(string), DateTime? date = default(DateTime?), string time = default(string), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Arrival and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new InvalidDataException("location is a required property for Arrival and cannot be null");
            }
            else
            {
                this.Location = location;
            }
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for Arrival and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "time" is required (not null)
            if (time == null)
            {
                throw new InvalidDataException("time is a required property for Arrival and cannot be null");
            }
            else
            {
                this.Time = time;
            }
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:LocationCodeIATA
        /// </summary>
        /// <value>Assigned Type: c-0400:LocationCodeIATA</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }
        /// <summary>
        /// Local date of for arrival or departure
        /// </summary>
        /// <value>Local date of for arrival or departure</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }
        /// <summary>
        /// Local time Date of for arrival or departure
        /// </summary>
        /// <value>Local time Date of for arrival or departure</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public string Time { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Arrival {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Arrival);
        }
        /// <summary>
        /// Returns true if Arrival instances are equal
        /// </summary>
        /// <param name="input">Instance of Arrival to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Arrival input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Location (string) maxLength
            if(this.Location != null && this.Location.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Location, length must be less than 3.", new [] { "Location" });
            }
            // Location (string) minLength
            if(this.Location != null && this.Location.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Location, length must be greater than 3.", new [] { "Location" });
            }
            // Location (string) pattern
            Regex regexLocation = new Regex(@"([a-zA-Z]{3})", RegexOptions.CultureInvariant);
            if (false == regexLocation.Match(this.Location).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Location, must match a pattern of " + regexLocation, new [] { "Location" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ArrivalDetail
    /// </summary>
    [DataContract]
    public partial class ArrivalDetail : Arrival,  IEquatable<ArrivalDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArrivalDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ArrivalDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArrivalDetail" /> class.
        /// </summary>
        /// <param name="terminal">Assigned Type: c-0400:StringAlphaNumeric.</param>
        /// <param name="country">Assigned Type: c-0400:CountryCodeISO.</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public ArrivalDetail(string terminal = default(string), string country = default(string), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "ArrivalDetail", string location = default(string), DateTime? date = default(DateTime?), string time = default(string), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, location, date, time, extensionPointSummary)
        {
            this.Terminal = terminal;
            this.Country = country;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// Assigned Type: c-0400:StringAlphaNumeric
        /// </summary>
        /// <value>Assigned Type: c-0400:StringAlphaNumeric</value>
        [DataMember(Name="terminal", EmitDefaultValue=false)]
        public string Terminal { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CountryCodeISO
        /// </summary>
        /// <value>Assigned Type: c-0400:CountryCodeISO</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArrivalDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Terminal: ").Append(Terminal).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArrivalDetail);
        }
        /// <summary>
        /// Returns true if ArrivalDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ArrivalDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArrivalDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Terminal == input.Terminal ||
                    (this.Terminal != null &&
                    this.Terminal.Equals(input.Terminal))
                ) && base.Equals(input) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Terminal != null)
                    hashCode = hashCode * 59 + this.Terminal.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Terminal (string) maxLength
            if(this.Terminal != null && this.Terminal.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Terminal, length must be less than 4096.", new [] { "Terminal" });
            }
            // Terminal (string) pattern
            Regex regexTerminal = new Regex(@"([0-9a-zA-Z]+)?", RegexOptions.CultureInvariant);
            if (false == regexTerminal.Match(this.Terminal).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Terminal, must match a pattern of " + regexTerminal, new [] { "Terminal" });
            }
            // Country (string) pattern
            Regex regexCountry = new Regex(@"[a-zA-Z]{2}", RegexOptions.CultureInvariant);
            if (false == regexCountry.Match(this.Country).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, must match a pattern of " + regexCountry, new [] { "Country" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// AttributeInfo
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class AttributeInfo :  IEquatable<AttributeInfo>, IValidatableObject
    {
        /// <summary>
        /// The indicator as to hoe the brand and the product are associated.
        /// </summary>
        /// <value>The indicator as to hoe the brand and the product are associated.</value>
        [DataMember(Name="inclusion", EmitDefaultValue=false)]
        public BrandInclusionEnum Inclusion { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttributeInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AttributeInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttributeInfo" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="name">Assigned Type: ctbr-0400:BrandName (required).</param>
        /// <param name="inclusion">The indicator as to hoe the brand and the product are associated. (required).</param>
        /// <param name="brandText">brandText.</param>
        /// <param name="attributeInfo">attributeInfo.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public AttributeInfo(string type = default(string), string name = default(string), BrandInclusionEnum inclusion = default(BrandInclusionEnum), List<BrandText> brandText = default(List<BrandText>), List<AttributeInfo> attributeInfo = default(List<AttributeInfo>), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for AttributeInfo and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for AttributeInfo and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "inclusion" is required (not null)
            if (inclusion == null)
            {
                throw new InvalidDataException("inclusion is a required property for AttributeInfo and cannot be null");
            }
            else
            {
                this.Inclusion = inclusion;
            }
            this.BrandText = brandText;
            this._AttributeInfo = attributeInfo;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: ctbr-0400:BrandName
        /// </summary>
        /// <value>Assigned Type: ctbr-0400:BrandName</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets BrandText
        /// </summary>
        [DataMember(Name="BrandText", EmitDefaultValue=false)]
        public List<BrandText> BrandText { get; set; }
        /// <summary>
        /// Gets or Sets _AttributeInfo
        /// </summary>
        [DataMember(Name="AttributeInfo", EmitDefaultValue=false)]
        public List<AttributeInfo> _AttributeInfo { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttributeInfo {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Inclusion: ").Append(Inclusion).Append("\n");
            sb.Append("  BrandText: ").Append(BrandText).Append("\n");
            sb.Append("  _AttributeInfo: ").Append(_AttributeInfo).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttributeInfo);
        }
        /// <summary>
        /// Returns true if AttributeInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AttributeInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttributeInfo input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Inclusion == input.Inclusion ||
                    (this.Inclusion != null &&
                    this.Inclusion.Equals(input.Inclusion))
                ) && 
                (
                    this.BrandText == input.BrandText ||
                    this.BrandText != null &&
                    this.BrandText.SequenceEqual(input.BrandText)
                ) && 
                (
                    this._AttributeInfo == input._AttributeInfo ||
                    this._AttributeInfo != null &&
                    this._AttributeInfo.SequenceEqual(input._AttributeInfo)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Inclusion != null)
                    hashCode = hashCode * 59 + this.Inclusion.GetHashCode();
                if (this.BrandText != null)
                    hashCode = hashCode * 59 + this.BrandText.GetHashCode();
                if (this._AttributeInfo != null)
                    hashCode = hashCode * 59 + this._AttributeInfo.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BaggageAllowance
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(BaggageAllowanceDetail), "BaggageAllowanceDetail")]
    public partial class BaggageAllowance :  IEquatable<BaggageAllowance>, IValidatableObject
    {
        /// <summary>
        /// The type of baggage that is being limmited.
        /// </summary>
        /// <value>The type of baggage that is being limmited.</value>
        [DataMember(Name="baggageType", EmitDefaultValue=false)]
        public BaggageTypeEnum? BaggageType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BaggageAllowance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BaggageAllowance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BaggageAllowance" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="passengerTypeCodes">Assigned Type: c-0400:PassengerTypeCodeList.</param>
        /// <param name="baggageType">The type of baggage that is being limmited..</param>
        /// <param name="productRef">A product is any product, service or package of products and services  that can be priced and purchased by a specific supplier..</param>
        /// <param name="baggageItem">baggageItem (required).</param>
        /// <param name="segmentSequenceList">Segment sequence is only to be used when the baggage allowance differs between segments within a product. If so, then the ProducRef must be specified..</param>
        /// <param name="text">Text returned from the Airlines with general baggage information..</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public BaggageAllowance(string type = default(string), List<string> passengerTypeCodes = default(List<string>), BaggageTypeEnum? baggageType = default(BaggageTypeEnum?), List<string> productRef = default(List<string>), List<BaggageItem> baggageItem = default(List<BaggageItem>), List<int?> segmentSequenceList = default(List<int?>), string text = default(string), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BaggageAllowance and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "baggageItem" is required (not null)
            if (baggageItem == null)
            {
                throw new InvalidDataException("baggageItem is a required property for BaggageAllowance and cannot be null");
            }
            else
            {
                this.BaggageItem = baggageItem;
            }
            this.PassengerTypeCodes = passengerTypeCodes;
            this.BaggageType = baggageType;
            this.ProductRef = productRef;
            this.SegmentSequenceList = segmentSequenceList;
            this.Text = text;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:PassengerTypeCodeList
        /// </summary>
        /// <value>Assigned Type: c-0400:PassengerTypeCodeList</value>
        [DataMember(Name="passengerTypeCodes", EmitDefaultValue=false)]
        public List<string> PassengerTypeCodes { get; set; }
        /// <summary>
        /// A product is any product, service or package of products and services  that can be priced and purchased by a specific supplier.
        /// </summary>
        /// <value>A product is any product, service or package of products and services  that can be priced and purchased by a specific supplier.</value>
        [DataMember(Name="ProductRef", EmitDefaultValue=false)]
        public List<string> ProductRef { get; set; }
        /// <summary>
        /// Gets or Sets BaggageItem
        /// </summary>
        [DataMember(Name="BaggageItem", EmitDefaultValue=false)]
        public List<BaggageItem> BaggageItem { get; set; }
        /// <summary>
        /// Segment sequence is only to be used when the baggage allowance differs between segments within a product. If so, then the ProducRef must be specified.
        /// </summary>
        /// <value>Segment sequence is only to be used when the baggage allowance differs between segments within a product. If so, then the ProducRef must be specified.</value>
        [DataMember(Name="SegmentSequenceList", EmitDefaultValue=false)]
        public List<int?> SegmentSequenceList { get; set; }
        /// <summary>
        /// Text returned from the Airlines with general baggage information.
        /// </summary>
        /// <value>Text returned from the Airlines with general baggage information.</value>
        [DataMember(Name="Text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaggageAllowance {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PassengerTypeCodes: ").Append(PassengerTypeCodes).Append("\n");
            sb.Append("  BaggageType: ").Append(BaggageType).Append("\n");
            sb.Append("  ProductRef: ").Append(ProductRef).Append("\n");
            sb.Append("  BaggageItem: ").Append(BaggageItem).Append("\n");
            sb.Append("  SegmentSequenceList: ").Append(SegmentSequenceList).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaggageAllowance);
        }
        /// <summary>
        /// Returns true if BaggageAllowance instances are equal
        /// </summary>
        /// <param name="input">Instance of BaggageAllowance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaggageAllowance input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.PassengerTypeCodes == input.PassengerTypeCodes ||
                    this.PassengerTypeCodes != null &&
                    this.PassengerTypeCodes.SequenceEqual(input.PassengerTypeCodes)
                ) && 
                (
                    this.BaggageType == input.BaggageType ||
                    (this.BaggageType != null &&
                    this.BaggageType.Equals(input.BaggageType))
                ) && 
                (
                    this.ProductRef == input.ProductRef ||
                    this.ProductRef != null &&
                    this.ProductRef.SequenceEqual(input.ProductRef)
                ) && 
                (
                    this.BaggageItem == input.BaggageItem ||
                    this.BaggageItem != null &&
                    this.BaggageItem.SequenceEqual(input.BaggageItem)
                ) && 
                (
                    this.SegmentSequenceList == input.SegmentSequenceList ||
                    this.SegmentSequenceList != null &&
                    this.SegmentSequenceList.SequenceEqual(input.SegmentSequenceList)
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.PassengerTypeCodes != null)
                    hashCode = hashCode * 59 + this.PassengerTypeCodes.GetHashCode();
                if (this.BaggageType != null)
                    hashCode = hashCode * 59 + this.BaggageType.GetHashCode();
                if (this.ProductRef != null)
                    hashCode = hashCode * 59 + this.ProductRef.GetHashCode();
                if (this.BaggageItem != null)
                    hashCode = hashCode * 59 + this.BaggageItem.GetHashCode();
                if (this.SegmentSequenceList != null)
                    hashCode = hashCode * 59 + this.SegmentSequenceList.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Text (string) maxLength
            if(this.Text != null && this.Text.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Text, length must be less than 128.", new [] { "Text" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BaggageAllowanceDetail
    /// </summary>
    [DataContract]
    public partial class BaggageAllowanceDetail : BaggageAllowance,  IEquatable<BaggageAllowanceDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaggageAllowanceDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BaggageAllowanceDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BaggageAllowanceDetail" /> class.
        /// </summary>
        /// <param name="url">Url for the airline&#39;s baggage information web site.</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public BaggageAllowanceDetail(string url = default(string), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "BaggageAllowanceDetail", List<string> passengerTypeCodes = default(List<string>), BaggageTypeEnum? baggageType = default(BaggageTypeEnum?), List<string> productRef = default(List<string>), List<BaggageItem> baggageItem = default(List<BaggageItem>), List<int?> segmentSequenceList = default(List<int?>), string text = default(string), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, passengerTypeCodes, baggageType, productRef, baggageItem, segmentSequenceList, text, extensionPointSummary)
        {
            this.Url = url;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// Url for the airline&#39;s baggage information web site
        /// </summary>
        /// <value>Url for the airline&#39;s baggage information web site</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaggageAllowanceDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaggageAllowanceDetail);
        }
        /// <summary>
        /// Returns true if BaggageAllowanceDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of BaggageAllowanceDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaggageAllowanceDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BaggageItem
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class BaggageItem :  IEquatable<BaggageItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaggageItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BaggageItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BaggageItem" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="quantity">Assigned Type: c-0400:NumberSingleDigit.</param>
        /// <param name="measurement">measurement.</param>
        /// <param name="baggageFee">Assigned Type: c-0400:CurrencyAmount.</param>
        /// <param name="text">Text returned from the shop response.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public BaggageItem(string type = default(string), int? quantity = default(int?), List<Measurement> measurement = default(List<Measurement>), CurrencyAmount baggageFee = default(CurrencyAmount), string text = default(string), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BaggageItem and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Quantity = quantity;
            this.Measurement = measurement;
            this.BaggageFee = baggageFee;
            this.Text = text;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:NumberSingleDigit
        /// </summary>
        /// <value>Assigned Type: c-0400:NumberSingleDigit</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }
        /// <summary>
        /// Gets or Sets Measurement
        /// </summary>
        [DataMember(Name="Measurement", EmitDefaultValue=false)]
        public List<Measurement> Measurement { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CurrencyAmount
        /// </summary>
        /// <value>Assigned Type: c-0400:CurrencyAmount</value>
        [DataMember(Name="BaggageFee", EmitDefaultValue=false)]
        public CurrencyAmount BaggageFee { get; set; }
        /// <summary>
        /// Text returned from the shop response
        /// </summary>
        /// <value>Text returned from the shop response</value>
        [DataMember(Name="Text", EmitDefaultValue=false)]
        public string Text { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaggageItem {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Measurement: ").Append(Measurement).Append("\n");
            sb.Append("  BaggageFee: ").Append(BaggageFee).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BaggageItem);
        }
        /// <summary>
        /// Returns true if BaggageItem instances are equal
        /// </summary>
        /// <param name="input">Instance of BaggageItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaggageItem input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Measurement == input.Measurement ||
                    this.Measurement != null &&
                    this.Measurement.SequenceEqual(input.Measurement)
                ) && 
                (
                    this.BaggageFee == input.BaggageFee ||
                    (this.BaggageFee != null &&
                    this.BaggageFee.Equals(input.BaggageFee))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Measurement != null)
                    hashCode = hashCode * 59 + this.Measurement.GetHashCode();
                if (this.BaggageFee != null)
                    hashCode = hashCode * 59 + this.BaggageFee.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Text (string) maxLength
            if(this.Text != null && this.Text.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Text, length must be less than 128.", new [] { "Text" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Defines BaggageTypeEnum
    /// </summary>
    public enum BaggageTypeEnum
    {
        /// <summary>
        /// Enum CarryOn for value: CarryOn
        /// </summary>
        CarryOn = CarryOn,
        /// <summary>
        /// Enum FirstCheckedBag for value: FirstCheckedBag
        /// </summary>
        FirstCheckedBag = FirstCheckedBag,
        /// <summary>
        /// Enum SecondCheckedBag for value: SecondCheckedBag
        /// </summary>
        SecondCheckedBag = SecondCheckedBag,
        /// <summary>
        /// Enum AdditionalBags for value: AdditionalBags
        /// </summary>
        AdditionalBags = AdditionalBags,
        /// <summary>
        /// Enum BaggageEmbargo for value: BaggageEmbargo
        /// </summary>
        BaggageEmbargo = BaggageEmbargo
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Brand
    /// </summary>
    [DataContract]
    public partial class Brand : BrandID,  IEquatable<Brand>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Brand" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Brand() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Brand" /> class.
        /// </summary>
        /// <param name="name">Assigned Type: ctbr-0400:BrandName (required).</param>
        /// <param name="tier">Assigned Type: c-0400:NumberSingleDigit.</param>
        /// <param name="brandAttribute">brandAttribute (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public Brand(string name = default(string), int? tier = default(int?), List<BrandAttribute> brandAttribute = default(List<BrandAttribute>), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "Brand", string id = default(string), string brandRef = default(string), Identifier identifier = default(Identifier)) : base(type, id, brandRef, identifier)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Brand and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "brandAttribute" is required (not null)
            if (brandAttribute == null)
            {
                throw new InvalidDataException("brandAttribute is a required property for Brand and cannot be null");
            }
            else
            {
                this.BrandAttribute = brandAttribute;
            }
            this.Tier = tier;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Assigned Type: ctbr-0400:BrandName
        /// </summary>
        /// <value>Assigned Type: ctbr-0400:BrandName</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:NumberSingleDigit
        /// </summary>
        /// <value>Assigned Type: c-0400:NumberSingleDigit</value>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public int? Tier { get; set; }
        /// <summary>
        /// Gets or Sets BrandAttribute
        /// </summary>
        [DataMember(Name="BrandAttribute", EmitDefaultValue=false)]
        public List<BrandAttribute> BrandAttribute { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Brand {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  BrandAttribute: ").Append(BrandAttribute).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Brand);
        }
        /// <summary>
        /// Returns true if Brand instances are equal
        /// </summary>
        /// <param name="input">Instance of Brand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Brand input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.Tier == input.Tier ||
                    (this.Tier != null &&
                    this.Tier.Equals(input.Tier))
                ) && base.Equals(input) && 
                (
                    this.BrandAttribute == input.BrandAttribute ||
                    this.BrandAttribute != null &&
                    this.BrandAttribute.SequenceEqual(input.BrandAttribute)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Tier != null)
                    hashCode = hashCode * 59 + this.Tier.GetHashCode();
                if (this.BrandAttribute != null)
                    hashCode = hashCode * 59 + this.BrandAttribute.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BrandAttribute
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class BrandAttribute :  IEquatable<BrandAttribute>, IValidatableObject
    {
        /// <summary>
        /// The Travelport classification used for a category of ancillaries such as Seat, Bags, etc. This is an initial list that will be added to.
        /// </summary>
        /// <value>The Travelport classification used for a category of ancillaries such as Seat, Bags, etc. This is an initial list that will be added to.</value>
        [DataMember(Name="classification", EmitDefaultValue=false)]
        public BrandClassificationEnum Classification { get; set; }
        /// <summary>
        /// whether this attribute is included, chargeable, etc.
        /// </summary>
        /// <value>whether this attribute is included, chargeable, etc.</value>
        [DataMember(Name="inclusion", EmitDefaultValue=false)]
        public BrandInclusionEnum Inclusion { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandAttribute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandAttribute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandAttribute" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="classification">The Travelport classification used for a category of ancillaries such as Seat, Bags, etc. This is an initial list that will be added to. (required).</param>
        /// <param name="inclusion">whether this attribute is included, chargeable, etc. (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public BrandAttribute(string type = default(string), BrandClassificationEnum classification = default(BrandClassificationEnum), BrandInclusionEnum inclusion = default(BrandInclusionEnum), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BrandAttribute and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "classification" is required (not null)
            if (classification == null)
            {
                throw new InvalidDataException("classification is a required property for BrandAttribute and cannot be null");
            }
            else
            {
                this.Classification = classification;
            }
            // to ensure "inclusion" is required (not null)
            if (inclusion == null)
            {
                throw new InvalidDataException("inclusion is a required property for BrandAttribute and cannot be null");
            }
            else
            {
                this.Inclusion = inclusion;
            }
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandAttribute {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  Inclusion: ").Append(Inclusion).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandAttribute);
        }
        /// <summary>
        /// Returns true if BrandAttribute instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandAttribute input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Classification == input.Classification ||
                    (this.Classification != null &&
                    this.Classification.Equals(input.Classification))
                ) && 
                (
                    this.Inclusion == input.Inclusion ||
                    (this.Inclusion != null &&
                    this.Inclusion.Equals(input.Inclusion))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Classification != null)
                    hashCode = hashCode * 59 + this.Classification.GetHashCode();
                if (this.Inclusion != null)
                    hashCode = hashCode * 59 + this.Inclusion.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// The Travelport classification used for a category of ancillaries such as Seat, Bags, etc. This is an initial list that will be added to.
    /// </summary>
    /// <value>The Travelport classification used for a category of ancillaries such as Seat, Bags, etc. This is an initial list that will be added to.</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum BrandClassificationEnum
    {
        /// <summary>
        /// Enum CheckedBag for value: CheckedBag
        /// </summary>
        [EnumMember(Value = "CheckedBag")]
        CheckedBag = 1,
        /// <summary>
        /// Enum CarryOn for value: CarryOn
        /// </summary>
        [EnumMember(Value = "CarryOn")]
        CarryOn = 2,
        /// <summary>
        /// Enum Rebooking for value: Rebooking
        /// </summary>
        [EnumMember(Value = "Rebooking")]
        Rebooking = 3,
        /// <summary>
        /// Enum Refund for value: Refund
        /// </summary>
        [EnumMember(Value = "Refund")]
        Refund = 4,
        /// <summary>
        /// Enum Seats for value: Seats
        /// </summary>
        [EnumMember(Value = "Seats")]
        Seats = 5,
        /// <summary>
        /// Enum Meals for value: Meals
        /// </summary>
        [EnumMember(Value = "Meals")]
        Meals = 6,
        /// <summary>
        /// Enum WiFi for value: WiFi
        /// </summary>
        [EnumMember(Value = "WiFi")]
        WiFi = 7
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BrandFeatureText
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(BrandFeatureTextDetail), "BrandFeatureTextDetail")]
    public partial class BrandFeatureText :  IEquatable<BrandFeatureText>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandFeatureText" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandFeatureText() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandFeatureText" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="title">Assigned Type: c-0400:String.</param>
        /// <param name="id">Internally referenced id.</param>
        /// <param name="textFormatted">textFormatted (required).</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public BrandFeatureText(string type = default(string), string title = default(string), string id = default(string), List<TextFormatted> textFormatted = default(List<TextFormatted>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BrandFeatureText and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "textFormatted" is required (not null)
            if (textFormatted == null)
            {
                throw new InvalidDataException("textFormatted is a required property for BrandFeatureText and cannot be null");
            }
            else
            {
                this.TextFormatted = textFormatted;
            }
            this.Title = title;
            this.Id = id;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:String
        /// </summary>
        /// <value>Assigned Type: c-0400:String</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Internally referenced id
        /// </summary>
        /// <value>Internally referenced id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets TextFormatted
        /// </summary>
        [DataMember(Name="TextFormatted", EmitDefaultValue=false)]
        public List<TextFormatted> TextFormatted { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandFeatureText {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TextFormatted: ").Append(TextFormatted).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandFeatureText);
        }
        /// <summary>
        /// Returns true if BrandFeatureText instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandFeatureText to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandFeatureText input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TextFormatted == input.TextFormatted ||
                    this.TextFormatted != null &&
                    this.TextFormatted.SequenceEqual(input.TextFormatted)
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TextFormatted != null)
                    hashCode = hashCode * 59 + this.TextFormatted.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if(this.Title != null && this.Title.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 512.", new [] { "Title" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BrandFeatureTextDetail
    /// </summary>
    [DataContract]
    public partial class BrandFeatureTextDetail : BrandFeatureText,  IEquatable<BrandFeatureTextDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandFeatureTextDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandFeatureTextDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandFeatureTextDetail" /> class.
        /// </summary>
        /// <param name="sequence">The order of the text block, if there are more than one block..</param>
        /// <param name="description">Assigned Type: c-0400:Description.</param>
        /// <param name="image">Assigned Type: c-0400:Image.</param>
        /// <param name="uRL">A URL for this block.</param>
        /// <param name="dateCreateModify">Assigned Type: c-0400:DateCreateModify (required).</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public BrandFeatureTextDetail(int? sequence = default(int?), string description = default(string), Image image = default(Image), string uRL = default(string), DateCreateModify dateCreateModify = default(DateCreateModify), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "BrandFeatureTextDetail", string title = default(string), string id = default(string), List<TextFormatted> textFormatted = default(List<TextFormatted>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, title, id, textFormatted, extensionPointSummary)
        {
            // to ensure "dateCreateModify" is required (not null)
            if (dateCreateModify == null)
            {
                throw new InvalidDataException("dateCreateModify is a required property for BrandFeatureTextDetail and cannot be null");
            }
            else
            {
                this.DateCreateModify = dateCreateModify;
            }
            this.Sequence = sequence;
            this.Description = description;
            this.Image = image;
            this.URL = uRL;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// The order of the text block, if there are more than one block.
        /// </summary>
        /// <value>The order of the text block, if there are more than one block.</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Description
        /// </summary>
        /// <value>Assigned Type: c-0400:Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Image
        /// </summary>
        /// <value>Assigned Type: c-0400:Image</value>
        [DataMember(Name="Image", EmitDefaultValue=false)]
        public Image Image { get; set; }
        /// <summary>
        /// A URL for this block
        /// </summary>
        /// <value>A URL for this block</value>
        [DataMember(Name="URL", EmitDefaultValue=false)]
        public string URL { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:DateCreateModify
        /// </summary>
        /// <value>Assigned Type: c-0400:DateCreateModify</value>
        [DataMember(Name="DateCreateModify", EmitDefaultValue=false)]
        public DateCreateModify DateCreateModify { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandFeatureTextDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  DateCreateModify: ").Append(DateCreateModify).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandFeatureTextDetail);
        }
        /// <summary>
        /// Returns true if BrandFeatureTextDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandFeatureTextDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandFeatureTextDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && base.Equals(input) && 
                (
                    this.URL == input.URL ||
                    (this.URL != null &&
                    this.URL.Equals(input.URL))
                ) && base.Equals(input) && 
                (
                    this.DateCreateModify == input.DateCreateModify ||
                    (this.DateCreateModify != null &&
                    this.DateCreateModify.Equals(input.DateCreateModify))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.URL != null)
                    hashCode = hashCode * 59 + this.URL.GetHashCode();
                if (this.DateCreateModify != null)
                    hashCode = hashCode * 59 + this.DateCreateModify.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BrandFullInfo
    /// </summary>
    [DataContract]
    public partial class BrandFullInfo : BrandFullInfoID,  IEquatable<BrandFullInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandFullInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandFullInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandFullInfo" /> class.
        /// </summary>
        /// <param name="brandInfo">Assigned Type: ctbr-0400:BrandInfo.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public BrandFullInfo(BrandInfo brandInfo = default(BrandInfo), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "BrandFullInfo", string id = default(string), string brandFullInfoRef = default(string), Identifier identifier = default(Identifier)) : base(type, id, brandFullInfoRef, identifier)
        {
            this.BrandInfo = brandInfo;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Assigned Type: ctbr-0400:BrandInfo
        /// </summary>
        /// <value>Assigned Type: ctbr-0400:BrandInfo</value>
        [DataMember(Name="BrandInfo", EmitDefaultValue=false)]
        public BrandInfo BrandInfo { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandFullInfo {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BrandInfo: ").Append(BrandInfo).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandFullInfo);
        }
        /// <summary>
        /// Returns true if BrandFullInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandFullInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandFullInfo input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.BrandInfo == input.BrandInfo ||
                    (this.BrandInfo != null &&
                    this.BrandInfo.Equals(input.BrandInfo))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BrandInfo != null)
                    hashCode = hashCode * 59 + this.BrandInfo.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BrandFullInfoID
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(BrandFullInfo), "BrandFullInfo")]
    public partial class BrandFullInfoID :  IEquatable<BrandFullInfoID>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandFullInfoID" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandFullInfoID() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandFullInfoID" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">Local indentifier within a given message for this object..</param>
        /// <param name="brandFullInfoRef">Used to reference another instance of this object in the same message.</param>
        /// <param name="identifier">Assigned Type: c-0400:Identifier.</param>
        public BrandFullInfoID(string type = default(string), string id = default(string), string brandFullInfoRef = default(string), Identifier identifier = default(Identifier))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BrandFullInfoID and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Id = id;
            this.BrandFullInfoRef = brandFullInfoRef;
            this.Identifier = identifier;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Local indentifier within a given message for this object.
        /// </summary>
        /// <value>Local indentifier within a given message for this object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Used to reference another instance of this object in the same message
        /// </summary>
        /// <value>Used to reference another instance of this object in the same message</value>
        [DataMember(Name="BrandFullInfoRef", EmitDefaultValue=false)]
        public string BrandFullInfoRef { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Identifier
        /// </summary>
        /// <value>Assigned Type: c-0400:Identifier</value>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public Identifier Identifier { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandFullInfoID {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BrandFullInfoRef: ").Append(BrandFullInfoRef).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandFullInfoID);
        }
        /// <summary>
        /// Returns true if BrandFullInfoID instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandFullInfoID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandFullInfoID input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BrandFullInfoRef == input.BrandFullInfoRef ||
                    (this.BrandFullInfoRef != null &&
                    this.BrandFullInfoRef.Equals(input.BrandFullInfoRef))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BrandFullInfoRef != null)
                    hashCode = hashCode * 59 + this.BrandFullInfoRef.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BrandFullInfoQueryMerchandising
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class BrandFullInfoQueryMerchandising :  IEquatable<BrandFullInfoQueryMerchandising>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandFullInfoQueryMerchandising" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandFullInfoQueryMerchandising() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandFullInfoQueryMerchandising" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="merchandisingID">Merchandising ID.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public BrandFullInfoQueryMerchandising(string type = default(string), string merchandisingID = default(string), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BrandFullInfoQueryMerchandising and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.MerchandisingID = merchandisingID;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Merchandising ID
        /// </summary>
        /// <value>Merchandising ID</value>
        [DataMember(Name="MerchandisingID", EmitDefaultValue=false)]
        public string MerchandisingID { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandFullInfoQueryMerchandising {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MerchandisingID: ").Append(MerchandisingID).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandFullInfoQueryMerchandising);
        }
        /// <summary>
        /// Returns true if BrandFullInfoQueryMerchandising instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandFullInfoQueryMerchandising to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandFullInfoQueryMerchandising input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MerchandisingID == input.MerchandisingID ||
                    (this.MerchandisingID != null &&
                    this.MerchandisingID.Equals(input.MerchandisingID))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.MerchandisingID != null)
                    hashCode = hashCode * 59 + this.MerchandisingID.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // MerchandisingID (string) maxLength
            if(this.MerchandisingID != null && this.MerchandisingID.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchandisingID, length must be less than 512.", new [] { "MerchandisingID" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BrandID
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(Brand), "Brand")]
    public partial class BrandID :  IEquatable<BrandID>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandID" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandID() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandID" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">Local indentifier within a given message for this object..</param>
        /// <param name="brandRef">Used to reference another instance of this object in the same message.</param>
        /// <param name="identifier">Assigned Type: c-0400:Identifier.</param>
        public BrandID(string type = default(string), string id = default(string), string brandRef = default(string), Identifier identifier = default(Identifier))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BrandID and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Id = id;
            this.BrandRef = brandRef;
            this.Identifier = identifier;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Local indentifier within a given message for this object.
        /// </summary>
        /// <value>Local indentifier within a given message for this object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Used to reference another instance of this object in the same message
        /// </summary>
        /// <value>Used to reference another instance of this object in the same message</value>
        [DataMember(Name="BrandRef", EmitDefaultValue=false)]
        public string BrandRef { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Identifier
        /// </summary>
        /// <value>Assigned Type: c-0400:Identifier</value>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public Identifier Identifier { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandID {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BrandRef: ").Append(BrandRef).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandID);
        }
        /// <summary>
        /// Returns true if BrandID instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandID input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.BrandRef == input.BrandRef ||
                    (this.BrandRef != null &&
                    this.BrandRef.Equals(input.BrandRef))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.BrandRef != null)
                    hashCode = hashCode * 59 + this.BrandRef.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// The indicator as to hoe the brand and the product are associated.
    /// </summary>
    /// <value>The indicator as to hoe the brand and the product are associated.</value>
    public enum BrandInclusionEnum
    {
        /// <summary>
        /// Enum Included for value: Included
        /// </summary>
        Included = Included,
        /// <summary>
        /// Enum Chargeable for value: Chargeable
        /// </summary>
        Chargeable = Chargeable,
        /// <summary>
        /// Enum NotOffered for value: Not Offered
        /// </summary>
        NotOffered = Not Offered
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BrandInfo
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class BrandInfo :  IEquatable<BrandInfo>, IValidatableObject
    {
        /// <summary>
        /// The indicator as to hoe the brand and the product are associated.
        /// </summary>
        /// <value>The indicator as to hoe the brand and the product are associated.</value>
        [DataMember(Name="inclusion", EmitDefaultValue=false)]
        public BrandInclusionEnum Inclusion { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandInfo" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="name">Assigned Type: ctbr-0400:BrandName (required).</param>
        /// <param name="inclusion">The indicator as to hoe the brand and the product are associated. (required).</param>
        /// <param name="brandText">brandText.</param>
        /// <param name="attributeInfo">attributeInfo.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public BrandInfo(string type = default(string), string name = default(string), BrandInclusionEnum inclusion = default(BrandInclusionEnum), List<BrandText> brandText = default(List<BrandText>), List<AttributeInfo> attributeInfo = default(List<AttributeInfo>), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BrandInfo and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for BrandInfo and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "inclusion" is required (not null)
            if (inclusion == null)
            {
                throw new InvalidDataException("inclusion is a required property for BrandInfo and cannot be null");
            }
            else
            {
                this.Inclusion = inclusion;
            }
            this.BrandText = brandText;
            this.AttributeInfo = attributeInfo;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: ctbr-0400:BrandName
        /// </summary>
        /// <value>Assigned Type: ctbr-0400:BrandName</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets BrandText
        /// </summary>
        [DataMember(Name="BrandText", EmitDefaultValue=false)]
        public List<BrandText> BrandText { get; set; }
        /// <summary>
        /// Gets or Sets AttributeInfo
        /// </summary>
        [DataMember(Name="AttributeInfo", EmitDefaultValue=false)]
        public List<AttributeInfo> AttributeInfo { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandInfo {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Inclusion: ").Append(Inclusion).Append("\n");
            sb.Append("  BrandText: ").Append(BrandText).Append("\n");
            sb.Append("  AttributeInfo: ").Append(AttributeInfo).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandInfo);
        }
        /// <summary>
        /// Returns true if BrandInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandInfo input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Inclusion == input.Inclusion ||
                    (this.Inclusion != null &&
                    this.Inclusion.Equals(input.Inclusion))
                ) && 
                (
                    this.BrandText == input.BrandText ||
                    this.BrandText != null &&
                    this.BrandText.SequenceEqual(input.BrandText)
                ) && 
                (
                    this.AttributeInfo == input.AttributeInfo ||
                    this.AttributeInfo != null &&
                    this.AttributeInfo.SequenceEqual(input.AttributeInfo)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Inclusion != null)
                    hashCode = hashCode * 59 + this.Inclusion.GetHashCode();
                if (this.BrandText != null)
                    hashCode = hashCode * 59 + this.BrandText.GetHashCode();
                if (this.AttributeInfo != null)
                    hashCode = hashCode * 59 + this.AttributeInfo.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// The audience targeted for the brand information
    /// </summary>
    /// <value>The audience targeted for the brand information</value>
    public enum BrandTargetEnum
    {
        /// <summary>
        /// Enum Strapline for value: Strapline
        /// </summary>
        Strapline = Strapline,
        /// <summary>
        /// Enum MarketingAgent for value: MarketingAgent
        /// </summary>
        MarketingAgent = MarketingAgent,
        /// <summary>
        /// Enum MarketingConsumer for value: MarketingConsumer
        /// </summary>
        MarketingConsumer = MarketingConsumer,
        /// <summary>
        /// Enum External for value: External
        /// </summary>
        External = External,
        /// <summary>
        /// Enum Short for value: Short
        /// </summary>
        Short = Short,
        /// <summary>
        /// Enum Agent for value: Agent
        /// </summary>
        Agent = Agent,
        /// <summary>
        /// Enum Consumer for value: Consumer
        /// </summary>
        Consumer = Consumer,
        /// <summary>
        /// Enum Upsell for value: Upsell
        /// </summary>
        Upsell = Upsell
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BrandText
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(BrandTextDetail), "BrandTextDetail")]
    public partial class BrandText :  IEquatable<BrandText>, IValidatableObject
    {
        /// <summary>
        /// The audience targeted for the brand information
        /// </summary>
        /// <value>The audience targeted for the brand information</value>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public BrandTargetEnum? Target { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandText" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandText() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandText" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">Internally referenced id.</param>
        /// <param name="target">The audience targeted for the brand information.</param>
        /// <param name="textFormatted">textFormatted (required).</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public BrandText(string type = default(string), string id = default(string), BrandTargetEnum? target = default(BrandTargetEnum?), List<TextFormatted> textFormatted = default(List<TextFormatted>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BrandText and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "textFormatted" is required (not null)
            if (textFormatted == null)
            {
                throw new InvalidDataException("textFormatted is a required property for BrandText and cannot be null");
            }
            else
            {
                this.TextFormatted = textFormatted;
            }
            this.Id = id;
            this.Target = target;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Internally referenced id
        /// </summary>
        /// <value>Internally referenced id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets TextFormatted
        /// </summary>
        [DataMember(Name="TextFormatted", EmitDefaultValue=false)]
        public List<TextFormatted> TextFormatted { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandText {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  TextFormatted: ").Append(TextFormatted).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandText);
        }
        /// <summary>
        /// Returns true if BrandText instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandText to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandText input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.TextFormatted == input.TextFormatted ||
                    this.TextFormatted != null &&
                    this.TextFormatted.SequenceEqual(input.TextFormatted)
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                if (this.TextFormatted != null)
                    hashCode = hashCode * 59 + this.TextFormatted.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BrandTextDetail
    /// </summary>
    [DataContract]
    public partial class BrandTextDetail : BrandText,  IEquatable<BrandTextDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandTextDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BrandTextDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BrandTextDetail" /> class.
        /// </summary>
        /// <param name="sequence">The order of the text block, if there are more than one block..</param>
        /// <param name="description">Assigned Type: c-0400:Description.</param>
        /// <param name="image">Assigned Type: c-0400:Image.</param>
        /// <param name="uRL">A URL for this block.</param>
        /// <param name="dateCreateModify">Assigned Type: c-0400:DateCreateModify (required).</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public BrandTextDetail(int? sequence = default(int?), string description = default(string), Image image = default(Image), string uRL = default(string), DateCreateModify dateCreateModify = default(DateCreateModify), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "BrandTextDetail", string id = default(string), BrandTargetEnum? target = default(BrandTargetEnum?), List<TextFormatted> textFormatted = default(List<TextFormatted>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, id, target, textFormatted, extensionPointSummary)
        {
            // to ensure "dateCreateModify" is required (not null)
            if (dateCreateModify == null)
            {
                throw new InvalidDataException("dateCreateModify is a required property for BrandTextDetail and cannot be null");
            }
            else
            {
                this.DateCreateModify = dateCreateModify;
            }
            this.Sequence = sequence;
            this.Description = description;
            this.Image = image;
            this.URL = uRL;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// The order of the text block, if there are more than one block.
        /// </summary>
        /// <value>The order of the text block, if there are more than one block.</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Description
        /// </summary>
        /// <value>Assigned Type: c-0400:Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Image
        /// </summary>
        /// <value>Assigned Type: c-0400:Image</value>
        [DataMember(Name="Image", EmitDefaultValue=false)]
        public Image Image { get; set; }
        /// <summary>
        /// A URL for this block
        /// </summary>
        /// <value>A URL for this block</value>
        [DataMember(Name="URL", EmitDefaultValue=false)]
        public string URL { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:DateCreateModify
        /// </summary>
        /// <value>Assigned Type: c-0400:DateCreateModify</value>
        [DataMember(Name="DateCreateModify", EmitDefaultValue=false)]
        public DateCreateModify DateCreateModify { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BrandTextDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  DateCreateModify: ").Append(DateCreateModify).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrandTextDetail);
        }
        /// <summary>
        /// Returns true if BrandTextDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of BrandTextDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrandTextDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && base.Equals(input) && 
                (
                    this.URL == input.URL ||
                    (this.URL != null &&
                    this.URL.Equals(input.URL))
                ) && base.Equals(input) && 
                (
                    this.DateCreateModify == input.DateCreateModify ||
                    (this.DateCreateModify != null &&
                    this.DateCreateModify.Equals(input.DateCreateModify))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.URL != null)
                    hashCode = hashCode * 59 + this.URL.GetHashCode();
                if (this.DateCreateModify != null)
                    hashCode = hashCode * 59 + this.DateCreateModify.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BuildFromCatalogOfferingsRequest
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(BuildFromCatalogOfferingsRequestAir), "BuildFromCatalogOfferingsRequestAir")]
    public partial class BuildFromCatalogOfferingsRequest :  IEquatable<BuildFromCatalogOfferingsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildFromCatalogOfferingsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuildFromCatalogOfferingsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildFromCatalogOfferingsRequest" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="catalogOfferingsIdentifier">Assigned Type: ctlg-0400:CatalogOfferings_ID (required).</param>
        /// <param name="catalogOfferingIdentifier">Assigned Type: ctlg-0400:CatalogOffering_ID (required).</param>
        /// <param name="productIdentifier">productIdentifier (required).</param>
        /// <param name="extensionPointShared">extensionPointShared.</param>
        public BuildFromCatalogOfferingsRequest(string type = default(string), CatalogOfferingsID catalogOfferingsIdentifier = default(CatalogOfferingsID), CatalogOfferingID catalogOfferingIdentifier = default(CatalogOfferingID), List<ProductID> productIdentifier = default(List<ProductID>), ExtensionPointShared extensionPointShared = default(ExtensionPointShared))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BuildFromCatalogOfferingsRequest and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "catalogOfferingsIdentifier" is required (not null)
            if (catalogOfferingsIdentifier == null)
            {
                throw new InvalidDataException("catalogOfferingsIdentifier is a required property for BuildFromCatalogOfferingsRequest and cannot be null");
            }
            else
            {
                this.CatalogOfferingsIdentifier = catalogOfferingsIdentifier;
            }
            // to ensure "catalogOfferingIdentifier" is required (not null)
            if (catalogOfferingIdentifier == null)
            {
                throw new InvalidDataException("catalogOfferingIdentifier is a required property for BuildFromCatalogOfferingsRequest and cannot be null");
            }
            else
            {
                this.CatalogOfferingIdentifier = catalogOfferingIdentifier;
            }
            // to ensure "productIdentifier" is required (not null)
            if (productIdentifier == null)
            {
                throw new InvalidDataException("productIdentifier is a required property for BuildFromCatalogOfferingsRequest and cannot be null");
            }
            else
            {
                this.ProductIdentifier = productIdentifier;
            }
            this.ExtensionPointShared = extensionPointShared;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: ctlg-0400:CatalogOfferings_ID
        /// </summary>
        /// <value>Assigned Type: ctlg-0400:CatalogOfferings_ID</value>
        [DataMember(Name="CatalogOfferingsIdentifier", EmitDefaultValue=false)]
        public CatalogOfferingsID CatalogOfferingsIdentifier { get; set; }
        /// <summary>
        /// Assigned Type: ctlg-0400:CatalogOffering_ID
        /// </summary>
        /// <value>Assigned Type: ctlg-0400:CatalogOffering_ID</value>
        [DataMember(Name="CatalogOfferingIdentifier", EmitDefaultValue=false)]
        public CatalogOfferingID CatalogOfferingIdentifier { get; set; }
        /// <summary>
        /// Gets or Sets ProductIdentifier
        /// </summary>
        [DataMember(Name="ProductIdentifier", EmitDefaultValue=false)]
        public List<ProductID> ProductIdentifier { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointShared
        /// </summary>
        [DataMember(Name="ExtensionPoint_Shared", EmitDefaultValue=false)]
        public ExtensionPointShared ExtensionPointShared { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildFromCatalogOfferingsRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CatalogOfferingsIdentifier: ").Append(CatalogOfferingsIdentifier).Append("\n");
            sb.Append("  CatalogOfferingIdentifier: ").Append(CatalogOfferingIdentifier).Append("\n");
            sb.Append("  ProductIdentifier: ").Append(ProductIdentifier).Append("\n");
            sb.Append("  ExtensionPointShared: ").Append(ExtensionPointShared).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildFromCatalogOfferingsRequest);
        }
        /// <summary>
        /// Returns true if BuildFromCatalogOfferingsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildFromCatalogOfferingsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildFromCatalogOfferingsRequest input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CatalogOfferingsIdentifier == input.CatalogOfferingsIdentifier ||
                    (this.CatalogOfferingsIdentifier != null &&
                    this.CatalogOfferingsIdentifier.Equals(input.CatalogOfferingsIdentifier))
                ) && 
                (
                    this.CatalogOfferingIdentifier == input.CatalogOfferingIdentifier ||
                    (this.CatalogOfferingIdentifier != null &&
                    this.CatalogOfferingIdentifier.Equals(input.CatalogOfferingIdentifier))
                ) && 
                (
                    this.ProductIdentifier == input.ProductIdentifier ||
                    this.ProductIdentifier != null &&
                    this.ProductIdentifier.SequenceEqual(input.ProductIdentifier)
                ) && 
                (
                    this.ExtensionPointShared == input.ExtensionPointShared ||
                    (this.ExtensionPointShared != null &&
                    this.ExtensionPointShared.Equals(input.ExtensionPointShared))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CatalogOfferingsIdentifier != null)
                    hashCode = hashCode * 59 + this.CatalogOfferingsIdentifier.GetHashCode();
                if (this.CatalogOfferingIdentifier != null)
                    hashCode = hashCode * 59 + this.CatalogOfferingIdentifier.GetHashCode();
                if (this.ProductIdentifier != null)
                    hashCode = hashCode * 59 + this.ProductIdentifier.GetHashCode();
                if (this.ExtensionPointShared != null)
                    hashCode = hashCode * 59 + this.ExtensionPointShared.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BuildFromCatalogOfferingsRequestAir
    /// </summary>
    [DataContract]
    public partial class BuildFromCatalogOfferingsRequestAir : BuildFromCatalogOfferingsRequest,  IEquatable<BuildFromCatalogOfferingsRequestAir>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildFromCatalogOfferingsRequestAir" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuildFromCatalogOfferingsRequestAir() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildFromCatalogOfferingsRequestAir" /> class.
        /// </summary>
        /// <param name="pricingModifiersAir">Assigned Type: ctar-0400:PricingModifiersAir.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public BuildFromCatalogOfferingsRequestAir(PricingModifiersAir pricingModifiersAir = default(PricingModifiersAir), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "BuildFromCatalogOfferingsRequestAir", CatalogOfferingsID catalogOfferingsIdentifier = default(CatalogOfferingsID), CatalogOfferingID catalogOfferingIdentifier = default(CatalogOfferingID), List<ProductID> productIdentifier = default(List<ProductID>), ExtensionPointShared extensionPointShared = default(ExtensionPointShared)) : base(type, catalogOfferingsIdentifier, catalogOfferingIdentifier, productIdentifier, extensionPointShared)
        {
            this.PricingModifiersAir = pricingModifiersAir;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Assigned Type: ctar-0400:PricingModifiersAir
        /// </summary>
        /// <value>Assigned Type: ctar-0400:PricingModifiersAir</value>
        [DataMember(Name="PricingModifiersAir", EmitDefaultValue=false)]
        public PricingModifiersAir PricingModifiersAir { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildFromCatalogOfferingsRequestAir {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  PricingModifiersAir: ").Append(PricingModifiersAir).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildFromCatalogOfferingsRequestAir);
        }
        /// <summary>
        /// Returns true if BuildFromCatalogOfferingsRequestAir instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildFromCatalogOfferingsRequestAir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildFromCatalogOfferingsRequestAir input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.PricingModifiersAir == input.PricingModifiersAir ||
                    (this.PricingModifiersAir != null &&
                    this.PricingModifiersAir.Equals(input.PricingModifiersAir))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.PricingModifiersAir != null)
                    hashCode = hashCode * 59 + this.PricingModifiersAir.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BuildFromProductsRequest
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(BuildFromProductsRequestAir), "BuildFromProductsRequestAir")]
    public partial class BuildFromProductsRequest :  IEquatable<BuildFromProductsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildFromProductsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuildFromProductsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildFromProductsRequest" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="extensionPointShared">extensionPointShared.</param>
        public BuildFromProductsRequest(string type = default(string), ExtensionPointShared extensionPointShared = default(ExtensionPointShared))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for BuildFromProductsRequest and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.ExtensionPointShared = extensionPointShared;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointShared
        /// </summary>
        [DataMember(Name="ExtensionPoint_Shared", EmitDefaultValue=false)]
        public ExtensionPointShared ExtensionPointShared { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildFromProductsRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ExtensionPointShared: ").Append(ExtensionPointShared).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildFromProductsRequest);
        }
        /// <summary>
        /// Returns true if BuildFromProductsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildFromProductsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildFromProductsRequest input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ExtensionPointShared == input.ExtensionPointShared ||
                    (this.ExtensionPointShared != null &&
                    this.ExtensionPointShared.Equals(input.ExtensionPointShared))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ExtensionPointShared != null)
                    hashCode = hashCode * 59 + this.ExtensionPointShared.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// BuildFromProductsRequestAir
    /// </summary>
    [DataContract]
    public partial class BuildFromProductsRequestAir : BuildFromProductsRequest,  IEquatable<BuildFromProductsRequestAir>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildFromProductsRequestAir" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuildFromProductsRequestAir() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildFromProductsRequestAir" /> class.
        /// </summary>
        /// <param name="pricingModifiersAir">Assigned Type: ctar-0400:PricingModifiersAir (required).</param>
        /// <param name="passengerCriteria">passengerCriteria (required).</param>
        /// <param name="productCriteriaAir">productCriteriaAir.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public BuildFromProductsRequestAir(PricingModifiersAir pricingModifiersAir = default(PricingModifiersAir), List<PassengerCriteria> passengerCriteria = default(List<PassengerCriteria>), List<ProductCriteriaAir> productCriteriaAir = default(List<ProductCriteriaAir>), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "BuildFromProductsRequestAir", ExtensionPointShared extensionPointShared = default(ExtensionPointShared)) : base(type, extensionPointShared)
        {
            // to ensure "pricingModifiersAir" is required (not null)
            if (pricingModifiersAir == null)
            {
                throw new InvalidDataException("pricingModifiersAir is a required property for BuildFromProductsRequestAir and cannot be null");
            }
            else
            {
                this.PricingModifiersAir = pricingModifiersAir;
            }
            // to ensure "passengerCriteria" is required (not null)
            if (passengerCriteria == null)
            {
                throw new InvalidDataException("passengerCriteria is a required property for BuildFromProductsRequestAir and cannot be null");
            }
            else
            {
                this.PassengerCriteria = passengerCriteria;
            }
            this.ProductCriteriaAir = productCriteriaAir;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Assigned Type: ctar-0400:PricingModifiersAir
        /// </summary>
        /// <value>Assigned Type: ctar-0400:PricingModifiersAir</value>
        [DataMember(Name="PricingModifiersAir", EmitDefaultValue=false)]
        public PricingModifiersAir PricingModifiersAir { get; set; }
        /// <summary>
        /// Gets or Sets PassengerCriteria
        /// </summary>
        [DataMember(Name="PassengerCriteria", EmitDefaultValue=false)]
        public List<PassengerCriteria> PassengerCriteria { get; set; }
        /// <summary>
        /// Gets or Sets ProductCriteriaAir
        /// </summary>
        [DataMember(Name="ProductCriteriaAir", EmitDefaultValue=false)]
        public List<ProductCriteriaAir> ProductCriteriaAir { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildFromProductsRequestAir {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  PricingModifiersAir: ").Append(PricingModifiersAir).Append("\n");
            sb.Append("  PassengerCriteria: ").Append(PassengerCriteria).Append("\n");
            sb.Append("  ProductCriteriaAir: ").Append(ProductCriteriaAir).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildFromProductsRequestAir);
        }
        /// <summary>
        /// Returns true if BuildFromProductsRequestAir instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildFromProductsRequestAir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildFromProductsRequestAir input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.PricingModifiersAir == input.PricingModifiersAir ||
                    (this.PricingModifiersAir != null &&
                    this.PricingModifiersAir.Equals(input.PricingModifiersAir))
                ) && base.Equals(input) && 
                (
                    this.PassengerCriteria == input.PassengerCriteria ||
                    this.PassengerCriteria != null &&
                    this.PassengerCriteria.SequenceEqual(input.PassengerCriteria)
                ) && base.Equals(input) && 
                (
                    this.ProductCriteriaAir == input.ProductCriteriaAir ||
                    this.ProductCriteriaAir != null &&
                    this.ProductCriteriaAir.SequenceEqual(input.ProductCriteriaAir)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.PricingModifiersAir != null)
                    hashCode = hashCode * 59 + this.PricingModifiersAir.GetHashCode();
                if (this.PassengerCriteria != null)
                    hashCode = hashCode * 59 + this.PassengerCriteria.GetHashCode();
                if (this.ProductCriteriaAir != null)
                    hashCode = hashCode * 59 + this.ProductCriteriaAir.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Specifies the cabin type (e.g. first, business, economy).
    /// </summary>
    /// <value>Specifies the cabin type (e.g. first, business, economy).</value>
    public enum CabinAirEnum
    {
        /// <summary>
        /// Enum PremiumFirst for value: PremiumFirst
        /// </summary>
        PremiumFirst = PremiumFirst,
        /// <summary>
        /// Enum First for value: First
        /// </summary>
        First = First,
        /// <summary>
        /// Enum Business for value: Business
        /// </summary>
        Business = Business,
        /// <summary>
        /// Enum PremiumEconomy for value: PremiumEconomy
        /// </summary>
        PremiumEconomy = PremiumEconomy,
        /// <summary>
        /// Enum Economy for value: Economy
        /// </summary>
        Economy = Economy
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// CabinPreference
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class CabinPreference :  IEquatable<CabinPreference>, IValidatableObject
    {
        /// <summary>
        /// Preference type.  i.e. Permitted
        /// </summary>
        /// <value>Preference type.  i.e. Permitted</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public CabinPreferenceTypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CabinPreference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CabinPreference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CabinPreference" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="type">Preference type.  i.e. Permitted.</param>
        /// <param name="cabins">cabins.</param>
        /// <param name="legSequence">Assigned Type: ctar-0400:SegmentSequenceList.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CabinPreference(string type = default(string), CabinPreferenceTypeEnum? type = default(CabinPreferenceTypeEnum?), List<CabinAirEnum> cabins = default(List<CabinAirEnum>), List<int?> legSequence = default(List<int?>), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CabinPreference and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Type = type;
            this.Cabins = cabins;
            this.LegSequence = legSequence;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets Cabins
        /// </summary>
        [DataMember(Name="cabins", EmitDefaultValue=false)]
        public List<CabinAirEnum> Cabins { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:SegmentSequenceList
        /// </summary>
        /// <value>Assigned Type: ctar-0400:SegmentSequenceList</value>
        [DataMember(Name="legSequence", EmitDefaultValue=false)]
        public List<int?> LegSequence { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CabinPreference {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Cabins: ").Append(Cabins).Append("\n");
            sb.Append("  LegSequence: ").Append(LegSequence).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CabinPreference);
        }
        /// <summary>
        /// Returns true if CabinPreference instances are equal
        /// </summary>
        /// <param name="input">Instance of CabinPreference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CabinPreference input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Cabins == input.Cabins ||
                    this.Cabins != null &&
                    this.Cabins.SequenceEqual(input.Cabins)
                ) && 
                (
                    this.LegSequence == input.LegSequence ||
                    this.LegSequence != null &&
                    this.LegSequence.SequenceEqual(input.LegSequence)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Cabins != null)
                    hashCode = hashCode * 59 + this.Cabins.GetHashCode();
                if (this.LegSequence != null)
                    hashCode = hashCode * 59 + this.LegSequence.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Defines CabinPreferenceTypeEnum
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum CabinPreferenceTypeEnum
    {
        /// <summary>
        /// Enum Preferred for value: Preferred
        /// </summary>
        [EnumMember(Value = "Preferred")]
        Preferred = 1,
        /// <summary>
        /// Enum Permitted for value: Permitted
        /// </summary>
        [EnumMember(Value = "Permitted")]
        Permitted = 2,
        /// <summary>
        /// Enum PreferredWithUpgrade for value: PreferredWithUpgrade
        /// </summary>
        [EnumMember(Value = "PreferredWithUpgrade")]
        PreferredWithUpgrade = 3
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// CarrierPreference
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class CarrierPreference :  IEquatable<CarrierPreference>, IValidatableObject
    {
        /// <summary>
        /// Preference type. i.e Permitted
        /// </summary>
        /// <value>Preference type. i.e Permitted</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public CarrierPreferenceTypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CarrierPreference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CarrierPreference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CarrierPreference" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="type">Preference type. i.e Permitted (required).</param>
        /// <param name="carriers">Assigned Type: c-0400:AirlineCodes (required).</param>
        /// <param name="legSequence">Assigned Type: ctar-0400:SegmentSequenceList.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CarrierPreference(string type = default(string), CarrierPreferenceTypeEnum type = default(CarrierPreferenceTypeEnum), List<string> carriers = default(List<string>), List<int?> legSequence = default(List<int?>), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CarrierPreference and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CarrierPreference and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "carriers" is required (not null)
            if (carriers == null)
            {
                throw new InvalidDataException("carriers is a required property for CarrierPreference and cannot be null");
            }
            else
            {
                this.Carriers = carriers;
            }
            this.LegSequence = legSequence;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:AirlineCodes
        /// </summary>
        /// <value>Assigned Type: c-0400:AirlineCodes</value>
        [DataMember(Name="carriers", EmitDefaultValue=false)]
        public List<string> Carriers { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:SegmentSequenceList
        /// </summary>
        /// <value>Assigned Type: ctar-0400:SegmentSequenceList</value>
        [DataMember(Name="legSequence", EmitDefaultValue=false)]
        public List<int?> LegSequence { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CarrierPreference {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Carriers: ").Append(Carriers).Append("\n");
            sb.Append("  LegSequence: ").Append(LegSequence).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CarrierPreference);
        }
        /// <summary>
        /// Returns true if CarrierPreference instances are equal
        /// </summary>
        /// <param name="input">Instance of CarrierPreference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CarrierPreference input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Carriers == input.Carriers ||
                    this.Carriers != null &&
                    this.Carriers.SequenceEqual(input.Carriers)
                ) && 
                (
                    this.LegSequence == input.LegSequence ||
                    this.LegSequence != null &&
                    this.LegSequence.SequenceEqual(input.LegSequence)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Carriers != null)
                    hashCode = hashCode * 59 + this.Carriers.GetHashCode();
                if (this.LegSequence != null)
                    hashCode = hashCode * 59 + this.LegSequence.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Defines CarrierPreferenceTypeEnum
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum CarrierPreferenceTypeEnum
    {
        /// <summary>
        /// Enum Preferred for value: Preferred
        /// </summary>
        [EnumMember(Value = "Preferred")]
        Preferred = 1,
        /// <summary>
        /// Enum Permitted for value: Permitted
        /// </summary>
        [EnumMember(Value = "Permitted")]
        Permitted = 2,
        /// <summary>
        /// Enum Prohibited for value: Prohibited
        /// </summary>
        [EnumMember(Value = "Prohibited")]
        Prohibited = 3
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// CatalogOffering
    /// </summary>
    [DataContract]
    public partial class CatalogOffering : CatalogOfferingID,  IEquatable<CatalogOffering>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOffering" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogOffering() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOffering" /> class.
        /// </summary>
        /// <param name="productOptions">productOptions (required).</param>
        /// <param name="price">Assigned Type: c-0400:Price (required).</param>
        /// <param name="termsAndConditions">Assigned Type: ctlg-0400:TermsAndConditions.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CatalogOffering(List<ProductOptionsID> productOptions = default(List<ProductOptionsID>), Price price = default(Price), TermsAndConditionsID termsAndConditions = default(TermsAndConditionsID), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "CatalogOffering", string id = default(string), string catalogOfferingRef = default(string), Identifier identifier = default(Identifier)) : base(type, id, catalogOfferingRef, identifier)
        {
            // to ensure "productOptions" is required (not null)
            if (productOptions == null)
            {
                throw new InvalidDataException("productOptions is a required property for CatalogOffering and cannot be null");
            }
            else
            {
                this.ProductOptions = productOptions;
            }
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new InvalidDataException("price is a required property for CatalogOffering and cannot be null");
            }
            else
            {
                this.Price = price;
            }
            this.TermsAndConditions = termsAndConditions;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets ProductOptions
        /// </summary>
        [DataMember(Name="ProductOptions", EmitDefaultValue=false)]
        public List<ProductOptionsID> ProductOptions { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Price
        /// </summary>
        /// <value>Assigned Type: c-0400:Price</value>
        [DataMember(Name="Price", EmitDefaultValue=false)]
        public Price Price { get; set; }
        /// <summary>
        /// Assigned Type: ctlg-0400:TermsAndConditions
        /// </summary>
        /// <value>Assigned Type: ctlg-0400:TermsAndConditions</value>
        [DataMember(Name="TermsAndConditions", EmitDefaultValue=false)]
        public TermsAndConditionsID TermsAndConditions { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogOffering {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ProductOptions: ").Append(ProductOptions).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  TermsAndConditions: ").Append(TermsAndConditions).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogOffering);
        }
        /// <summary>
        /// Returns true if CatalogOffering instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogOffering to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogOffering input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.ProductOptions == input.ProductOptions ||
                    this.ProductOptions != null &&
                    this.ProductOptions.SequenceEqual(input.ProductOptions)
                ) && base.Equals(input) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && base.Equals(input) && 
                (
                    this.TermsAndConditions == input.TermsAndConditions ||
                    (this.TermsAndConditions != null &&
                    this.TermsAndConditions.Equals(input.TermsAndConditions))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ProductOptions != null)
                    hashCode = hashCode * 59 + this.ProductOptions.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.TermsAndConditions != null)
                    hashCode = hashCode * 59 + this.TermsAndConditions.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// CatalogOfferingID
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(CatalogOffering), "CatalogOffering")]
    public partial class CatalogOfferingID :  IEquatable<CatalogOfferingID>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingID" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogOfferingID() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingID" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">Local indentifier within a given message for this object..</param>
        /// <param name="catalogOfferingRef">Used to reference another instance of this object in the same message.</param>
        /// <param name="identifier">Assigned Type: c-0400:Identifier.</param>
        public CatalogOfferingID(string type = default(string), string id = default(string), string catalogOfferingRef = default(string), Identifier identifier = default(Identifier))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CatalogOfferingID and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Id = id;
            this.CatalogOfferingRef = catalogOfferingRef;
            this.Identifier = identifier;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Local indentifier within a given message for this object.
        /// </summary>
        /// <value>Local indentifier within a given message for this object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Used to reference another instance of this object in the same message
        /// </summary>
        /// <value>Used to reference another instance of this object in the same message</value>
        [DataMember(Name="CatalogOfferingRef", EmitDefaultValue=false)]
        public string CatalogOfferingRef { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Identifier
        /// </summary>
        /// <value>Assigned Type: c-0400:Identifier</value>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public Identifier Identifier { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogOfferingID {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CatalogOfferingRef: ").Append(CatalogOfferingRef).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogOfferingID);
        }
        /// <summary>
        /// Returns true if CatalogOfferingID instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogOfferingID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogOfferingID input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CatalogOfferingRef == input.CatalogOfferingRef ||
                    (this.CatalogOfferingRef != null &&
                    this.CatalogOfferingRef.Equals(input.CatalogOfferingRef))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CatalogOfferingRef != null)
                    hashCode = hashCode * 59 + this.CatalogOfferingRef.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// CatalogOfferings
    /// </summary>
    [DataContract]
    public partial class CatalogOfferings : CatalogOfferingsID,  IEquatable<CatalogOfferings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogOfferings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferings" /> class.
        /// </summary>
        /// <param name="defaultCurrency">Assigned Type: c-0400:Currency.</param>
        /// <param name="catalogOffering">catalogOffering (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CatalogOfferings(Currency defaultCurrency = default(Currency), List<CatalogOfferingID> catalogOffering = default(List<CatalogOfferingID>), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "CatalogOfferings", string id = default(string), Identifier identifier = default(Identifier)) : base(type, id, identifier)
        {
            // to ensure "catalogOffering" is required (not null)
            if (catalogOffering == null)
            {
                throw new InvalidDataException("catalogOffering is a required property for CatalogOfferings and cannot be null");
            }
            else
            {
                this.CatalogOffering = catalogOffering;
            }
            this.DefaultCurrency = defaultCurrency;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Assigned Type: c-0400:Currency
        /// </summary>
        /// <value>Assigned Type: c-0400:Currency</value>
        [DataMember(Name="DefaultCurrency", EmitDefaultValue=false)]
        public Currency DefaultCurrency { get; set; }
        /// <summary>
        /// Gets or Sets CatalogOffering
        /// </summary>
        [DataMember(Name="CatalogOffering", EmitDefaultValue=false)]
        public List<CatalogOfferingID> CatalogOffering { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogOfferings {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DefaultCurrency: ").Append(DefaultCurrency).Append("\n");
            sb.Append("  CatalogOffering: ").Append(CatalogOffering).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogOfferings);
        }
        /// <summary>
        /// Returns true if CatalogOfferings instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogOfferings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogOfferings input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.DefaultCurrency == input.DefaultCurrency ||
                    (this.DefaultCurrency != null &&
                    this.DefaultCurrency.Equals(input.DefaultCurrency))
                ) && base.Equals(input) && 
                (
                    this.CatalogOffering == input.CatalogOffering ||
                    this.CatalogOffering != null &&
                    this.CatalogOffering.SequenceEqual(input.CatalogOffering)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.DefaultCurrency != null)
                    hashCode = hashCode * 59 + this.DefaultCurrency.GetHashCode();
                if (this.CatalogOffering != null)
                    hashCode = hashCode * 59 + this.CatalogOffering.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// CatalogOfferingsID
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(CatalogOfferings), "CatalogOfferings")]
    public partial class CatalogOfferingsID :  IEquatable<CatalogOfferingsID>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsID" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogOfferingsID() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsID" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">Local indentifier within a given message for this object..</param>
        /// <param name="identifier">Assigned Type: c-0400:Identifier.</param>
        public CatalogOfferingsID(string type = default(string), string id = default(string), Identifier identifier = default(Identifier))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CatalogOfferingsID and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Id = id;
            this.Identifier = identifier;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Local indentifier within a given message for this object.
        /// </summary>
        /// <value>Local indentifier within a given message for this object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Identifier
        /// </summary>
        /// <value>Assigned Type: c-0400:Identifier</value>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public Identifier Identifier { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogOfferingsID {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogOfferingsID);
        }
        /// <summary>
        /// Returns true if CatalogOfferingsID instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogOfferingsID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogOfferingsID input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// CatalogOfferingsQueryBuildOptionsFromCatalogOfferings
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class CatalogOfferingsQueryBuildOptionsFromCatalogOfferings :  IEquatable<CatalogOfferingsQueryBuildOptionsFromCatalogOfferings>, IValidatableObject
    {
        /// <summary>
        /// Fare rule type to use when creating this offer.
        /// </summary>
        /// <value>Fare rule type to use when creating this offer.</value>
        [DataMember(Name="fareRuleType", EmitDefaultValue=false)]
        public FareRulesEnum? FareRuleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsQueryBuildOptionsFromCatalogOfferings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogOfferingsQueryBuildOptionsFromCatalogOfferings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsQueryBuildOptionsFromCatalogOfferings" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="fareRuleType">Fare rule type to use when creating this offer..</param>
        /// <param name="buildFromCatalogOfferingsRequest">Assigned Type: ctlg-0400:BuildFromCatalogOfferingsRequest.</param>
        /// <param name="fareRuleCategory">fareRuleCategory.</param>
        /// <param name="paymentCriteria">Assigned Type: ctlg-0400:PaymentCriteria.</param>
        /// <param name="returnBrandedFaresInd">If present and true , branded fares are returned.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CatalogOfferingsQueryBuildOptionsFromCatalogOfferings(string type = default(string), FareRulesEnum? fareRuleType = default(FareRulesEnum?), BuildFromCatalogOfferingsRequest buildFromCatalogOfferingsRequest = default(BuildFromCatalogOfferingsRequest), List<FareRuleCategoryEnum> fareRuleCategory = default(List<FareRuleCategoryEnum>), PaymentCriteria paymentCriteria = default(PaymentCriteria), bool? returnBrandedFaresInd = default(bool?), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CatalogOfferingsQueryBuildOptionsFromCatalogOfferings and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.FareRuleType = fareRuleType;
            this.BuildFromCatalogOfferingsRequest = buildFromCatalogOfferingsRequest;
            this.FareRuleCategory = fareRuleCategory;
            this.PaymentCriteria = paymentCriteria;
            this.ReturnBrandedFaresInd = returnBrandedFaresInd;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: ctlg-0400:BuildFromCatalogOfferingsRequest
        /// </summary>
        /// <value>Assigned Type: ctlg-0400:BuildFromCatalogOfferingsRequest</value>
        [DataMember(Name="BuildFromCatalogOfferingsRequest", EmitDefaultValue=false)]
        public BuildFromCatalogOfferingsRequest BuildFromCatalogOfferingsRequest { get; set; }
        /// <summary>
        /// Gets or Sets FareRuleCategory
        /// </summary>
        [DataMember(Name="FareRuleCategory", EmitDefaultValue=false)]
        public List<FareRuleCategoryEnum> FareRuleCategory { get; set; }
        /// <summary>
        /// Assigned Type: ctlg-0400:PaymentCriteria
        /// </summary>
        /// <value>Assigned Type: ctlg-0400:PaymentCriteria</value>
        [DataMember(Name="PaymentCriteria", EmitDefaultValue=false)]
        public PaymentCriteria PaymentCriteria { get; set; }
        /// <summary>
        /// If present and true , branded fares are returned
        /// </summary>
        /// <value>If present and true , branded fares are returned</value>
        [DataMember(Name="returnBrandedFaresInd", EmitDefaultValue=false)]
        public bool? ReturnBrandedFaresInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogOfferingsQueryBuildOptionsFromCatalogOfferings {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FareRuleType: ").Append(FareRuleType).Append("\n");
            sb.Append("  BuildFromCatalogOfferingsRequest: ").Append(BuildFromCatalogOfferingsRequest).Append("\n");
            sb.Append("  FareRuleCategory: ").Append(FareRuleCategory).Append("\n");
            sb.Append("  PaymentCriteria: ").Append(PaymentCriteria).Append("\n");
            sb.Append("  ReturnBrandedFaresInd: ").Append(ReturnBrandedFaresInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogOfferingsQueryBuildOptionsFromCatalogOfferings);
        }
        /// <summary>
        /// Returns true if CatalogOfferingsQueryBuildOptionsFromCatalogOfferings instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogOfferingsQueryBuildOptionsFromCatalogOfferings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogOfferingsQueryBuildOptionsFromCatalogOfferings input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FareRuleType == input.FareRuleType ||
                    (this.FareRuleType != null &&
                    this.FareRuleType.Equals(input.FareRuleType))
                ) && 
                (
                    this.BuildFromCatalogOfferingsRequest == input.BuildFromCatalogOfferingsRequest ||
                    (this.BuildFromCatalogOfferingsRequest != null &&
                    this.BuildFromCatalogOfferingsRequest.Equals(input.BuildFromCatalogOfferingsRequest))
                ) && 
                (
                    this.FareRuleCategory == input.FareRuleCategory ||
                    this.FareRuleCategory != null &&
                    this.FareRuleCategory.SequenceEqual(input.FareRuleCategory)
                ) && 
                (
                    this.PaymentCriteria == input.PaymentCriteria ||
                    (this.PaymentCriteria != null &&
                    this.PaymentCriteria.Equals(input.PaymentCriteria))
                ) && 
                (
                    this.ReturnBrandedFaresInd == input.ReturnBrandedFaresInd ||
                    (this.ReturnBrandedFaresInd != null &&
                    this.ReturnBrandedFaresInd.Equals(input.ReturnBrandedFaresInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FareRuleType != null)
                    hashCode = hashCode * 59 + this.FareRuleType.GetHashCode();
                if (this.BuildFromCatalogOfferingsRequest != null)
                    hashCode = hashCode * 59 + this.BuildFromCatalogOfferingsRequest.GetHashCode();
                if (this.FareRuleCategory != null)
                    hashCode = hashCode * 59 + this.FareRuleCategory.GetHashCode();
                if (this.PaymentCriteria != null)
                    hashCode = hashCode * 59 + this.PaymentCriteria.GetHashCode();
                if (this.ReturnBrandedFaresInd != null)
                    hashCode = hashCode * 59 + this.ReturnBrandedFaresInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// CatalogOfferingsQueryBuildOptionsFromProducts
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class CatalogOfferingsQueryBuildOptionsFromProducts :  IEquatable<CatalogOfferingsQueryBuildOptionsFromProducts>, IValidatableObject
    {
        /// <summary>
        /// Fare rule type to use when creating this offer.
        /// </summary>
        /// <value>Fare rule type to use when creating this offer.</value>
        [DataMember(Name="fareRuleType", EmitDefaultValue=false)]
        public FareRulesEnum? FareRuleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsQueryBuildOptionsFromProducts" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogOfferingsQueryBuildOptionsFromProducts() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsQueryBuildOptionsFromProducts" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="fareRuleType">Fare rule type to use when creating this offer..</param>
        /// <param name="buildFromProductsRequest">Assigned Type: ctlg-0400:BuildFromProductsRequest.</param>
        /// <param name="fareRuleCategory">fareRuleCategory.</param>
        /// <param name="paymentCriteria">Assigned Type: ctlg-0400:PaymentCriteria.</param>
        /// <param name="returnBrandedFaresInd">If present and true , branded fares are returned.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CatalogOfferingsQueryBuildOptionsFromProducts(string type = default(string), FareRulesEnum? fareRuleType = default(FareRulesEnum?), BuildFromProductsRequest buildFromProductsRequest = default(BuildFromProductsRequest), List<FareRuleCategoryEnum> fareRuleCategory = default(List<FareRuleCategoryEnum>), PaymentCriteria paymentCriteria = default(PaymentCriteria), bool? returnBrandedFaresInd = default(bool?), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CatalogOfferingsQueryBuildOptionsFromProducts and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.FareRuleType = fareRuleType;
            this.BuildFromProductsRequest = buildFromProductsRequest;
            this.FareRuleCategory = fareRuleCategory;
            this.PaymentCriteria = paymentCriteria;
            this.ReturnBrandedFaresInd = returnBrandedFaresInd;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: ctlg-0400:BuildFromProductsRequest
        /// </summary>
        /// <value>Assigned Type: ctlg-0400:BuildFromProductsRequest</value>
        [DataMember(Name="BuildFromProductsRequest", EmitDefaultValue=false)]
        public BuildFromProductsRequest BuildFromProductsRequest { get; set; }
        /// <summary>
        /// Gets or Sets FareRuleCategory
        /// </summary>
        [DataMember(Name="FareRuleCategory", EmitDefaultValue=false)]
        public List<FareRuleCategoryEnum> FareRuleCategory { get; set; }
        /// <summary>
        /// Assigned Type: ctlg-0400:PaymentCriteria
        /// </summary>
        /// <value>Assigned Type: ctlg-0400:PaymentCriteria</value>
        [DataMember(Name="PaymentCriteria", EmitDefaultValue=false)]
        public PaymentCriteria PaymentCriteria { get; set; }
        /// <summary>
        /// If present and true , branded fares are returned
        /// </summary>
        /// <value>If present and true , branded fares are returned</value>
        [DataMember(Name="returnBrandedFaresInd", EmitDefaultValue=false)]
        public bool? ReturnBrandedFaresInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogOfferingsQueryBuildOptionsFromProducts {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FareRuleType: ").Append(FareRuleType).Append("\n");
            sb.Append("  BuildFromProductsRequest: ").Append(BuildFromProductsRequest).Append("\n");
            sb.Append("  FareRuleCategory: ").Append(FareRuleCategory).Append("\n");
            sb.Append("  PaymentCriteria: ").Append(PaymentCriteria).Append("\n");
            sb.Append("  ReturnBrandedFaresInd: ").Append(ReturnBrandedFaresInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogOfferingsQueryBuildOptionsFromProducts);
        }
        /// <summary>
        /// Returns true if CatalogOfferingsQueryBuildOptionsFromProducts instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogOfferingsQueryBuildOptionsFromProducts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogOfferingsQueryBuildOptionsFromProducts input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FareRuleType == input.FareRuleType ||
                    (this.FareRuleType != null &&
                    this.FareRuleType.Equals(input.FareRuleType))
                ) && 
                (
                    this.BuildFromProductsRequest == input.BuildFromProductsRequest ||
                    (this.BuildFromProductsRequest != null &&
                    this.BuildFromProductsRequest.Equals(input.BuildFromProductsRequest))
                ) && 
                (
                    this.FareRuleCategory == input.FareRuleCategory ||
                    this.FareRuleCategory != null &&
                    this.FareRuleCategory.SequenceEqual(input.FareRuleCategory)
                ) && 
                (
                    this.PaymentCriteria == input.PaymentCriteria ||
                    (this.PaymentCriteria != null &&
                    this.PaymentCriteria.Equals(input.PaymentCriteria))
                ) && 
                (
                    this.ReturnBrandedFaresInd == input.ReturnBrandedFaresInd ||
                    (this.ReturnBrandedFaresInd != null &&
                    this.ReturnBrandedFaresInd.Equals(input.ReturnBrandedFaresInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FareRuleType != null)
                    hashCode = hashCode * 59 + this.FareRuleType.GetHashCode();
                if (this.BuildFromProductsRequest != null)
                    hashCode = hashCode * 59 + this.BuildFromProductsRequest.GetHashCode();
                if (this.FareRuleCategory != null)
                    hashCode = hashCode * 59 + this.FareRuleCategory.GetHashCode();
                if (this.PaymentCriteria != null)
                    hashCode = hashCode * 59 + this.PaymentCriteria.GetHashCode();
                if (this.ReturnBrandedFaresInd != null)
                    hashCode = hashCode * 59 + this.ReturnBrandedFaresInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// CatalogOfferingsQueryPage
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class CatalogOfferingsQueryPage :  IEquatable<CatalogOfferingsQueryPage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsQueryPage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogOfferingsQueryPage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsQueryPage" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="identifier">Assigned Type: c-0400:GUID.</param>
        /// <param name="pageNumber">The page number to be returned.</param>
        /// <param name="view">The view.  Either detail or summary..</param>
        /// <param name="upsellInd">if true response will include CatalogOffering plus one upsell (next higher fare).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CatalogOfferingsQueryPage(string type = default(string), string identifier = default(string), string pageNumber = default(string), string view = default(string), bool? upsellInd = default(bool?), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CatalogOfferingsQueryPage and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Identifier = identifier;
            this.PageNumber = pageNumber;
            this.View = view;
            this.UpsellInd = upsellInd;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:GUID
        /// </summary>
        /// <value>Assigned Type: c-0400:GUID</value>
        [DataMember(Name="identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }
        /// <summary>
        /// The page number to be returned
        /// </summary>
        /// <value>The page number to be returned</value>
        [DataMember(Name="pageNumber", EmitDefaultValue=false)]
        public string PageNumber { get; set; }
        /// <summary>
        /// The view.  Either detail or summary.
        /// </summary>
        /// <value>The view.  Either detail or summary.</value>
        [DataMember(Name="view", EmitDefaultValue=false)]
        public string View { get; set; }
        /// <summary>
        /// if true response will include CatalogOffering plus one upsell (next higher fare)
        /// </summary>
        /// <value>if true response will include CatalogOffering plus one upsell (next higher fare)</value>
        [DataMember(Name="upsellInd", EmitDefaultValue=false)]
        public bool? UpsellInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogOfferingsQueryPage {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  View: ").Append(View).Append("\n");
            sb.Append("  UpsellInd: ").Append(UpsellInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogOfferingsQueryPage);
        }
        /// <summary>
        /// Returns true if CatalogOfferingsQueryPage instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogOfferingsQueryPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogOfferingsQueryPage input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.PageNumber == input.PageNumber ||
                    (this.PageNumber != null &&
                    this.PageNumber.Equals(input.PageNumber))
                ) && 
                (
                    this.View == input.View ||
                    (this.View != null &&
                    this.View.Equals(input.View))
                ) && 
                (
                    this.UpsellInd == input.UpsellInd ||
                    (this.UpsellInd != null &&
                    this.UpsellInd.Equals(input.UpsellInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.PageNumber != null)
                    hashCode = hashCode * 59 + this.PageNumber.GetHashCode();
                if (this.View != null)
                    hashCode = hashCode * 59 + this.View.GetHashCode();
                if (this.UpsellInd != null)
                    hashCode = hashCode * 59 + this.UpsellInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Identifier (string) maxLength
            if(this.Identifier != null && this.Identifier.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Identifier, length must be less than 128.", new [] { "Identifier" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// CatalogOfferingsQueryRequest
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class CatalogOfferingsQueryRequest :  IEquatable<CatalogOfferingsQueryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsQueryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogOfferingsQueryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsQueryRequest" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="catalogOfferingsRequest">catalogOfferingsRequest (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CatalogOfferingsQueryRequest(string type = default(string), List<CatalogOfferingsRequest> catalogOfferingsRequest = default(List<CatalogOfferingsRequest>), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CatalogOfferingsQueryRequest and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "catalogOfferingsRequest" is required (not null)
            if (catalogOfferingsRequest == null)
            {
                throw new InvalidDataException("catalogOfferingsRequest is a required property for CatalogOfferingsQueryRequest and cannot be null");
            }
            else
            {
                this.CatalogOfferingsRequest = catalogOfferingsRequest;
            }
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets CatalogOfferingsRequest
        /// </summary>
        [DataMember(Name="CatalogOfferingsRequest", EmitDefaultValue=false)]
        public List<CatalogOfferingsRequest> CatalogOfferingsRequest { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogOfferingsQueryRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CatalogOfferingsRequest: ").Append(CatalogOfferingsRequest).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogOfferingsQueryRequest);
        }
        /// <summary>
        /// Returns true if CatalogOfferingsQueryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogOfferingsQueryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogOfferingsQueryRequest input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CatalogOfferingsRequest == input.CatalogOfferingsRequest ||
                    this.CatalogOfferingsRequest != null &&
                    this.CatalogOfferingsRequest.SequenceEqual(input.CatalogOfferingsRequest)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CatalogOfferingsRequest != null)
                    hashCode = hashCode * 59 + this.CatalogOfferingsRequest.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// CatalogOfferingsQueryRequestQueryParameters
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class CatalogOfferingsQueryRequestQueryParameters :  IEquatable<CatalogOfferingsQueryRequestQueryParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsQueryRequestQueryParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogOfferingsQueryRequestQueryParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsQueryRequestQueryParameters" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="view">The view.  Either detail or summary..</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console..</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query.</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false..</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response..</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CatalogOfferingsQueryRequestQueryParameters(string type = default(string), string view = default(string), string sccType = default(string), string sccChannelID = default(string), bool? upsellInd = default(bool?), bool? asynchInd = default(bool?), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CatalogOfferingsQueryRequestQueryParameters and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.View = view;
            this.SccType = sccType;
            this.SccChannelID = sccChannelID;
            this.UpsellInd = upsellInd;
            this.AsynchInd = asynchInd;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// The view.  Either detail or summary.
        /// </summary>
        /// <value>The view.  Either detail or summary.</value>
        [DataMember(Name="view", EmitDefaultValue=false)]
        public string View { get; set; }
        /// <summary>
        /// This is used to override specific rulesTypes set in search control console.
        /// </summary>
        /// <value>This is used to override specific rulesTypes set in search control console.</value>
        [DataMember(Name="sccType", EmitDefaultValue=false)]
        public string SccType { get; set; }
        /// <summary>
        /// Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query
        /// </summary>
        /// <value>Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query</value>
        [DataMember(Name="sccChannelID", EmitDefaultValue=false)]
        public string SccChannelID { get; set; }
        /// <summary>
        /// If true one upsell will be returned in the response. If not passed will default to false.
        /// </summary>
        /// <value>If true one upsell will be returned in the response. If not passed will default to false.</value>
        [DataMember(Name="upsellInd", EmitDefaultValue=false)]
        public bool? UpsellInd { get; set; }
        /// <summary>
        /// If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response.
        /// </summary>
        /// <value>If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response.</value>
        [DataMember(Name="asynchInd", EmitDefaultValue=false)]
        public bool? AsynchInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogOfferingsQueryRequestQueryParameters {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  View: ").Append(View).Append("\n");
            sb.Append("  SccType: ").Append(SccType).Append("\n");
            sb.Append("  SccChannelID: ").Append(SccChannelID).Append("\n");
            sb.Append("  UpsellInd: ").Append(UpsellInd).Append("\n");
            sb.Append("  AsynchInd: ").Append(AsynchInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogOfferingsQueryRequestQueryParameters);
        }
        /// <summary>
        /// Returns true if CatalogOfferingsQueryRequestQueryParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogOfferingsQueryRequestQueryParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogOfferingsQueryRequestQueryParameters input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.View == input.View ||
                    (this.View != null &&
                    this.View.Equals(input.View))
                ) && 
                (
                    this.SccType == input.SccType ||
                    (this.SccType != null &&
                    this.SccType.Equals(input.SccType))
                ) && 
                (
                    this.SccChannelID == input.SccChannelID ||
                    (this.SccChannelID != null &&
                    this.SccChannelID.Equals(input.SccChannelID))
                ) && 
                (
                    this.UpsellInd == input.UpsellInd ||
                    (this.UpsellInd != null &&
                    this.UpsellInd.Equals(input.UpsellInd))
                ) && 
                (
                    this.AsynchInd == input.AsynchInd ||
                    (this.AsynchInd != null &&
                    this.AsynchInd.Equals(input.AsynchInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.View != null)
                    hashCode = hashCode * 59 + this.View.GetHashCode();
                if (this.SccType != null)
                    hashCode = hashCode * 59 + this.SccType.GetHashCode();
                if (this.SccChannelID != null)
                    hashCode = hashCode * 59 + this.SccChannelID.GetHashCode();
                if (this.UpsellInd != null)
                    hashCode = hashCode * 59 + this.UpsellInd.GetHashCode();
                if (this.AsynchInd != null)
                    hashCode = hashCode * 59 + this.AsynchInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// CatalogOfferingsRequest
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(CatalogOfferingsRequestAirChange), "CatalogOfferingsRequestAirChange")]
    [JsonSubtypes.KnownSubType(typeof(CatalogOfferingsRequestAir), "CatalogOfferingsRequestAir")]
    public partial class CatalogOfferingsRequest :  IEquatable<CatalogOfferingsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogOfferingsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsRequest" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="extensionPointShared">extensionPointShared.</param>
        public CatalogOfferingsRequest(string type = default(string), ExtensionPointShared extensionPointShared = default(ExtensionPointShared))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CatalogOfferingsRequest and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.ExtensionPointShared = extensionPointShared;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointShared
        /// </summary>
        [DataMember(Name="ExtensionPoint_Shared", EmitDefaultValue=false)]
        public ExtensionPointShared ExtensionPointShared { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogOfferingsRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ExtensionPointShared: ").Append(ExtensionPointShared).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogOfferingsRequest);
        }
        /// <summary>
        /// Returns true if CatalogOfferingsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogOfferingsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogOfferingsRequest input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ExtensionPointShared == input.ExtensionPointShared ||
                    (this.ExtensionPointShared != null &&
                    this.ExtensionPointShared.Equals(input.ExtensionPointShared))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ExtensionPointShared != null)
                    hashCode = hashCode * 59 + this.ExtensionPointShared.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// CatalogOfferingsRequestAir
    /// </summary>
    [DataContract]
    public partial class CatalogOfferingsRequestAir : CatalogOfferingsRequest,  IEquatable<CatalogOfferingsRequestAir>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsRequestAir" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogOfferingsRequestAir() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsRequestAir" /> class.
        /// </summary>
        /// <param name="maxNumberOfOffersToReturn">Assigned Type: c-0400:NonnegativeInteger.</param>
        /// <param name="offersPerPage">Assigned Type: c-0400:NonnegativeInteger.</param>
        /// <param name="contentSourceList">contentSourceList.</param>
        /// <param name="passengerCriteria">passengerCriteria (required).</param>
        /// <param name="searchCriteriaFlight">searchCriteriaFlight (required).</param>
        /// <param name="searchModifiersAir">Assigned Type: ctar-0400:SearchModifiersAir.</param>
        /// <param name="pricingModifiersAir">Assigned Type: ctar-0400:PricingModifiersAir.</param>
        /// <param name="pseudoCityInfo">Assigned Type: c-0400:PseudoCityInfo.</param>
        /// <param name="returnBrandedFaresInd">If present and true, branded fares are returned.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CatalogOfferingsRequestAir(int? maxNumberOfOffersToReturn = default(int?), int? offersPerPage = default(int?), List<ContentSourceEnum> contentSourceList = default(List<ContentSourceEnum>), List<PassengerCriteria> passengerCriteria = default(List<PassengerCriteria>), List<SearchCriteriaFlight> searchCriteriaFlight = default(List<SearchCriteriaFlight>), SearchModifiersAir searchModifiersAir = default(SearchModifiersAir), PricingModifiersAir pricingModifiersAir = default(PricingModifiersAir), PseudoCityInfo pseudoCityInfo = default(PseudoCityInfo), bool? returnBrandedFaresInd = default(bool?), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "CatalogOfferingsRequestAir", ExtensionPointShared extensionPointShared = default(ExtensionPointShared)) : base(type, extensionPointShared)
        {
            // to ensure "passengerCriteria" is required (not null)
            if (passengerCriteria == null)
            {
                throw new InvalidDataException("passengerCriteria is a required property for CatalogOfferingsRequestAir and cannot be null");
            }
            else
            {
                this.PassengerCriteria = passengerCriteria;
            }
            // to ensure "searchCriteriaFlight" is required (not null)
            if (searchCriteriaFlight == null)
            {
                throw new InvalidDataException("searchCriteriaFlight is a required property for CatalogOfferingsRequestAir and cannot be null");
            }
            else
            {
                this.SearchCriteriaFlight = searchCriteriaFlight;
            }
            this.MaxNumberOfOffersToReturn = maxNumberOfOffersToReturn;
            this.OffersPerPage = offersPerPage;
            this.ContentSourceList = contentSourceList;
            this.SearchModifiersAir = searchModifiersAir;
            this.PricingModifiersAir = pricingModifiersAir;
            this.PseudoCityInfo = pseudoCityInfo;
            this.ReturnBrandedFaresInd = returnBrandedFaresInd;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Assigned Type: c-0400:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-0400:NonnegativeInteger</value>
        [DataMember(Name="maxNumberOfOffersToReturn", EmitDefaultValue=false)]
        public int? MaxNumberOfOffersToReturn { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-0400:NonnegativeInteger</value>
        [DataMember(Name="offersPerPage", EmitDefaultValue=false)]
        public int? OffersPerPage { get; set; }
        /// <summary>
        /// Gets or Sets ContentSourceList
        /// </summary>
        [DataMember(Name="contentSourceList", EmitDefaultValue=false)]
        public List<ContentSourceEnum> ContentSourceList { get; set; }
        /// <summary>
        /// Gets or Sets PassengerCriteria
        /// </summary>
        [DataMember(Name="PassengerCriteria", EmitDefaultValue=false)]
        public List<PassengerCriteria> PassengerCriteria { get; set; }
        /// <summary>
        /// Gets or Sets SearchCriteriaFlight
        /// </summary>
        [DataMember(Name="SearchCriteriaFlight", EmitDefaultValue=false)]
        public List<SearchCriteriaFlight> SearchCriteriaFlight { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:SearchModifiersAir
        /// </summary>
        /// <value>Assigned Type: ctar-0400:SearchModifiersAir</value>
        [DataMember(Name="SearchModifiersAir", EmitDefaultValue=false)]
        public SearchModifiersAir SearchModifiersAir { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:PricingModifiersAir
        /// </summary>
        /// <value>Assigned Type: ctar-0400:PricingModifiersAir</value>
        [DataMember(Name="PricingModifiersAir", EmitDefaultValue=false)]
        public PricingModifiersAir PricingModifiersAir { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:PseudoCityInfo
        /// </summary>
        /// <value>Assigned Type: c-0400:PseudoCityInfo</value>
        [DataMember(Name="PseudoCityInfo", EmitDefaultValue=false)]
        public PseudoCityInfo PseudoCityInfo { get; set; }
        /// <summary>
        /// If present and true, branded fares are returned
        /// </summary>
        /// <value>If present and true, branded fares are returned</value>
        [DataMember(Name="returnBrandedFaresInd", EmitDefaultValue=false)]
        public bool? ReturnBrandedFaresInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogOfferingsRequestAir {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  MaxNumberOfOffersToReturn: ").Append(MaxNumberOfOffersToReturn).Append("\n");
            sb.Append("  OffersPerPage: ").Append(OffersPerPage).Append("\n");
            sb.Append("  ContentSourceList: ").Append(ContentSourceList).Append("\n");
            sb.Append("  PassengerCriteria: ").Append(PassengerCriteria).Append("\n");
            sb.Append("  SearchCriteriaFlight: ").Append(SearchCriteriaFlight).Append("\n");
            sb.Append("  SearchModifiersAir: ").Append(SearchModifiersAir).Append("\n");
            sb.Append("  PricingModifiersAir: ").Append(PricingModifiersAir).Append("\n");
            sb.Append("  PseudoCityInfo: ").Append(PseudoCityInfo).Append("\n");
            sb.Append("  ReturnBrandedFaresInd: ").Append(ReturnBrandedFaresInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogOfferingsRequestAir);
        }
        /// <summary>
        /// Returns true if CatalogOfferingsRequestAir instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogOfferingsRequestAir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogOfferingsRequestAir input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.MaxNumberOfOffersToReturn == input.MaxNumberOfOffersToReturn ||
                    (this.MaxNumberOfOffersToReturn != null &&
                    this.MaxNumberOfOffersToReturn.Equals(input.MaxNumberOfOffersToReturn))
                ) && base.Equals(input) && 
                (
                    this.OffersPerPage == input.OffersPerPage ||
                    (this.OffersPerPage != null &&
                    this.OffersPerPage.Equals(input.OffersPerPage))
                ) && base.Equals(input) && 
                (
                    this.ContentSourceList == input.ContentSourceList ||
                    this.ContentSourceList != null &&
                    this.ContentSourceList.SequenceEqual(input.ContentSourceList)
                ) && base.Equals(input) && 
                (
                    this.PassengerCriteria == input.PassengerCriteria ||
                    this.PassengerCriteria != null &&
                    this.PassengerCriteria.SequenceEqual(input.PassengerCriteria)
                ) && base.Equals(input) && 
                (
                    this.SearchCriteriaFlight == input.SearchCriteriaFlight ||
                    this.SearchCriteriaFlight != null &&
                    this.SearchCriteriaFlight.SequenceEqual(input.SearchCriteriaFlight)
                ) && base.Equals(input) && 
                (
                    this.SearchModifiersAir == input.SearchModifiersAir ||
                    (this.SearchModifiersAir != null &&
                    this.SearchModifiersAir.Equals(input.SearchModifiersAir))
                ) && base.Equals(input) && 
                (
                    this.PricingModifiersAir == input.PricingModifiersAir ||
                    (this.PricingModifiersAir != null &&
                    this.PricingModifiersAir.Equals(input.PricingModifiersAir))
                ) && base.Equals(input) && 
                (
                    this.PseudoCityInfo == input.PseudoCityInfo ||
                    (this.PseudoCityInfo != null &&
                    this.PseudoCityInfo.Equals(input.PseudoCityInfo))
                ) && base.Equals(input) && 
                (
                    this.ReturnBrandedFaresInd == input.ReturnBrandedFaresInd ||
                    (this.ReturnBrandedFaresInd != null &&
                    this.ReturnBrandedFaresInd.Equals(input.ReturnBrandedFaresInd))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.MaxNumberOfOffersToReturn != null)
                    hashCode = hashCode * 59 + this.MaxNumberOfOffersToReturn.GetHashCode();
                if (this.OffersPerPage != null)
                    hashCode = hashCode * 59 + this.OffersPerPage.GetHashCode();
                if (this.ContentSourceList != null)
                    hashCode = hashCode * 59 + this.ContentSourceList.GetHashCode();
                if (this.PassengerCriteria != null)
                    hashCode = hashCode * 59 + this.PassengerCriteria.GetHashCode();
                if (this.SearchCriteriaFlight != null)
                    hashCode = hashCode * 59 + this.SearchCriteriaFlight.GetHashCode();
                if (this.SearchModifiersAir != null)
                    hashCode = hashCode * 59 + this.SearchModifiersAir.GetHashCode();
                if (this.PricingModifiersAir != null)
                    hashCode = hashCode * 59 + this.PricingModifiersAir.GetHashCode();
                if (this.PseudoCityInfo != null)
                    hashCode = hashCode * 59 + this.PseudoCityInfo.GetHashCode();
                if (this.ReturnBrandedFaresInd != null)
                    hashCode = hashCode * 59 + this.ReturnBrandedFaresInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // MaxNumberOfOffersToReturn (int?) minimum
            if(this.MaxNumberOfOffersToReturn < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxNumberOfOffersToReturn, must be a value greater than or equal to 0.", new [] { "MaxNumberOfOffersToReturn" });
            }
            // OffersPerPage (int?) minimum
            if(this.OffersPerPage < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OffersPerPage, must be a value greater than or equal to 0.", new [] { "OffersPerPage" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// CatalogOfferingsRequestAirChange
    /// </summary>
    [DataContract]
    public partial class CatalogOfferingsRequestAirChange : CatalogOfferingsRequest,  IEquatable<CatalogOfferingsRequestAirChange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsRequestAirChange" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogOfferingsRequestAirChange() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsRequestAirChange" /> class.
        /// </summary>
        /// <param name="maxNumberOfOffersToReturn">Assigned Type: c-0400:NonnegativeInteger.</param>
        /// <param name="offersPerPage">Assigned Type: c-0400:NonnegativeInteger.</param>
        /// <param name="searchCriteriaFlightChange">searchCriteriaFlightChange (required).</param>
        /// <param name="passengerCriteria">passengerCriteria (required).</param>
        /// <param name="ticketNumber">Assigned Type: c-0400:Identifier (required).</param>
        /// <param name="returnBrandedFaresInd">If present and true, branded fares are returned.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CatalogOfferingsRequestAirChange(int? maxNumberOfOffersToReturn = default(int?), int? offersPerPage = default(int?), List<SearchCriteriaFlightChange> searchCriteriaFlightChange = default(List<SearchCriteriaFlightChange>), List<PassengerCriteria> passengerCriteria = default(List<PassengerCriteria>), Identifier ticketNumber = default(Identifier), bool? returnBrandedFaresInd = default(bool?), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "CatalogOfferingsRequestAirChange", ExtensionPointShared extensionPointShared = default(ExtensionPointShared)) : base(type, extensionPointShared)
        {
            // to ensure "searchCriteriaFlightChange" is required (not null)
            if (searchCriteriaFlightChange == null)
            {
                throw new InvalidDataException("searchCriteriaFlightChange is a required property for CatalogOfferingsRequestAirChange and cannot be null");
            }
            else
            {
                this.SearchCriteriaFlightChange = searchCriteriaFlightChange;
            }
            // to ensure "passengerCriteria" is required (not null)
            if (passengerCriteria == null)
            {
                throw new InvalidDataException("passengerCriteria is a required property for CatalogOfferingsRequestAirChange and cannot be null");
            }
            else
            {
                this.PassengerCriteria = passengerCriteria;
            }
            // to ensure "ticketNumber" is required (not null)
            if (ticketNumber == null)
            {
                throw new InvalidDataException("ticketNumber is a required property for CatalogOfferingsRequestAirChange and cannot be null");
            }
            else
            {
                this.TicketNumber = ticketNumber;
            }
            this.MaxNumberOfOffersToReturn = maxNumberOfOffersToReturn;
            this.OffersPerPage = offersPerPage;
            this.ReturnBrandedFaresInd = returnBrandedFaresInd;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Assigned Type: c-0400:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-0400:NonnegativeInteger</value>
        [DataMember(Name="maxNumberOfOffersToReturn", EmitDefaultValue=false)]
        public int? MaxNumberOfOffersToReturn { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-0400:NonnegativeInteger</value>
        [DataMember(Name="offersPerPage", EmitDefaultValue=false)]
        public int? OffersPerPage { get; set; }
        /// <summary>
        /// Gets or Sets SearchCriteriaFlightChange
        /// </summary>
        [DataMember(Name="SearchCriteriaFlightChange", EmitDefaultValue=false)]
        public List<SearchCriteriaFlightChange> SearchCriteriaFlightChange { get; set; }
        /// <summary>
        /// Gets or Sets PassengerCriteria
        /// </summary>
        [DataMember(Name="PassengerCriteria", EmitDefaultValue=false)]
        public List<PassengerCriteria> PassengerCriteria { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Identifier
        /// </summary>
        /// <value>Assigned Type: c-0400:Identifier</value>
        [DataMember(Name="TicketNumber", EmitDefaultValue=false)]
        public Identifier TicketNumber { get; set; }
        /// <summary>
        /// If present and true, branded fares are returned
        /// </summary>
        /// <value>If present and true, branded fares are returned</value>
        [DataMember(Name="returnBrandedFaresInd", EmitDefaultValue=false)]
        public bool? ReturnBrandedFaresInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogOfferingsRequestAirChange {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  MaxNumberOfOffersToReturn: ").Append(MaxNumberOfOffersToReturn).Append("\n");
            sb.Append("  OffersPerPage: ").Append(OffersPerPage).Append("\n");
            sb.Append("  SearchCriteriaFlightChange: ").Append(SearchCriteriaFlightChange).Append("\n");
            sb.Append("  PassengerCriteria: ").Append(PassengerCriteria).Append("\n");
            sb.Append("  TicketNumber: ").Append(TicketNumber).Append("\n");
            sb.Append("  ReturnBrandedFaresInd: ").Append(ReturnBrandedFaresInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogOfferingsRequestAirChange);
        }
        /// <summary>
        /// Returns true if CatalogOfferingsRequestAirChange instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogOfferingsRequestAirChange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogOfferingsRequestAirChange input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.MaxNumberOfOffersToReturn == input.MaxNumberOfOffersToReturn ||
                    (this.MaxNumberOfOffersToReturn != null &&
                    this.MaxNumberOfOffersToReturn.Equals(input.MaxNumberOfOffersToReturn))
                ) && base.Equals(input) && 
                (
                    this.OffersPerPage == input.OffersPerPage ||
                    (this.OffersPerPage != null &&
                    this.OffersPerPage.Equals(input.OffersPerPage))
                ) && base.Equals(input) && 
                (
                    this.SearchCriteriaFlightChange == input.SearchCriteriaFlightChange ||
                    this.SearchCriteriaFlightChange != null &&
                    this.SearchCriteriaFlightChange.SequenceEqual(input.SearchCriteriaFlightChange)
                ) && base.Equals(input) && 
                (
                    this.PassengerCriteria == input.PassengerCriteria ||
                    this.PassengerCriteria != null &&
                    this.PassengerCriteria.SequenceEqual(input.PassengerCriteria)
                ) && base.Equals(input) && 
                (
                    this.TicketNumber == input.TicketNumber ||
                    (this.TicketNumber != null &&
                    this.TicketNumber.Equals(input.TicketNumber))
                ) && base.Equals(input) && 
                (
                    this.ReturnBrandedFaresInd == input.ReturnBrandedFaresInd ||
                    (this.ReturnBrandedFaresInd != null &&
                    this.ReturnBrandedFaresInd.Equals(input.ReturnBrandedFaresInd))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.MaxNumberOfOffersToReturn != null)
                    hashCode = hashCode * 59 + this.MaxNumberOfOffersToReturn.GetHashCode();
                if (this.OffersPerPage != null)
                    hashCode = hashCode * 59 + this.OffersPerPage.GetHashCode();
                if (this.SearchCriteriaFlightChange != null)
                    hashCode = hashCode * 59 + this.SearchCriteriaFlightChange.GetHashCode();
                if (this.PassengerCriteria != null)
                    hashCode = hashCode * 59 + this.PassengerCriteria.GetHashCode();
                if (this.TicketNumber != null)
                    hashCode = hashCode * 59 + this.TicketNumber.GetHashCode();
                if (this.ReturnBrandedFaresInd != null)
                    hashCode = hashCode * 59 + this.ReturnBrandedFaresInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // MaxNumberOfOffersToReturn (int?) minimum
            if(this.MaxNumberOfOffersToReturn < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxNumberOfOffersToReturn, must be a value greater than or equal to 0.", new [] { "MaxNumberOfOffersToReturn" });
            }
            // OffersPerPage (int?) minimum
            if(this.OffersPerPage < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OffersPerPage, must be a value greater than or equal to 0.", new [] { "OffersPerPage" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// CatalogOfferingsResponse
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class CatalogOfferingsResponse :  IEquatable<CatalogOfferingsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CatalogOfferingsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogOfferingsResponse" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="catalogOfferings">Assigned Type: ctlg-0400:CatalogOfferings (required).</param>
        /// <param name="transactionId">Unique transaction, correlation or tracking id for a single request and reply i.e. for a single transaction. Should be a 128 bit GUID format. Also know as E2ETrackingId..</param>
        /// <param name="traceId">Optional ID for internal child transactions created for processing a single request (single transaction). Should be a 128 bit GUID format. Also known as ChildTrackingId..</param>
        /// <param name="result">Assigned Type: c-0400:Result.</param>
        /// <param name="identifier">Assigned Type: c-0400:Identifier.</param>
        /// <param name="nextSteps">Assigned Type: c-0400:NextSteps.</param>
        /// <param name="referenceList">referenceList.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public CatalogOfferingsResponse(string type = default(string), CatalogOfferingsID catalogOfferings = default(CatalogOfferingsID), string transactionId = default(string), string traceId = default(string), Result result = default(Result), Identifier identifier = default(Identifier), NextSteps nextSteps = default(NextSteps), List<ReferenceList> referenceList = default(List<ReferenceList>), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for CatalogOfferingsResponse and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "catalogOfferings" is required (not null)
            if (catalogOfferings == null)
            {
                throw new InvalidDataException("catalogOfferings is a required property for CatalogOfferingsResponse and cannot be null");
            }
            else
            {
                this.CatalogOfferings = catalogOfferings;
            }
            this.TransactionId = transactionId;
            this.TraceId = traceId;
            this.Result = result;
            this.Identifier = identifier;
            this.NextSteps = nextSteps;
            this.ReferenceList = referenceList;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: ctlg-0400:CatalogOfferings
        /// </summary>
        /// <value>Assigned Type: ctlg-0400:CatalogOfferings</value>
        [DataMember(Name="CatalogOfferings", EmitDefaultValue=false)]
        public CatalogOfferingsID CatalogOfferings { get; set; }
        /// <summary>
        /// Unique transaction, correlation or tracking id for a single request and reply i.e. for a single transaction. Should be a 128 bit GUID format. Also know as E2ETrackingId.
        /// </summary>
        /// <value>Unique transaction, correlation or tracking id for a single request and reply i.e. for a single transaction. Should be a 128 bit GUID format. Also know as E2ETrackingId.</value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }
        /// <summary>
        /// Optional ID for internal child transactions created for processing a single request (single transaction). Should be a 128 bit GUID format. Also known as ChildTrackingId.
        /// </summary>
        /// <value>Optional ID for internal child transactions created for processing a single request (single transaction). Should be a 128 bit GUID format. Also known as ChildTrackingId.</value>
        [DataMember(Name="traceId", EmitDefaultValue=false)]
        public string TraceId { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Result
        /// </summary>
        /// <value>Assigned Type: c-0400:Result</value>
        [DataMember(Name="Result", EmitDefaultValue=false)]
        public Result Result { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Identifier
        /// </summary>
        /// <value>Assigned Type: c-0400:Identifier</value>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public Identifier Identifier { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:NextSteps
        /// </summary>
        /// <value>Assigned Type: c-0400:NextSteps</value>
        [DataMember(Name="NextSteps", EmitDefaultValue=false)]
        public NextSteps NextSteps { get; set; }
        /// <summary>
        /// Gets or Sets ReferenceList
        /// </summary>
        [DataMember(Name="ReferenceList", EmitDefaultValue=false)]
        public List<ReferenceList> ReferenceList { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CatalogOfferingsResponse {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CatalogOfferings: ").Append(CatalogOfferings).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  TraceId: ").Append(TraceId).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  NextSteps: ").Append(NextSteps).Append("\n");
            sb.Append("  ReferenceList: ").Append(ReferenceList).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CatalogOfferingsResponse);
        }
        /// <summary>
        /// Returns true if CatalogOfferingsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CatalogOfferingsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CatalogOfferingsResponse input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CatalogOfferings == input.CatalogOfferings ||
                    (this.CatalogOfferings != null &&
                    this.CatalogOfferings.Equals(input.CatalogOfferings))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.TraceId == input.TraceId ||
                    (this.TraceId != null &&
                    this.TraceId.Equals(input.TraceId))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.NextSteps == input.NextSteps ||
                    (this.NextSteps != null &&
                    this.NextSteps.Equals(input.NextSteps))
                ) && 
                (
                    this.ReferenceList == input.ReferenceList ||
                    this.ReferenceList != null &&
                    this.ReferenceList.SequenceEqual(input.ReferenceList)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CatalogOfferings != null)
                    hashCode = hashCode * 59 + this.CatalogOfferings.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.TraceId != null)
                    hashCode = hashCode * 59 + this.TraceId.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.NextSteps != null)
                    hashCode = hashCode * 59 + this.NextSteps.GetHashCode();
                if (this.ReferenceList != null)
                    hashCode = hashCode * 59 + this.ReferenceList.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Change
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class Change :  IEquatable<Change>, IValidatableObject
    {
        /// <summary>
        /// Assigned Type: ctar-0400:PenaltyAppliesToEnum
        /// </summary>
        /// <value>Assigned Type: ctar-0400:PenaltyAppliesToEnum</value>
        [DataMember(Name="PenaltyAppliesTo", EmitDefaultValue=false)]
        public PenaltyAppliesToEnum? PenaltyAppliesTo { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Change" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Change() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Change" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="penaltyTypes">penaltyTypes.</param>
        /// <param name="amount">Assigned Type: c-0400:CurrencyAmount.</param>
        /// <param name="penaltyAppliesTo">Assigned Type: ctar-0400:PenaltyAppliesToEnum.</param>
        /// <param name="notPermittedInd">Changes are not permitted.</param>
        /// <param name="indeterminateInd">structured fare rules could not be determined for this category.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public Change(string type = default(string), List<PenaltyTypeEnum> penaltyTypes = default(List<PenaltyTypeEnum>), CurrencyAmount amount = default(CurrencyAmount), PenaltyAppliesToEnum? penaltyAppliesTo = default(PenaltyAppliesToEnum?), bool? notPermittedInd = default(bool?), bool? indeterminateInd = default(bool?), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Change and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.PenaltyTypes = penaltyTypes;
            this.Amount = amount;
            this.PenaltyAppliesTo = penaltyAppliesTo;
            this.NotPermittedInd = notPermittedInd;
            this.IndeterminateInd = indeterminateInd;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets PenaltyTypes
        /// </summary>
        [DataMember(Name="penaltyTypes", EmitDefaultValue=false)]
        public List<PenaltyTypeEnum> PenaltyTypes { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CurrencyAmount
        /// </summary>
        /// <value>Assigned Type: c-0400:CurrencyAmount</value>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public CurrencyAmount Amount { get; set; }
        /// <summary>
        /// Changes are not permitted
        /// </summary>
        /// <value>Changes are not permitted</value>
        [DataMember(Name="notPermittedInd", EmitDefaultValue=false)]
        public bool? NotPermittedInd { get; set; }
        /// <summary>
        /// structured fare rules could not be determined for this category
        /// </summary>
        /// <value>structured fare rules could not be determined for this category</value>
        [DataMember(Name="indeterminateInd", EmitDefaultValue=false)]
        public bool? IndeterminateInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Change {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PenaltyTypes: ").Append(PenaltyTypes).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PenaltyAppliesTo: ").Append(PenaltyAppliesTo).Append("\n");
            sb.Append("  NotPermittedInd: ").Append(NotPermittedInd).Append("\n");
            sb.Append("  IndeterminateInd: ").Append(IndeterminateInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Change);
        }
        /// <summary>
        /// Returns true if Change instances are equal
        /// </summary>
        /// <param name="input">Instance of Change to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Change input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.PenaltyTypes == input.PenaltyTypes ||
                    this.PenaltyTypes != null &&
                    this.PenaltyTypes.SequenceEqual(input.PenaltyTypes)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.PenaltyAppliesTo == input.PenaltyAppliesTo ||
                    (this.PenaltyAppliesTo != null &&
                    this.PenaltyAppliesTo.Equals(input.PenaltyAppliesTo))
                ) && 
                (
                    this.NotPermittedInd == input.NotPermittedInd ||
                    (this.NotPermittedInd != null &&
                    this.NotPermittedInd.Equals(input.NotPermittedInd))
                ) && 
                (
                    this.IndeterminateInd == input.IndeterminateInd ||
                    (this.IndeterminateInd != null &&
                    this.IndeterminateInd.Equals(input.IndeterminateInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.PenaltyTypes != null)
                    hashCode = hashCode * 59 + this.PenaltyTypes.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.PenaltyAppliesTo != null)
                    hashCode = hashCode * 59 + this.PenaltyAppliesTo.GetHashCode();
                if (this.NotPermittedInd != null)
                    hashCode = hashCode * 59 + this.NotPermittedInd.GetHashCode();
                if (this.IndeterminateInd != null)
                    hashCode = hashCode * 59 + this.IndeterminateInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Clarification of how the airport or city code is used
    /// </summary>
    /// <value>Clarification of how the airport or city code is used</value>
    public enum CityOrAirportEnum
    {
        /// <summary>
        /// Enum AirportOnly for value: Airport Only
        /// </summary>
        AirportOnly = Airport Only,
        /// <summary>
        /// Enum CityorAirport for value: City or Airport
        /// </summary>
        CityorAirport = City or Airport,
        /// <summary>
        /// Enum CityOnly for value: City Only
        /// </summary>
        CityOnly = City Only,
        /// <summary>
        /// Enum UseDefault for value: Use Default
        /// </summary>
        UseDefault = Use Default
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Defines ConnectionTypeEnum
    /// </summary>
    public enum ConnectionTypeEnum
    {
        /// <summary>
        /// Enum NonStopDirect for value: NonStopDirect
        /// </summary>
        NonStopDirect = NonStopDirect,
        /// <summary>
        /// Enum StopDirect for value: StopDirect
        /// </summary>
        StopDirect = StopDirect,
        /// <summary>
        /// Enum SingleConnection for value: SingleConnection
        /// </summary>
        SingleConnection = SingleConnection,
        /// <summary>
        /// Enum DoubleConnection for value: DoubleConnection
        /// </summary>
        DoubleConnection = DoubleConnection,
        /// <summary>
        /// Enum TripleConnection for value: TripleConnection
        /// </summary>
        TripleConnection = TripleConnection
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// The source of the content to be returned in CatalogOfferings
    /// </summary>
    /// <value>The source of the content to be returned in CatalogOfferings</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ContentSourceEnum
    {
        /// <summary>
        /// Enum GDS for value: GDS
        /// </summary>
        [EnumMember(Value = "GDS")]
        GDS = 1,
        /// <summary>
        /// Enum NDC for value: NDC
        /// </summary>
        [EnumMember(Value = "NDC")]
        NDC = 2
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// The default currency that will apply to all prices, amounts, fares, etc. in a message.  It is placed at the top of any message using this object.
    /// </summary>
    [DataContract]
    public partial class Currency :  IEquatable<Currency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Currency" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Currency() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Currency" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="code">Assigned Type: c-0400:CurrencyCodeISO (required).</param>
        public Currency(float? value = default(float?), string code = default(string))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for Currency and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            this.Value = value;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public float? Value { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CurrencyCodeISO
        /// </summary>
        /// <value>Assigned Type: c-0400:CurrencyCodeISO</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Currency {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Currency);
        }
        /// <summary>
        /// Returns true if Currency instances are equal
        /// </summary>
        /// <param name="input">Instance of Currency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Currency input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) pattern
            Regex regexCode = new Regex(@"[a-zA-Z]{3}", RegexOptions.CultureInvariant);
            if (false == regexCode.Match(this.Code).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, must match a pattern of " + regexCode, new [] { "Code" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// A monetary amount, up to 4 decimal places. Decimal place needs to be included.
    /// </summary>
    [DataContract]
    public partial class CurrencyAmount :  IEquatable<CurrencyAmount>, IValidatableObject
    {
        /// <summary>
        /// The origin of the requested currency code
        /// </summary>
        /// <value>The origin of the requested currency code</value>
        [DataMember(Name="currencySource", EmitDefaultValue=false)]
        public CurrencySourceEnum? CurrencySource { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyAmount" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="code">Assigned Type: c-0400:CurrencyCodeISO.</param>
        /// <param name="minorUnit">Assigned Type: c-0400:CurrencyMinorUnit.</param>
        /// <param name="currencySource">The origin of the requested currency code.</param>
        /// <param name="approximateInd">True if the currency amount has been converted from the original amount.</param>
        public CurrencyAmount(float? value = default(float?), string code = default(string), int? minorUnit = default(int?), CurrencySourceEnum? currencySource = default(CurrencySourceEnum?), bool? approximateInd = default(bool?))
        {
            this.Value = value;
            this.Code = code;
            this.MinorUnit = minorUnit;
            this.CurrencySource = currencySource;
            this.ApproximateInd = approximateInd;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public float? Value { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CurrencyCodeISO
        /// </summary>
        /// <value>Assigned Type: c-0400:CurrencyCodeISO</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CurrencyMinorUnit
        /// </summary>
        /// <value>Assigned Type: c-0400:CurrencyMinorUnit</value>
        [DataMember(Name="minorUnit", EmitDefaultValue=false)]
        public int? MinorUnit { get; set; }
        /// <summary>
        /// True if the currency amount has been converted from the original amount
        /// </summary>
        /// <value>True if the currency amount has been converted from the original amount</value>
        [DataMember(Name="approximateInd", EmitDefaultValue=false)]
        public bool? ApproximateInd { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyAmount {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  MinorUnit: ").Append(MinorUnit).Append("\n");
            sb.Append("  CurrencySource: ").Append(CurrencySource).Append("\n");
            sb.Append("  ApproximateInd: ").Append(ApproximateInd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrencyAmount);
        }
        /// <summary>
        /// Returns true if CurrencyAmount instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencyAmount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyAmount input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.MinorUnit == input.MinorUnit ||
                    (this.MinorUnit != null &&
                    this.MinorUnit.Equals(input.MinorUnit))
                ) && 
                (
                    this.CurrencySource == input.CurrencySource ||
                    (this.CurrencySource != null &&
                    this.CurrencySource.Equals(input.CurrencySource))
                ) && 
                (
                    this.ApproximateInd == input.ApproximateInd ||
                    (this.ApproximateInd != null &&
                    this.ApproximateInd.Equals(input.ApproximateInd))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.MinorUnit != null)
                    hashCode = hashCode * 59 + this.MinorUnit.GetHashCode();
                if (this.CurrencySource != null)
                    hashCode = hashCode * 59 + this.CurrencySource.GetHashCode();
                if (this.ApproximateInd != null)
                    hashCode = hashCode * 59 + this.ApproximateInd.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) pattern
            Regex regexCode = new Regex(@"[a-zA-Z]{3}", RegexOptions.CultureInvariant);
            if (false == regexCode.Match(this.Code).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, must match a pattern of " + regexCode, new [] { "Code" });
            }
            // MinorUnit (int?) minimum
            if(this.MinorUnit < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinorUnit, must be a value greater than or equal to 0.", new [] { "MinorUnit" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// The system requesting or returning the currency code specified in the attribute
    /// </summary>
    /// <value>The system requesting or returning the currency code specified in the attribute</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum CurrencySourceEnum
    {
        /// <summary>
        /// Enum Supplier for value: Supplier
        /// </summary>
        [EnumMember(Value = "Supplier")]
        Supplier = 1,
        /// <summary>
        /// Enum Charged for value: Charged
        /// </summary>
        [EnumMember(Value = "Charged")]
        Charged = 2,
        /// <summary>
        /// Enum Requested for value: Requested
        /// </summary>
        [EnumMember(Value = "Requested")]
        Requested = 3
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Specifies the ID for the membership program.
    /// </summary>
    [DataContract]
    public partial class CustomerLoyalty :  IEquatable<CustomerLoyalty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerLoyalty" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="id">Customer Loyality Id.</param>
        /// <param name="priority">Assigned Type: c-0400:Priority.</param>
        /// <param name="programId">Assigned Type: c-0400:StringShort.</param>
        /// <param name="programName">Assigned Type: c-0400:LoyaltyProgramName.</param>
        /// <param name="supplierType">Assigned Type: c-0400:LoyaltySupplierType.</param>
        /// <param name="supplier">Assigned Type: c-0400:LoyaltySupplier.</param>
        /// <param name="tier">Assigned Type: c-0400:StringTiny.</param>
        /// <param name="shareWithSupplier">Assigned Type: c-0400:TinyStrings.</param>
        /// <param name="cardHolderName">Assigned Type: c-0400:StringShort.</param>
        /// <param name="validatedInd">Customer loyalty number has been validated by the supplier.</param>
        public CustomerLoyalty(string value = default(string), string id = default(string), int? priority = default(int?), string programId = default(string), string programName = default(string), string supplierType = default(string), string supplier = default(string), string tier = default(string), List<string> shareWithSupplier = default(List<string>), string cardHolderName = default(string), bool? validatedInd = default(bool?))
        {
            this.Value = value;
            this.Id = id;
            this.Priority = priority;
            this.ProgramId = programId;
            this.ProgramName = programName;
            this.SupplierType = supplierType;
            this.Supplier = supplier;
            this.Tier = tier;
            this.ShareWithSupplier = shareWithSupplier;
            this.CardHolderName = cardHolderName;
            this.ValidatedInd = validatedInd;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Customer Loyality Id
        /// </summary>
        /// <value>Customer Loyality Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Priority
        /// </summary>
        /// <value>Assigned Type: c-0400:Priority</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringShort
        /// </summary>
        /// <value>Assigned Type: c-0400:StringShort</value>
        [DataMember(Name="programId", EmitDefaultValue=false)]
        public string ProgramId { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:LoyaltyProgramName
        /// </summary>
        /// <value>Assigned Type: c-0400:LoyaltyProgramName</value>
        [DataMember(Name="programName", EmitDefaultValue=false)]
        public string ProgramName { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:LoyaltySupplierType
        /// </summary>
        /// <value>Assigned Type: c-0400:LoyaltySupplierType</value>
        [DataMember(Name="supplierType", EmitDefaultValue=false)]
        public string SupplierType { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:LoyaltySupplier
        /// </summary>
        /// <value>Assigned Type: c-0400:LoyaltySupplier</value>
        [DataMember(Name="supplier", EmitDefaultValue=false)]
        public string Supplier { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-0400:StringTiny</value>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public string Tier { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:TinyStrings
        /// </summary>
        /// <value>Assigned Type: c-0400:TinyStrings</value>
        [DataMember(Name="shareWithSupplier", EmitDefaultValue=false)]
        public List<string> ShareWithSupplier { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringShort
        /// </summary>
        /// <value>Assigned Type: c-0400:StringShort</value>
        [DataMember(Name="cardHolderName", EmitDefaultValue=false)]
        public string CardHolderName { get; set; }
        /// <summary>
        /// Customer loyalty number has been validated by the supplier
        /// </summary>
        /// <value>Customer loyalty number has been validated by the supplier</value>
        [DataMember(Name="validatedInd", EmitDefaultValue=false)]
        public bool? ValidatedInd { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerLoyalty {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  ProgramName: ").Append(ProgramName).Append("\n");
            sb.Append("  SupplierType: ").Append(SupplierType).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  ShareWithSupplier: ").Append(ShareWithSupplier).Append("\n");
            sb.Append("  CardHolderName: ").Append(CardHolderName).Append("\n");
            sb.Append("  ValidatedInd: ").Append(ValidatedInd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerLoyalty);
        }
        /// <summary>
        /// Returns true if CustomerLoyalty instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerLoyalty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerLoyalty input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.ProgramId == input.ProgramId ||
                    (this.ProgramId != null &&
                    this.ProgramId.Equals(input.ProgramId))
                ) && 
                (
                    this.ProgramName == input.ProgramName ||
                    (this.ProgramName != null &&
                    this.ProgramName.Equals(input.ProgramName))
                ) && 
                (
                    this.SupplierType == input.SupplierType ||
                    (this.SupplierType != null &&
                    this.SupplierType.Equals(input.SupplierType))
                ) && 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.Tier == input.Tier ||
                    (this.Tier != null &&
                    this.Tier.Equals(input.Tier))
                ) && 
                (
                    this.ShareWithSupplier == input.ShareWithSupplier ||
                    this.ShareWithSupplier != null &&
                    this.ShareWithSupplier.SequenceEqual(input.ShareWithSupplier)
                ) && 
                (
                    this.CardHolderName == input.CardHolderName ||
                    (this.CardHolderName != null &&
                    this.CardHolderName.Equals(input.CardHolderName))
                ) && 
                (
                    this.ValidatedInd == input.ValidatedInd ||
                    (this.ValidatedInd != null &&
                    this.ValidatedInd.Equals(input.ValidatedInd))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.ProgramId != null)
                    hashCode = hashCode * 59 + this.ProgramId.GetHashCode();
                if (this.ProgramName != null)
                    hashCode = hashCode * 59 + this.ProgramName.GetHashCode();
                if (this.SupplierType != null)
                    hashCode = hashCode * 59 + this.SupplierType.GetHashCode();
                if (this.Supplier != null)
                    hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.Tier != null)
                    hashCode = hashCode * 59 + this.Tier.GetHashCode();
                if (this.ShareWithSupplier != null)
                    hashCode = hashCode * 59 + this.ShareWithSupplier.GetHashCode();
                if (this.CardHolderName != null)
                    hashCode = hashCode * 59 + this.CardHolderName.GetHashCode();
                if (this.ValidatedInd != null)
                    hashCode = hashCode * 59 + this.ValidatedInd.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 1000.", new [] { "Value" });
            }
            // Value (string) minLength
            if(this.Value != null && this.Value.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be greater than 1.", new [] { "Value" });
            }
            // Priority (int?) maximum
            if(this.Priority > (int?)300)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Priority, must be a value less than or equal to 300.", new [] { "Priority" });
            }
            // Priority (int?) minimum
            if(this.Priority < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Priority, must be a value greater than or equal to 0.", new [] { "Priority" });
            }
            // ProgramId (string) maxLength
            if(this.ProgramId != null && this.ProgramId.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramId, length must be less than 128.", new [] { "ProgramId" });
            }
            // ProgramName (string) maxLength
            if(this.ProgramName != null && this.ProgramName.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramName, length must be less than 128.", new [] { "ProgramName" });
            }
            // SupplierType (string) maxLength
            if(this.SupplierType != null && this.SupplierType.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SupplierType, length must be less than 32.", new [] { "SupplierType" });
            }
            // Supplier (string) maxLength
            if(this.Supplier != null && this.Supplier.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Supplier, length must be less than 128.", new [] { "Supplier" });
            }
            // Tier (string) maxLength
            if(this.Tier != null && this.Tier.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Tier, length must be less than 32.", new [] { "Tier" });
            }
            // CardHolderName (string) maxLength
            if(this.CardHolderName != null && this.CardHolderName.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardHolderName, length must be less than 128.", new [] { "CardHolderName" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Time stamp of the creation.
    /// </summary>
    [DataContract]
    public partial class DateCreateModify :  IEquatable<DateCreateModify>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateCreateModify" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="creatorID">Assigned Type: c-0400:StringTiny.</param>
        /// <param name="lastModify">Time stamp of last modification..</param>
        /// <param name="lastModifierID">Assigned Type: c-0400:StringTiny.</param>
        /// <param name="purge">Date an item will be purged from a system of record.</param>
        public DateCreateModify(DateTime? value = default(DateTime?), string creatorID = default(string), DateTime? lastModify = default(DateTime?), string lastModifierID = default(string), DateTime? purge = default(DateTime?))
        {
            this.Value = value;
            this.CreatorID = creatorID;
            this.LastModify = lastModify;
            this.LastModifierID = lastModifierID;
            this.Purge = purge;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public DateTime? Value { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-0400:StringTiny</value>
        [DataMember(Name="creatorID", EmitDefaultValue=false)]
        public string CreatorID { get; set; }
        /// <summary>
        /// Time stamp of last modification.
        /// </summary>
        /// <value>Time stamp of last modification.</value>
        [DataMember(Name="lastModify", EmitDefaultValue=false)]
        public DateTime? LastModify { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-0400:StringTiny</value>
        [DataMember(Name="lastModifierID", EmitDefaultValue=false)]
        public string LastModifierID { get; set; }
        /// <summary>
        /// Date an item will be purged from a system of record
        /// </summary>
        /// <value>Date an item will be purged from a system of record</value>
        [DataMember(Name="purge", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Purge { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DateCreateModify {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  CreatorID: ").Append(CreatorID).Append("\n");
            sb.Append("  LastModify: ").Append(LastModify).Append("\n");
            sb.Append("  LastModifierID: ").Append(LastModifierID).Append("\n");
            sb.Append("  Purge: ").Append(Purge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateCreateModify);
        }
        /// <summary>
        /// Returns true if DateCreateModify instances are equal
        /// </summary>
        /// <param name="input">Instance of DateCreateModify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateCreateModify input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.CreatorID == input.CreatorID ||
                    (this.CreatorID != null &&
                    this.CreatorID.Equals(input.CreatorID))
                ) && 
                (
                    this.LastModify == input.LastModify ||
                    (this.LastModify != null &&
                    this.LastModify.Equals(input.LastModify))
                ) && 
                (
                    this.LastModifierID == input.LastModifierID ||
                    (this.LastModifierID != null &&
                    this.LastModifierID.Equals(input.LastModifierID))
                ) && 
                (
                    this.Purge == input.Purge ||
                    (this.Purge != null &&
                    this.Purge.Equals(input.Purge))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.CreatorID != null)
                    hashCode = hashCode * 59 + this.CreatorID.GetHashCode();
                if (this.LastModify != null)
                    hashCode = hashCode * 59 + this.LastModify.GetHashCode();
                if (this.LastModifierID != null)
                    hashCode = hashCode * 59 + this.LastModifierID.GetHashCode();
                if (this.Purge != null)
                    hashCode = hashCode * 59 + this.Purge.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CreatorID (string) maxLength
            if(this.CreatorID != null && this.CreatorID.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreatorID, length must be less than 32.", new [] { "CreatorID" });
            }
            // LastModifierID (string) maxLength
            if(this.LastModifierID != null && this.LastModifierID.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastModifierID, length must be less than 32.", new [] { "LastModifierID" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// The names of the days of the week.
    /// </summary>
    /// <value>The names of the days of the week.</value>
    public enum DayOfWeekEnum
    {
        /// <summary>
        /// Enum Sunday for value: Sunday
        /// </summary>
        Sunday = Sunday,
        /// <summary>
        /// Enum Monday for value: Monday
        /// </summary>
        Monday = Monday,
        /// <summary>
        /// Enum Tuesday for value: Tuesday
        /// </summary>
        Tuesday = Tuesday,
        /// <summary>
        /// Enum Wednesday for value: Wednesday
        /// </summary>
        Wednesday = Wednesday,
        /// <summary>
        /// Enum Thursday for value: Thursday
        /// </summary>
        Thursday = Thursday,
        /// <summary>
        /// Enum Friday for value: Friday
        /// </summary>
        Friday = Friday,
        /// <summary>
        /// Enum Saturday for value: Saturday
        /// </summary>
        Saturday = Saturday
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Departure
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(DepartureDetail), "DepartureDetail")]
    public partial class Departure :  IEquatable<Departure>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Departure" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Departure() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Departure" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="location">Assigned Type: c-0400:LocationCodeIATA (required).</param>
        /// <param name="date">Local date of for arrival or departure (required).</param>
        /// <param name="time">Local time Date of for arrival or departure (required).</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public Departure(string type = default(string), string location = default(string), DateTime? date = default(DateTime?), string time = default(string), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Departure and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new InvalidDataException("location is a required property for Departure and cannot be null");
            }
            else
            {
                this.Location = location;
            }
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for Departure and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "time" is required (not null)
            if (time == null)
            {
                throw new InvalidDataException("time is a required property for Departure and cannot be null");
            }
            else
            {
                this.Time = time;
            }
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:LocationCodeIATA
        /// </summary>
        /// <value>Assigned Type: c-0400:LocationCodeIATA</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }
        /// <summary>
        /// Local date of for arrival or departure
        /// </summary>
        /// <value>Local date of for arrival or departure</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }
        /// <summary>
        /// Local time Date of for arrival or departure
        /// </summary>
        /// <value>Local time Date of for arrival or departure</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public string Time { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Departure {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Departure);
        }
        /// <summary>
        /// Returns true if Departure instances are equal
        /// </summary>
        /// <param name="input">Instance of Departure to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Departure input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Location (string) maxLength
            if(this.Location != null && this.Location.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Location, length must be less than 3.", new [] { "Location" });
            }
            // Location (string) minLength
            if(this.Location != null && this.Location.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Location, length must be greater than 3.", new [] { "Location" });
            }
            // Location (string) pattern
            Regex regexLocation = new Regex(@"([a-zA-Z]{3})", RegexOptions.CultureInvariant);
            if (false == regexLocation.Match(this.Location).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Location, must match a pattern of " + regexLocation, new [] { "Location" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// DepartureArrival
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(DepartureArrivalDetail), "DepartureArrivalDetail")]
    public partial class DepartureArrival :  IEquatable<DepartureArrival>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartureArrival" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DepartureArrival() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartureArrival" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="location">Assigned Type: c-0400:LocationCodeIATA (required).</param>
        /// <param name="date">Local date of for arrival or departure (required).</param>
        /// <param name="time">Local time Date of for arrival or departure (required).</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public DepartureArrival(string type = default(string), string location = default(string), DateTime? date = default(DateTime?), string time = default(string), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for DepartureArrival and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new InvalidDataException("location is a required property for DepartureArrival and cannot be null");
            }
            else
            {
                this.Location = location;
            }
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for DepartureArrival and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "time" is required (not null)
            if (time == null)
            {
                throw new InvalidDataException("time is a required property for DepartureArrival and cannot be null");
            }
            else
            {
                this.Time = time;
            }
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:LocationCodeIATA
        /// </summary>
        /// <value>Assigned Type: c-0400:LocationCodeIATA</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }
        /// <summary>
        /// Local date of for arrival or departure
        /// </summary>
        /// <value>Local date of for arrival or departure</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Date { get; set; }
        /// <summary>
        /// Local time Date of for arrival or departure
        /// </summary>
        /// <value>Local time Date of for arrival or departure</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public string Time { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DepartureArrival {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DepartureArrival);
        }
        /// <summary>
        /// Returns true if DepartureArrival instances are equal
        /// </summary>
        /// <param name="input">Instance of DepartureArrival to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepartureArrival input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Location (string) maxLength
            if(this.Location != null && this.Location.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Location, length must be less than 3.", new [] { "Location" });
            }
            // Location (string) minLength
            if(this.Location != null && this.Location.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Location, length must be greater than 3.", new [] { "Location" });
            }
            // Location (string) pattern
            Regex regexLocation = new Regex(@"([a-zA-Z]{3})", RegexOptions.CultureInvariant);
            if (false == regexLocation.Match(this.Location).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Location, must match a pattern of " + regexLocation, new [] { "Location" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// DepartureArrivalDetail
    /// </summary>
    [DataContract]
    public partial class DepartureArrivalDetail : DepartureArrival,  IEquatable<DepartureArrivalDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartureArrivalDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DepartureArrivalDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartureArrivalDetail" /> class.
        /// </summary>
        /// <param name="terminal">Assigned Type: c-0400:StringAlphaNumeric.</param>
        /// <param name="country">Assigned Type: c-0400:CountryCodeISO.</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public DepartureArrivalDetail(string terminal = default(string), string country = default(string), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "DepartureArrivalDetail", string location = default(string), DateTime? date = default(DateTime?), string time = default(string), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, location, date, time, extensionPointSummary)
        {
            this.Terminal = terminal;
            this.Country = country;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// Assigned Type: c-0400:StringAlphaNumeric
        /// </summary>
        /// <value>Assigned Type: c-0400:StringAlphaNumeric</value>
        [DataMember(Name="terminal", EmitDefaultValue=false)]
        public string Terminal { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CountryCodeISO
        /// </summary>
        /// <value>Assigned Type: c-0400:CountryCodeISO</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DepartureArrivalDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Terminal: ").Append(Terminal).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DepartureArrivalDetail);
        }
        /// <summary>
        /// Returns true if DepartureArrivalDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of DepartureArrivalDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepartureArrivalDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Terminal == input.Terminal ||
                    (this.Terminal != null &&
                    this.Terminal.Equals(input.Terminal))
                ) && base.Equals(input) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Terminal != null)
                    hashCode = hashCode * 59 + this.Terminal.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Terminal (string) maxLength
            if(this.Terminal != null && this.Terminal.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Terminal, length must be less than 4096.", new [] { "Terminal" });
            }
            // Terminal (string) pattern
            Regex regexTerminal = new Regex(@"([0-9a-zA-Z]+)?", RegexOptions.CultureInvariant);
            if (false == regexTerminal.Match(this.Terminal).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Terminal, must match a pattern of " + regexTerminal, new [] { "Terminal" });
            }
            // Country (string) pattern
            Regex regexCountry = new Regex(@"[a-zA-Z]{2}", RegexOptions.CultureInvariant);
            if (false == regexCountry.Match(this.Country).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, must match a pattern of " + regexCountry, new [] { "Country" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// DepartureDetail
    /// </summary>
    [DataContract]
    public partial class DepartureDetail : Departure,  IEquatable<DepartureDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartureDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DepartureDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartureDetail" /> class.
        /// </summary>
        /// <param name="terminal">Assigned Type: c-0400:StringAlphaNumeric.</param>
        /// <param name="country">Assigned Type: c-0400:CountryCodeISO.</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public DepartureDetail(string terminal = default(string), string country = default(string), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "DepartureDetail", string location = default(string), DateTime? date = default(DateTime?), string time = default(string), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, location, date, time, extensionPointSummary)
        {
            this.Terminal = terminal;
            this.Country = country;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// Assigned Type: c-0400:StringAlphaNumeric
        /// </summary>
        /// <value>Assigned Type: c-0400:StringAlphaNumeric</value>
        [DataMember(Name="terminal", EmitDefaultValue=false)]
        public string Terminal { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CountryCodeISO
        /// </summary>
        /// <value>Assigned Type: c-0400:CountryCodeISO</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DepartureDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Terminal: ").Append(Terminal).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DepartureDetail);
        }
        /// <summary>
        /// Returns true if DepartureDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of DepartureDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepartureDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Terminal == input.Terminal ||
                    (this.Terminal != null &&
                    this.Terminal.Equals(input.Terminal))
                ) && base.Equals(input) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Terminal != null)
                    hashCode = hashCode * 59 + this.Terminal.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Terminal (string) maxLength
            if(this.Terminal != null && this.Terminal.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Terminal, length must be less than 4096.", new [] { "Terminal" });
            }
            // Terminal (string) pattern
            Regex regexTerminal = new Regex(@"([0-9a-zA-Z]+)?", RegexOptions.CultureInvariant);
            if (false == regexTerminal.Match(this.Terminal).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Terminal, must match a pattern of " + regexTerminal, new [] { "Terminal" });
            }
            // Country (string) pattern
            Regex regexCountry = new Regex(@"[a-zA-Z]{2}", RegexOptions.CultureInvariant);
            if (false == regexCountry.Match(this.Country).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, must match a pattern of " + regexCountry, new [] { "Country" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Error
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(ErrorDetail), "ErrorDetail")]
    public partial class Error :  IEquatable<Error>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Error() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="statusCode">Http standard response code (required).</param>
        /// <param name="message">TODO - \\nTravelport standardized error/warning text. May contain parameters, and include which specific part of the request did not work and why. Get standardized message list, with parameters if appropriate, from ?????????????????????.</param>
        /// <param name="nameValuePair">nameValuePair.</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public Error(string type = default(string), int? statusCode = default(int?), string message = default(string), List<NameValuePair> nameValuePair = default(List<NameValuePair>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Error and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "statusCode" is required (not null)
            if (statusCode == null)
            {
                throw new InvalidDataException("statusCode is a required property for Error and cannot be null");
            }
            else
            {
                this.StatusCode = statusCode;
            }
            this.Message = message;
            this.NameValuePair = nameValuePair;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Http standard response code
        /// </summary>
        /// <value>Http standard response code</value>
        [DataMember(Name="StatusCode", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }
        /// <summary>
        /// TODO - \\nTravelport standardized error/warning text. May contain parameters, and include which specific part of the request did not work and why. Get standardized message list, with parameters if appropriate, from ?????????????????????
        /// </summary>
        /// <value>TODO - \\nTravelport standardized error/warning text. May contain parameters, and include which specific part of the request did not work and why. Get standardized message list, with parameters if appropriate, from ?????????????????????</value>
        [DataMember(Name="Message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Gets or Sets NameValuePair
        /// </summary>
        [DataMember(Name="NameValuePair", EmitDefaultValue=false)]
        public List<NameValuePair> NameValuePair { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  NameValuePair: ").Append(NameValuePair).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Error);
        }
        /// <summary>
        /// Returns true if Error instances are equal
        /// </summary>
        /// <param name="input">Instance of Error to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Error input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.NameValuePair == input.NameValuePair ||
                    this.NameValuePair != null &&
                    this.NameValuePair.SequenceEqual(input.NameValuePair)
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.NameValuePair != null)
                    hashCode = hashCode * 59 + this.NameValuePair.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Message (string) maxLength
            if(this.Message != null && this.Message.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be less than 4096.", new [] { "Message" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ErrorDetail
    /// </summary>
    [DataContract]
    public partial class ErrorDetail : Error,  IEquatable<ErrorDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ErrorDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorDetail" /> class.
        /// </summary>
        /// <param name="sourceID">Travelport assigned source host or core identifier (required).</param>
        /// <param name="sourceCode">The error or warning code returned by the core/host system.</param>
        /// <param name="sourceDescription">The error message as it is returned from the originating core/host system.</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public ErrorDetail(string sourceID = default(string), string sourceCode = default(string), string sourceDescription = default(string), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "ErrorDetail", int? statusCode = default(int?), string message = default(string), List<NameValuePair> nameValuePair = default(List<NameValuePair>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, statusCode, message, nameValuePair, extensionPointSummary)
        {
            // to ensure "sourceID" is required (not null)
            if (sourceID == null)
            {
                throw new InvalidDataException("sourceID is a required property for ErrorDetail and cannot be null");
            }
            else
            {
                this.SourceID = sourceID;
            }
            this.SourceCode = sourceCode;
            this.SourceDescription = sourceDescription;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// Travelport assigned source host or core identifier
        /// </summary>
        /// <value>Travelport assigned source host or core identifier</value>
        [DataMember(Name="SourceID", EmitDefaultValue=false)]
        public string SourceID { get; set; }
        /// <summary>
        /// The error or warning code returned by the core/host system
        /// </summary>
        /// <value>The error or warning code returned by the core/host system</value>
        [DataMember(Name="SourceCode", EmitDefaultValue=false)]
        public string SourceCode { get; set; }
        /// <summary>
        /// The error message as it is returned from the originating core/host system
        /// </summary>
        /// <value>The error message as it is returned from the originating core/host system</value>
        [DataMember(Name="SourceDescription", EmitDefaultValue=false)]
        public string SourceDescription { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  SourceID: ").Append(SourceID).Append("\n");
            sb.Append("  SourceCode: ").Append(SourceCode).Append("\n");
            sb.Append("  SourceDescription: ").Append(SourceDescription).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ErrorDetail);
        }
        /// <summary>
        /// Returns true if ErrorDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ErrorDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.SourceID == input.SourceID ||
                    (this.SourceID != null &&
                    this.SourceID.Equals(input.SourceID))
                ) && base.Equals(input) && 
                (
                    this.SourceCode == input.SourceCode ||
                    (this.SourceCode != null &&
                    this.SourceCode.Equals(input.SourceCode))
                ) && base.Equals(input) && 
                (
                    this.SourceDescription == input.SourceDescription ||
                    (this.SourceDescription != null &&
                    this.SourceDescription.Equals(input.SourceDescription))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.SourceID != null)
                    hashCode = hashCode * 59 + this.SourceID.GetHashCode();
                if (this.SourceCode != null)
                    hashCode = hashCode * 59 + this.SourceCode.GetHashCode();
                if (this.SourceDescription != null)
                    hashCode = hashCode * 59 + this.SourceDescription.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // SourceID (string) maxLength
            if(this.SourceID != null && this.SourceID.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceID, length must be less than 128.", new [] { "SourceID" });
            }
            // SourceCode (string) maxLength
            if(this.SourceCode != null && this.SourceCode.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceCode, length must be less than 32.", new [] { "SourceCode" });
            }
            // SourceDescription (string) maxLength
            if(this.SourceDescription != null && this.SourceDescription.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceDescription, length must be less than 4096.", new [] { "SourceDescription" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ErrorResponse
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class ErrorResponse :  IEquatable<ErrorResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ErrorResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorResponse" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="transactionId">Unique transaction, correlation or tracking id for a single request and reply i.e. for a single transaction. Should be a 128 bit GUID format. Also know as E2ETrackingId..</param>
        /// <param name="traceId">Optional ID for internal child transactions created for processing a single request (single transaction). Should be a 128 bit GUID format. Also known as ChildTrackingId..</param>
        /// <param name="result">Assigned Type: c-0400:Result.</param>
        /// <param name="identifier">Assigned Type: c-0400:Identifier.</param>
        /// <param name="nextSteps">Assigned Type: c-0400:NextSteps.</param>
        /// <param name="referenceList">referenceList.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public ErrorResponse(string type = default(string), string transactionId = default(string), string traceId = default(string), Result result = default(Result), Identifier identifier = default(Identifier), NextSteps nextSteps = default(NextSteps), List<ReferenceList> referenceList = default(List<ReferenceList>), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ErrorResponse and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.TransactionId = transactionId;
            this.TraceId = traceId;
            this.Result = result;
            this.Identifier = identifier;
            this.NextSteps = nextSteps;
            this.ReferenceList = referenceList;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Unique transaction, correlation or tracking id for a single request and reply i.e. for a single transaction. Should be a 128 bit GUID format. Also know as E2ETrackingId.
        /// </summary>
        /// <value>Unique transaction, correlation or tracking id for a single request and reply i.e. for a single transaction. Should be a 128 bit GUID format. Also know as E2ETrackingId.</value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }
        /// <summary>
        /// Optional ID for internal child transactions created for processing a single request (single transaction). Should be a 128 bit GUID format. Also known as ChildTrackingId.
        /// </summary>
        /// <value>Optional ID for internal child transactions created for processing a single request (single transaction). Should be a 128 bit GUID format. Also known as ChildTrackingId.</value>
        [DataMember(Name="traceId", EmitDefaultValue=false)]
        public string TraceId { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Result
        /// </summary>
        /// <value>Assigned Type: c-0400:Result</value>
        [DataMember(Name="Result", EmitDefaultValue=false)]
        public Result Result { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Identifier
        /// </summary>
        /// <value>Assigned Type: c-0400:Identifier</value>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public Identifier Identifier { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:NextSteps
        /// </summary>
        /// <value>Assigned Type: c-0400:NextSteps</value>
        [DataMember(Name="NextSteps", EmitDefaultValue=false)]
        public NextSteps NextSteps { get; set; }
        /// <summary>
        /// Gets or Sets ReferenceList
        /// </summary>
        [DataMember(Name="ReferenceList", EmitDefaultValue=false)]
        public List<ReferenceList> ReferenceList { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorResponse {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  TraceId: ").Append(TraceId).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  NextSteps: ").Append(NextSteps).Append("\n");
            sb.Append("  ReferenceList: ").Append(ReferenceList).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ErrorResponse);
        }
        /// <summary>
        /// Returns true if ErrorResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ErrorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorResponse input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.TraceId == input.TraceId ||
                    (this.TraceId != null &&
                    this.TraceId.Equals(input.TraceId))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.NextSteps == input.NextSteps ||
                    (this.NextSteps != null &&
                    this.NextSteps.Equals(input.NextSteps))
                ) && 
                (
                    this.ReferenceList == input.ReferenceList ||
                    this.ReferenceList != null &&
                    this.ReferenceList.SequenceEqual(input.ReferenceList)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.TraceId != null)
                    hashCode = hashCode * 59 + this.TraceId.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.NextSteps != null)
                    hashCode = hashCode * 59 + this.NextSteps.GetHashCode();
                if (this.ReferenceList != null)
                    hashCode = hashCode * 59 + this.ReferenceList.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ErrorWarning
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(ErrorWarningDetail), "ErrorWarningDetail")]
    public partial class ErrorWarning :  IEquatable<ErrorWarning>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorWarning" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ErrorWarning() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorWarning" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="statusCode">Http standard response code (required).</param>
        /// <param name="message">TODO - \\nTravelport standardized error/warning text. May contain parameters, and include which specific part of the request did not work and why. Get standardized message list, with parameters if appropriate, from ?????????????????????.</param>
        /// <param name="nameValuePair">nameValuePair.</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public ErrorWarning(string type = default(string), int? statusCode = default(int?), string message = default(string), List<NameValuePair> nameValuePair = default(List<NameValuePair>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ErrorWarning and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "statusCode" is required (not null)
            if (statusCode == null)
            {
                throw new InvalidDataException("statusCode is a required property for ErrorWarning and cannot be null");
            }
            else
            {
                this.StatusCode = statusCode;
            }
            this.Message = message;
            this.NameValuePair = nameValuePair;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Http standard response code
        /// </summary>
        /// <value>Http standard response code</value>
        [DataMember(Name="StatusCode", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }
        /// <summary>
        /// TODO - \\nTravelport standardized error/warning text. May contain parameters, and include which specific part of the request did not work and why. Get standardized message list, with parameters if appropriate, from ?????????????????????
        /// </summary>
        /// <value>TODO - \\nTravelport standardized error/warning text. May contain parameters, and include which specific part of the request did not work and why. Get standardized message list, with parameters if appropriate, from ?????????????????????</value>
        [DataMember(Name="Message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Gets or Sets NameValuePair
        /// </summary>
        [DataMember(Name="NameValuePair", EmitDefaultValue=false)]
        public List<NameValuePair> NameValuePair { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorWarning {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  NameValuePair: ").Append(NameValuePair).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ErrorWarning);
        }
        /// <summary>
        /// Returns true if ErrorWarning instances are equal
        /// </summary>
        /// <param name="input">Instance of ErrorWarning to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorWarning input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.NameValuePair == input.NameValuePair ||
                    this.NameValuePair != null &&
                    this.NameValuePair.SequenceEqual(input.NameValuePair)
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.NameValuePair != null)
                    hashCode = hashCode * 59 + this.NameValuePair.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Message (string) maxLength
            if(this.Message != null && this.Message.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be less than 4096.", new [] { "Message" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ErrorWarningDetail
    /// </summary>
    [DataContract]
    public partial class ErrorWarningDetail : ErrorWarning,  IEquatable<ErrorWarningDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorWarningDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ErrorWarningDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorWarningDetail" /> class.
        /// </summary>
        /// <param name="sourceID">Travelport assigned source host or core identifier (required).</param>
        /// <param name="sourceCode">The error or warning code returned by the core/host system.</param>
        /// <param name="sourceDescription">The error message as it is returned from the originating core/host system.</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public ErrorWarningDetail(string sourceID = default(string), string sourceCode = default(string), string sourceDescription = default(string), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "ErrorWarningDetail", int? statusCode = default(int?), string message = default(string), List<NameValuePair> nameValuePair = default(List<NameValuePair>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, statusCode, message, nameValuePair, extensionPointSummary)
        {
            // to ensure "sourceID" is required (not null)
            if (sourceID == null)
            {
                throw new InvalidDataException("sourceID is a required property for ErrorWarningDetail and cannot be null");
            }
            else
            {
                this.SourceID = sourceID;
            }
            this.SourceCode = sourceCode;
            this.SourceDescription = sourceDescription;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// Travelport assigned source host or core identifier
        /// </summary>
        /// <value>Travelport assigned source host or core identifier</value>
        [DataMember(Name="SourceID", EmitDefaultValue=false)]
        public string SourceID { get; set; }
        /// <summary>
        /// The error or warning code returned by the core/host system
        /// </summary>
        /// <value>The error or warning code returned by the core/host system</value>
        [DataMember(Name="SourceCode", EmitDefaultValue=false)]
        public string SourceCode { get; set; }
        /// <summary>
        /// The error message as it is returned from the originating core/host system
        /// </summary>
        /// <value>The error message as it is returned from the originating core/host system</value>
        [DataMember(Name="SourceDescription", EmitDefaultValue=false)]
        public string SourceDescription { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorWarningDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  SourceID: ").Append(SourceID).Append("\n");
            sb.Append("  SourceCode: ").Append(SourceCode).Append("\n");
            sb.Append("  SourceDescription: ").Append(SourceDescription).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ErrorWarningDetail);
        }
        /// <summary>
        /// Returns true if ErrorWarningDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ErrorWarningDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorWarningDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.SourceID == input.SourceID ||
                    (this.SourceID != null &&
                    this.SourceID.Equals(input.SourceID))
                ) && base.Equals(input) && 
                (
                    this.SourceCode == input.SourceCode ||
                    (this.SourceCode != null &&
                    this.SourceCode.Equals(input.SourceCode))
                ) && base.Equals(input) && 
                (
                    this.SourceDescription == input.SourceDescription ||
                    (this.SourceDescription != null &&
                    this.SourceDescription.Equals(input.SourceDescription))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.SourceID != null)
                    hashCode = hashCode * 59 + this.SourceID.GetHashCode();
                if (this.SourceCode != null)
                    hashCode = hashCode * 59 + this.SourceCode.GetHashCode();
                if (this.SourceDescription != null)
                    hashCode = hashCode * 59 + this.SourceDescription.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // SourceID (string) maxLength
            if(this.SourceID != null && this.SourceID.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceID, length must be less than 128.", new [] { "SourceID" });
            }
            // SourceCode (string) maxLength
            if(this.SourceCode != null && this.SourceCode.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceCode, length must be less than 32.", new [] { "SourceCode" });
            }
            // SourceDescription (string) maxLength
            if(this.SourceDescription != null && this.SourceDescription.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceDescription, length must be less than 4096.", new [] { "SourceDescription" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Defines ExcludeGroundTypeEnum
    /// </summary>
    public enum ExcludeGroundTypeEnum
    {
        /// <summary>
        /// Enum Train for value: Train
        /// </summary>
        Train = Train,
        /// <summary>
        /// Enum All for value: All
        /// </summary>
        All = All
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ExtensionPoint
    /// </summary>
    [DataContract]
    public partial class ExtensionPoint :  IEquatable<ExtensionPoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionPoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ExtensionPoint()
        {
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtensionPoint {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtensionPoint);
        }
        /// <summary>
        /// Returns true if ExtensionPoint instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtensionPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionPoint input)
        {
            if (input == null)
                return false;
            return false;
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ExtensionPointChoice
    /// </summary>
    [DataContract]
    public partial class ExtensionPointChoice :  IEquatable<ExtensionPointChoice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionPointChoice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ExtensionPointChoice()
        {
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtensionPointChoice {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtensionPointChoice);
        }
        /// <summary>
        /// Returns true if ExtensionPointChoice instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtensionPointChoice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionPointChoice input)
        {
            if (input == null)
                return false;
            return false;
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ExtensionPointCustom
    /// </summary>
    [DataContract]
    public partial class ExtensionPointCustom :  IEquatable<ExtensionPointCustom>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionPointCustom" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ExtensionPointCustom()
        {
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtensionPointCustom {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtensionPointCustom);
        }
        /// <summary>
        /// Returns true if ExtensionPointCustom instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtensionPointCustom to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionPointCustom input)
        {
            if (input == null)
                return false;
            return false;
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ExtensionPointDetail
    /// </summary>
    [DataContract]
    public partial class ExtensionPointDetail :  IEquatable<ExtensionPointDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionPointDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ExtensionPointDetail()
        {
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtensionPointDetail {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtensionPointDetail);
        }
        /// <summary>
        /// Returns true if ExtensionPointDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtensionPointDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionPointDetail input)
        {
            if (input == null)
                return false;
            return false;
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ExtensionPointQuery
    /// </summary>
    [DataContract]
    public partial class ExtensionPointQuery :  IEquatable<ExtensionPointQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionPointQuery" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ExtensionPointQuery()
        {
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtensionPointQuery {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtensionPointQuery);
        }
        /// <summary>
        /// Returns true if ExtensionPointQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtensionPointQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionPointQuery input)
        {
            if (input == null)
                return false;
            return false;
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ExtensionPointShared
    /// </summary>
    [DataContract]
    public partial class ExtensionPointShared :  IEquatable<ExtensionPointShared>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionPointShared" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ExtensionPointShared()
        {
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtensionPointShared {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtensionPointShared);
        }
        /// <summary>
        /// Returns true if ExtensionPointShared instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtensionPointShared to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionPointShared input)
        {
            if (input == null)
                return false;
            return false;
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ExtensionPointSummary
    /// </summary>
    [DataContract]
    public partial class ExtensionPointSummary :  IEquatable<ExtensionPointSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionPointSummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ExtensionPointSummary()
        {
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtensionPointSummary {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtensionPointSummary);
        }
        /// <summary>
        /// Returns true if ExtensionPointSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtensionPointSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionPointSummary input)
        {
            if (input == null)
                return false;
            return false;
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ExtensionPointUpdate
    /// </summary>
    [DataContract]
    public partial class ExtensionPointUpdate :  IEquatable<ExtensionPointUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionPointUpdate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public ExtensionPointUpdate()
        {
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtensionPointUpdate {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtensionPointUpdate);
        }
        /// <summary>
        /// Returns true if ExtensionPointUpdate instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtensionPointUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionPointUpdate input)
        {
            if (input == null)
                return false;
            return false;
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// FareBrandText
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(FareBrandTextDetail), "FareBrandTextDetail")]
    public partial class FareBrandText :  IEquatable<FareBrandText>, IValidatableObject
    {
        /// <summary>
        /// The audience targeted for the brand information
        /// </summary>
        /// <value>The audience targeted for the brand information</value>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public BrandTargetEnum? Target { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FareBrandText" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FareBrandText() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FareBrandText" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">Internally referenced id.</param>
        /// <param name="target">The audience targeted for the brand information.</param>
        /// <param name="textFormatted">textFormatted (required).</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public FareBrandText(string type = default(string), string id = default(string), BrandTargetEnum? target = default(BrandTargetEnum?), List<TextFormatted> textFormatted = default(List<TextFormatted>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for FareBrandText and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "textFormatted" is required (not null)
            if (textFormatted == null)
            {
                throw new InvalidDataException("textFormatted is a required property for FareBrandText and cannot be null");
            }
            else
            {
                this.TextFormatted = textFormatted;
            }
            this.Id = id;
            this.Target = target;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Internally referenced id
        /// </summary>
        /// <value>Internally referenced id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets TextFormatted
        /// </summary>
        [DataMember(Name="TextFormatted", EmitDefaultValue=false)]
        public List<TextFormatted> TextFormatted { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FareBrandText {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  TextFormatted: ").Append(TextFormatted).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FareBrandText);
        }
        /// <summary>
        /// Returns true if FareBrandText instances are equal
        /// </summary>
        /// <param name="input">Instance of FareBrandText to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FareBrandText input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.TextFormatted == input.TextFormatted ||
                    this.TextFormatted != null &&
                    this.TextFormatted.SequenceEqual(input.TextFormatted)
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                if (this.TextFormatted != null)
                    hashCode = hashCode * 59 + this.TextFormatted.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// FareBrandTextDetail
    /// </summary>
    [DataContract]
    public partial class FareBrandTextDetail : FareBrandText,  IEquatable<FareBrandTextDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FareBrandTextDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FareBrandTextDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FareBrandTextDetail" /> class.
        /// </summary>
        /// <param name="sequence">The order of the text block, if there are more than one block..</param>
        /// <param name="description">Assigned Type: c-0400:Description.</param>
        /// <param name="image">Assigned Type: c-0400:Image.</param>
        /// <param name="uRL">A URL for this block.</param>
        /// <param name="dateCreateModify">Assigned Type: c-0400:DateCreateModify (required).</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public FareBrandTextDetail(int? sequence = default(int?), string description = default(string), Image image = default(Image), string uRL = default(string), DateCreateModify dateCreateModify = default(DateCreateModify), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "FareBrandTextDetail", string id = default(string), BrandTargetEnum? target = default(BrandTargetEnum?), List<TextFormatted> textFormatted = default(List<TextFormatted>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, id, target, textFormatted, extensionPointSummary)
        {
            // to ensure "dateCreateModify" is required (not null)
            if (dateCreateModify == null)
            {
                throw new InvalidDataException("dateCreateModify is a required property for FareBrandTextDetail and cannot be null");
            }
            else
            {
                this.DateCreateModify = dateCreateModify;
            }
            this.Sequence = sequence;
            this.Description = description;
            this.Image = image;
            this.URL = uRL;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// The order of the text block, if there are more than one block.
        /// </summary>
        /// <value>The order of the text block, if there are more than one block.</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Description
        /// </summary>
        /// <value>Assigned Type: c-0400:Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Image
        /// </summary>
        /// <value>Assigned Type: c-0400:Image</value>
        [DataMember(Name="Image", EmitDefaultValue=false)]
        public Image Image { get; set; }
        /// <summary>
        /// A URL for this block
        /// </summary>
        /// <value>A URL for this block</value>
        [DataMember(Name="URL", EmitDefaultValue=false)]
        public string URL { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:DateCreateModify
        /// </summary>
        /// <value>Assigned Type: c-0400:DateCreateModify</value>
        [DataMember(Name="DateCreateModify", EmitDefaultValue=false)]
        public DateCreateModify DateCreateModify { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FareBrandTextDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  DateCreateModify: ").Append(DateCreateModify).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FareBrandTextDetail);
        }
        /// <summary>
        /// Returns true if FareBrandTextDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of FareBrandTextDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FareBrandTextDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && base.Equals(input) && 
                (
                    this.URL == input.URL ||
                    (this.URL != null &&
                    this.URL.Equals(input.URL))
                ) && base.Equals(input) && 
                (
                    this.DateCreateModify == input.DateCreateModify ||
                    (this.DateCreateModify != null &&
                    this.DateCreateModify.Equals(input.DateCreateModify))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.URL != null)
                    hashCode = hashCode * 59 + this.URL.GetHashCode();
                if (this.DateCreateModify != null)
                    hashCode = hashCode * 59 + this.DateCreateModify.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Defines FareRuleCategoryEnum
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum FareRuleCategoryEnum
    {
        /// <summary>
        /// Enum AdvanceReservationsTicketing for value: AdvanceReservations/Ticketing
        /// </summary>
        [EnumMember(Value = "AdvanceReservations/Ticketing")]
        AdvanceReservationsTicketing = 1,
        /// <summary>
        /// Enum MinimumStay for value: MinimumStay
        /// </summary>
        [EnumMember(Value = "MinimumStay")]
        MinimumStay = 2,
        /// <summary>
        /// Enum MaximumStay for value: MaximumStay
        /// </summary>
        [EnumMember(Value = "MaximumStay")]
        MaximumStay = 3,
        /// <summary>
        /// Enum Stopovers for value: Stopovers
        /// </summary>
        [EnumMember(Value = "Stopovers")]
        Stopovers = 4,
        /// <summary>
        /// Enum Penalties for value: Penalties
        /// </summary>
        [EnumMember(Value = "Penalties")]
        Penalties = 5
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// FareRuleInfo
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(FareRuleInfoStructured), "FareRuleInfoStructured")]
    [JsonSubtypes.KnownSubType(typeof(FareRuleInfoText), "FareRuleInfoText")]
    public partial class FareRuleInfo :  IEquatable<FareRuleInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FareRuleInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FareRuleInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FareRuleInfo" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="flightRefs">The flight segment IDs to which this fare rule applies.</param>
        /// <param name="ruleNumber">Assigned Type: c-0400:StringTiny.</param>
        /// <param name="tariffNumber">Assigned Type: c-0400:StringTiny.</param>
        /// <param name="extensionPointShared">extensionPointShared.</param>
        public FareRuleInfo(string type = default(string), List<string> flightRefs = default(List<string>), string ruleNumber = default(string), string tariffNumber = default(string), ExtensionPointShared extensionPointShared = default(ExtensionPointShared))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for FareRuleInfo and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.FlightRefs = flightRefs;
            this.RuleNumber = ruleNumber;
            this.TariffNumber = tariffNumber;
            this.ExtensionPointShared = extensionPointShared;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// The flight segment IDs to which this fare rule applies
        /// </summary>
        /// <value>The flight segment IDs to which this fare rule applies</value>
        [DataMember(Name="flightRefs", EmitDefaultValue=false)]
        public List<string> FlightRefs { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-0400:StringTiny</value>
        [DataMember(Name="ruleNumber", EmitDefaultValue=false)]
        public string RuleNumber { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-0400:StringTiny</value>
        [DataMember(Name="tariffNumber", EmitDefaultValue=false)]
        public string TariffNumber { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointShared
        /// </summary>
        [DataMember(Name="ExtensionPoint_Shared", EmitDefaultValue=false)]
        public ExtensionPointShared ExtensionPointShared { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FareRuleInfo {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FlightRefs: ").Append(FlightRefs).Append("\n");
            sb.Append("  RuleNumber: ").Append(RuleNumber).Append("\n");
            sb.Append("  TariffNumber: ").Append(TariffNumber).Append("\n");
            sb.Append("  ExtensionPointShared: ").Append(ExtensionPointShared).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FareRuleInfo);
        }
        /// <summary>
        /// Returns true if FareRuleInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of FareRuleInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FareRuleInfo input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FlightRefs == input.FlightRefs ||
                    this.FlightRefs != null &&
                    this.FlightRefs.SequenceEqual(input.FlightRefs)
                ) && 
                (
                    this.RuleNumber == input.RuleNumber ||
                    (this.RuleNumber != null &&
                    this.RuleNumber.Equals(input.RuleNumber))
                ) && 
                (
                    this.TariffNumber == input.TariffNumber ||
                    (this.TariffNumber != null &&
                    this.TariffNumber.Equals(input.TariffNumber))
                ) && 
                (
                    this.ExtensionPointShared == input.ExtensionPointShared ||
                    (this.ExtensionPointShared != null &&
                    this.ExtensionPointShared.Equals(input.ExtensionPointShared))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FlightRefs != null)
                    hashCode = hashCode * 59 + this.FlightRefs.GetHashCode();
                if (this.RuleNumber != null)
                    hashCode = hashCode * 59 + this.RuleNumber.GetHashCode();
                if (this.TariffNumber != null)
                    hashCode = hashCode * 59 + this.TariffNumber.GetHashCode();
                if (this.ExtensionPointShared != null)
                    hashCode = hashCode * 59 + this.ExtensionPointShared.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // RuleNumber (string) maxLength
            if(this.RuleNumber != null && this.RuleNumber.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleNumber, length must be less than 32.", new [] { "RuleNumber" });
            }
            // TariffNumber (string) maxLength
            if(this.TariffNumber != null && this.TariffNumber.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TariffNumber, length must be less than 32.", new [] { "TariffNumber" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// FareRuleInfoStructured
    /// </summary>
    [DataContract]
    public partial class FareRuleInfoStructured : FareRuleInfo,  IEquatable<FareRuleInfoStructured>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FareRuleInfoStructured" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FareRuleInfoStructured() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FareRuleInfoStructured" /> class.
        /// </summary>
        /// <param name="penalties">penalties.</param>
        /// <param name="minimumStay">minimumStay.</param>
        /// <param name="maximumStay">maximumStay.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public FareRuleInfoStructured(List<Penalties> penalties = default(List<Penalties>), List<MinimumStay> minimumStay = default(List<MinimumStay>), List<MaximumStay> maximumStay = default(List<MaximumStay>), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "FareRuleInfoStructured", List<string> flightRefs = default(List<string>), string ruleNumber = default(string), string tariffNumber = default(string), ExtensionPointShared extensionPointShared = default(ExtensionPointShared)) : base(type, flightRefs, ruleNumber, tariffNumber, extensionPointShared)
        {
            this.Penalties = penalties;
            this.MinimumStay = minimumStay;
            this.MaximumStay = maximumStay;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Penalties
        /// </summary>
        [DataMember(Name="Penalties", EmitDefaultValue=false)]
        public List<Penalties> Penalties { get; set; }
        /// <summary>
        /// Gets or Sets MinimumStay
        /// </summary>
        [DataMember(Name="MinimumStay", EmitDefaultValue=false)]
        public List<MinimumStay> MinimumStay { get; set; }
        /// <summary>
        /// Gets or Sets MaximumStay
        /// </summary>
        [DataMember(Name="MaximumStay", EmitDefaultValue=false)]
        public List<MaximumStay> MaximumStay { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FareRuleInfoStructured {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Penalties: ").Append(Penalties).Append("\n");
            sb.Append("  MinimumStay: ").Append(MinimumStay).Append("\n");
            sb.Append("  MaximumStay: ").Append(MaximumStay).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FareRuleInfoStructured);
        }
        /// <summary>
        /// Returns true if FareRuleInfoStructured instances are equal
        /// </summary>
        /// <param name="input">Instance of FareRuleInfoStructured to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FareRuleInfoStructured input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Penalties == input.Penalties ||
                    this.Penalties != null &&
                    this.Penalties.SequenceEqual(input.Penalties)
                ) && base.Equals(input) && 
                (
                    this.MinimumStay == input.MinimumStay ||
                    this.MinimumStay != null &&
                    this.MinimumStay.SequenceEqual(input.MinimumStay)
                ) && base.Equals(input) && 
                (
                    this.MaximumStay == input.MaximumStay ||
                    this.MaximumStay != null &&
                    this.MaximumStay.SequenceEqual(input.MaximumStay)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Penalties != null)
                    hashCode = hashCode * 59 + this.Penalties.GetHashCode();
                if (this.MinimumStay != null)
                    hashCode = hashCode * 59 + this.MinimumStay.GetHashCode();
                if (this.MaximumStay != null)
                    hashCode = hashCode * 59 + this.MaximumStay.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// FareRuleInfoText
    /// </summary>
    [DataContract]
    public partial class FareRuleInfoText : FareRuleInfo,  IEquatable<FareRuleInfoText>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FareRuleInfoText" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FareRuleInfoText() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FareRuleInfoText" /> class.
        /// </summary>
        /// <param name="fareRuleText">fareRuleText (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public FareRuleInfoText(List<FareRuleText> fareRuleText = default(List<FareRuleText>), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "FareRuleInfoText", List<string> flightRefs = default(List<string>), string ruleNumber = default(string), string tariffNumber = default(string), ExtensionPointShared extensionPointShared = default(ExtensionPointShared)) : base(type, flightRefs, ruleNumber, tariffNumber, extensionPointShared)
        {
            // to ensure "fareRuleText" is required (not null)
            if (fareRuleText == null)
            {
                throw new InvalidDataException("fareRuleText is a required property for FareRuleInfoText and cannot be null");
            }
            else
            {
                this.FareRuleText = fareRuleText;
            }
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets FareRuleText
        /// </summary>
        [DataMember(Name="FareRuleText", EmitDefaultValue=false)]
        public List<FareRuleText> FareRuleText { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FareRuleInfoText {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  FareRuleText: ").Append(FareRuleText).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FareRuleInfoText);
        }
        /// <summary>
        /// Returns true if FareRuleInfoText instances are equal
        /// </summary>
        /// <param name="input">Instance of FareRuleInfoText to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FareRuleInfoText input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.FareRuleText == input.FareRuleText ||
                    this.FareRuleText != null &&
                    this.FareRuleText.SequenceEqual(input.FareRuleText)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.FareRuleText != null)
                    hashCode = hashCode * 59 + this.FareRuleText.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Defines FareRulesEnum
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum FareRulesEnum
    {
        /// <summary>
        /// Enum TextShort for value: TextShort
        /// </summary>
        [EnumMember(Value = "TextShort")]
        TextShort = 1,
        /// <summary>
        /// Enum TextLong for value: TextLong
        /// </summary>
        [EnumMember(Value = "TextLong")]
        TextLong = 2,
        /// <summary>
        /// Enum Structured for value: Structured
        /// </summary>
        [EnumMember(Value = "Structured")]
        Structured = 3
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Text describing this fare rule
    /// </summary>
    [DataContract]
    public partial class FareRuleText :  IEquatable<FareRuleText>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FareRuleText" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="name">Assigned Type: c-0400:StringTiny.</param>
        public FareRuleText(string value = default(string), string name = default(string))
        {
            this.Value = value;
            this.Name = name;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-0400:StringTiny</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FareRuleText {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FareRuleText);
        }
        /// <summary>
        /// Returns true if FareRuleText instances are equal
        /// </summary>
        /// <param name="input">Instance of FareRuleText to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FareRuleText input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 4096.", new [] { "Value" });
            }
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 32.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// FareSelection
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(FareSelectionDetail), "FareSelectionDetail")]
    public partial class FareSelection :  IEquatable<FareSelection>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether only public fares\\n                        should be returned or specific type of private fares
        /// </summary>
        /// <value>Indicates whether only public fares\\n                        should be returned or specific type of private fares</value>
        [DataMember(Name="fareType", EmitDefaultValue=false)]
        public FaresFilterEnum? FareType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FareSelection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FareSelection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FareSelection" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="fareType">Indicates whether only public fares\\n                        should be returned or specific type of private fares.</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public FareSelection(string type = default(string), FaresFilterEnum? fareType = default(FaresFilterEnum?), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for FareSelection and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.FareType = fareType;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FareSelection {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FareType: ").Append(FareType).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FareSelection);
        }
        /// <summary>
        /// Returns true if FareSelection instances are equal
        /// </summary>
        /// <param name="input">Instance of FareSelection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FareSelection input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FareType == input.FareType ||
                    (this.FareType != null &&
                    this.FareType.Equals(input.FareType))
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FareType != null)
                    hashCode = hashCode * 59 + this.FareType.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// FareSelectionDetail
    /// </summary>
    [DataContract]
    public partial class FareSelectionDetail : FareSelection,  IEquatable<FareSelectionDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FareSelectionDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FareSelectionDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FareSelectionDetail" /> class.
        /// </summary>
        /// <param name="validatingCarrier">Assigned Type: c-0400:AirlineCode (required).</param>
        /// <param name="overrideCarrier">Assigned Type: c-0400:AirlineCode (required).</param>
        /// <param name="prohibitMinStayFaresInd">If present and true, fares with minimum stays will not be returned.</param>
        /// <param name="prohibitMaxStayFaresInd">If present and true, fares with maximum stays will not be returned.</param>
        /// <param name="refundableOnlyInd">If present and true, only refundable fares will be returned.</param>
        /// <param name="prohibitAdvancePurchaseFaresInd">If present and true, fares with advance purchase requirements will not be returned.</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public FareSelectionDetail(string validatingCarrier = default(string), string overrideCarrier = default(string), bool? prohibitMinStayFaresInd = default(bool?), bool? prohibitMaxStayFaresInd = default(bool?), bool? refundableOnlyInd = default(bool?), bool? prohibitAdvancePurchaseFaresInd = default(bool?), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "FareSelectionDetail", FaresFilterEnum? fareType = default(FaresFilterEnum?), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, fareType, extensionPointSummary)
        {
            // to ensure "validatingCarrier" is required (not null)
            if (validatingCarrier == null)
            {
                throw new InvalidDataException("validatingCarrier is a required property for FareSelectionDetail and cannot be null");
            }
            else
            {
                this.ValidatingCarrier = validatingCarrier;
            }
            // to ensure "overrideCarrier" is required (not null)
            if (overrideCarrier == null)
            {
                throw new InvalidDataException("overrideCarrier is a required property for FareSelectionDetail and cannot be null");
            }
            else
            {
                this.OverrideCarrier = overrideCarrier;
            }
            this.ProhibitMinStayFaresInd = prohibitMinStayFaresInd;
            this.ProhibitMaxStayFaresInd = prohibitMaxStayFaresInd;
            this.RefundableOnlyInd = refundableOnlyInd;
            this.ProhibitAdvancePurchaseFaresInd = prohibitAdvancePurchaseFaresInd;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// Assigned Type: c-0400:AirlineCode
        /// </summary>
        /// <value>Assigned Type: c-0400:AirlineCode</value>
        [DataMember(Name="validatingCarrier", EmitDefaultValue=false)]
        public string ValidatingCarrier { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:AirlineCode
        /// </summary>
        /// <value>Assigned Type: c-0400:AirlineCode</value>
        [DataMember(Name="overrideCarrier", EmitDefaultValue=false)]
        public string OverrideCarrier { get; set; }
        /// <summary>
        /// If present and true, fares with minimum stays will not be returned
        /// </summary>
        /// <value>If present and true, fares with minimum stays will not be returned</value>
        [DataMember(Name="prohibitMinStayFaresInd", EmitDefaultValue=false)]
        public bool? ProhibitMinStayFaresInd { get; set; }
        /// <summary>
        /// If present and true, fares with maximum stays will not be returned
        /// </summary>
        /// <value>If present and true, fares with maximum stays will not be returned</value>
        [DataMember(Name="prohibitMaxStayFaresInd", EmitDefaultValue=false)]
        public bool? ProhibitMaxStayFaresInd { get; set; }
        /// <summary>
        /// If present and true, only refundable fares will be returned
        /// </summary>
        /// <value>If present and true, only refundable fares will be returned</value>
        [DataMember(Name="refundableOnlyInd", EmitDefaultValue=false)]
        public bool? RefundableOnlyInd { get; set; }
        /// <summary>
        /// If present and true, fares with advance purchase requirements will not be returned
        /// </summary>
        /// <value>If present and true, fares with advance purchase requirements will not be returned</value>
        [DataMember(Name="prohibitAdvancePurchaseFaresInd", EmitDefaultValue=false)]
        public bool? ProhibitAdvancePurchaseFaresInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FareSelectionDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ValidatingCarrier: ").Append(ValidatingCarrier).Append("\n");
            sb.Append("  OverrideCarrier: ").Append(OverrideCarrier).Append("\n");
            sb.Append("  ProhibitMinStayFaresInd: ").Append(ProhibitMinStayFaresInd).Append("\n");
            sb.Append("  ProhibitMaxStayFaresInd: ").Append(ProhibitMaxStayFaresInd).Append("\n");
            sb.Append("  RefundableOnlyInd: ").Append(RefundableOnlyInd).Append("\n");
            sb.Append("  ProhibitAdvancePurchaseFaresInd: ").Append(ProhibitAdvancePurchaseFaresInd).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FareSelectionDetail);
        }
        /// <summary>
        /// Returns true if FareSelectionDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of FareSelectionDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FareSelectionDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.ValidatingCarrier == input.ValidatingCarrier ||
                    (this.ValidatingCarrier != null &&
                    this.ValidatingCarrier.Equals(input.ValidatingCarrier))
                ) && base.Equals(input) && 
                (
                    this.OverrideCarrier == input.OverrideCarrier ||
                    (this.OverrideCarrier != null &&
                    this.OverrideCarrier.Equals(input.OverrideCarrier))
                ) && base.Equals(input) && 
                (
                    this.ProhibitMinStayFaresInd == input.ProhibitMinStayFaresInd ||
                    (this.ProhibitMinStayFaresInd != null &&
                    this.ProhibitMinStayFaresInd.Equals(input.ProhibitMinStayFaresInd))
                ) && base.Equals(input) && 
                (
                    this.ProhibitMaxStayFaresInd == input.ProhibitMaxStayFaresInd ||
                    (this.ProhibitMaxStayFaresInd != null &&
                    this.ProhibitMaxStayFaresInd.Equals(input.ProhibitMaxStayFaresInd))
                ) && base.Equals(input) && 
                (
                    this.RefundableOnlyInd == input.RefundableOnlyInd ||
                    (this.RefundableOnlyInd != null &&
                    this.RefundableOnlyInd.Equals(input.RefundableOnlyInd))
                ) && base.Equals(input) && 
                (
                    this.ProhibitAdvancePurchaseFaresInd == input.ProhibitAdvancePurchaseFaresInd ||
                    (this.ProhibitAdvancePurchaseFaresInd != null &&
                    this.ProhibitAdvancePurchaseFaresInd.Equals(input.ProhibitAdvancePurchaseFaresInd))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ValidatingCarrier != null)
                    hashCode = hashCode * 59 + this.ValidatingCarrier.GetHashCode();
                if (this.OverrideCarrier != null)
                    hashCode = hashCode * 59 + this.OverrideCarrier.GetHashCode();
                if (this.ProhibitMinStayFaresInd != null)
                    hashCode = hashCode * 59 + this.ProhibitMinStayFaresInd.GetHashCode();
                if (this.ProhibitMaxStayFaresInd != null)
                    hashCode = hashCode * 59 + this.ProhibitMaxStayFaresInd.GetHashCode();
                if (this.RefundableOnlyInd != null)
                    hashCode = hashCode * 59 + this.RefundableOnlyInd.GetHashCode();
                if (this.ProhibitAdvancePurchaseFaresInd != null)
                    hashCode = hashCode * 59 + this.ProhibitAdvancePurchaseFaresInd.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // ValidatingCarrier (string) pattern
            Regex regexValidatingCarrier = new Regex(@"([a-zA-Z0-9]{2,3})", RegexOptions.CultureInvariant);
            if (false == regexValidatingCarrier.Match(this.ValidatingCarrier).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ValidatingCarrier, must match a pattern of " + regexValidatingCarrier, new [] { "ValidatingCarrier" });
            }
            // OverrideCarrier (string) pattern
            Regex regexOverrideCarrier = new Regex(@"([a-zA-Z0-9]{2,3})", RegexOptions.CultureInvariant);
            if (false == regexOverrideCarrier.Match(this.OverrideCarrier).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OverrideCarrier, must match a pattern of " + regexOverrideCarrier, new [] { "OverrideCarrier" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// REVIEW: Defines the type of fares to return (Only public fares, Only private fares, Only agency private fares, Only\\n                airline private fares or all fares)
    /// </summary>
    /// <value>REVIEW: Defines the type of fares to return (Only public fares, Only private fares, Only agency private fares, Only\\n                airline private fares or all fares)</value>
    public enum FaresFilterEnum
    {
        /// <summary>
        /// Enum PublicFaresOnly for value: PublicFaresOnly
        /// </summary>
        PublicFaresOnly = PublicFaresOnly,
        /// <summary>
        /// Enum PrivateFaresOnly for value: PrivateFaresOnly
        /// </summary>
        PrivateFaresOnly = PrivateFaresOnly,
        /// <summary>
        /// Enum AgencyPrivateFaresOnly for value: AgencyPrivateFaresOnly
        /// </summary>
        AgencyPrivateFaresOnly = AgencyPrivateFaresOnly,
        /// <summary>
        /// Enum AirlinePrivateFaresOnly for value: AirlinePrivateFaresOnly
        /// </summary>
        AirlinePrivateFaresOnly = AirlinePrivateFaresOnly,
        /// <summary>
        /// Enum PublicAndPrivateFares for value: PublicAndPrivateFares
        /// </summary>
        PublicAndPrivateFares = PublicAndPrivateFares,
        /// <summary>
        /// Enum NetFaresOnly for value: NetFaresOnly
        /// </summary>
        NetFaresOnly = NetFaresOnly,
        /// <summary>
        /// Enum AllFares for value: AllFares
        /// </summary>
        AllFares = AllFares
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Defines the type of fares to return (Only public fares, Only private fares, Only agency private fares, Only\\n airline private fares or all fares)
    /// </summary>
    /// <value>Defines the type of fares to return (Only public fares, Only private fares, Only agency private fares, Only\\n airline private fares or all fares)</value>
    public enum FareTypeEnum
    {
        /// <summary>
        /// Enum PublicFare for value: PublicFare
        /// </summary>
        PublicFare = PublicFare,
        /// <summary>
        /// Enum AgencyPrivateFare for value: AgencyPrivateFare
        /// </summary>
        AgencyPrivateFare = AgencyPrivateFare,
        /// <summary>
        /// Enum AirlinePrivateFare for value: AirlinePrivateFare
        /// </summary>
        AirlinePrivateFare = AirlinePrivateFare,
        /// <summary>
        /// Enum NetFare for value: NetFare
        /// </summary>
        NetFare = NetFare
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// The fee amount with feecode and reporting informtion
    /// </summary>
    [DataContract]
    public partial class Fee :  IEquatable<Fee>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Fee" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="currencyCode">Assigned Type: c-0400:CurrencyCodeISO.</param>
        /// <param name="feeCode">Assigned Type: c-0400:String.</param>
        /// <param name="reportingAuthority">Assigned Type: c-0400:String.</param>
        /// <param name="purpose">Assigned Type: c-0400:String.</param>
        /// <param name="description">Assigned Type: c-0400:StringLong.</param>
        public Fee(float? value = default(float?), string currencyCode = default(string), string feeCode = default(string), string reportingAuthority = default(string), string purpose = default(string), string description = default(string))
        {
            this.Value = value;
            this.CurrencyCode = currencyCode;
            this.FeeCode = feeCode;
            this.ReportingAuthority = reportingAuthority;
            this.Purpose = purpose;
            this.Description = description;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public float? Value { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CurrencyCodeISO
        /// </summary>
        /// <value>Assigned Type: c-0400:CurrencyCodeISO</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:String
        /// </summary>
        /// <value>Assigned Type: c-0400:String</value>
        [DataMember(Name="feeCode", EmitDefaultValue=false)]
        public string FeeCode { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:String
        /// </summary>
        /// <value>Assigned Type: c-0400:String</value>
        [DataMember(Name="reportingAuthority", EmitDefaultValue=false)]
        public string ReportingAuthority { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:String
        /// </summary>
        /// <value>Assigned Type: c-0400:String</value>
        [DataMember(Name="purpose", EmitDefaultValue=false)]
        public string Purpose { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringLong
        /// </summary>
        /// <value>Assigned Type: c-0400:StringLong</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fee {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  FeeCode: ").Append(FeeCode).Append("\n");
            sb.Append("  ReportingAuthority: ").Append(ReportingAuthority).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Fee);
        }
        /// <summary>
        /// Returns true if Fee instances are equal
        /// </summary>
        /// <param name="input">Instance of Fee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fee input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.FeeCode == input.FeeCode ||
                    (this.FeeCode != null &&
                    this.FeeCode.Equals(input.FeeCode))
                ) && 
                (
                    this.ReportingAuthority == input.ReportingAuthority ||
                    (this.ReportingAuthority != null &&
                    this.ReportingAuthority.Equals(input.ReportingAuthority))
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    (this.Purpose != null &&
                    this.Purpose.Equals(input.Purpose))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.FeeCode != null)
                    hashCode = hashCode * 59 + this.FeeCode.GetHashCode();
                if (this.ReportingAuthority != null)
                    hashCode = hashCode * 59 + this.ReportingAuthority.GetHashCode();
                if (this.Purpose != null)
                    hashCode = hashCode * 59 + this.Purpose.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CurrencyCode (string) pattern
            Regex regexCurrencyCode = new Regex(@"[a-zA-Z]{3}", RegexOptions.CultureInvariant);
            if (false == regexCurrencyCode.Match(this.CurrencyCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyCode, must match a pattern of " + regexCurrencyCode, new [] { "CurrencyCode" });
            }
            // FeeCode (string) maxLength
            if(this.FeeCode != null && this.FeeCode.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FeeCode, length must be less than 512.", new [] { "FeeCode" });
            }
            // ReportingAuthority (string) maxLength
            if(this.ReportingAuthority != null && this.ReportingAuthority.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReportingAuthority, length must be less than 512.", new [] { "ReportingAuthority" });
            }
            // Purpose (string) maxLength
            if(this.Purpose != null && this.Purpose.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Purpose, length must be less than 512.", new [] { "Purpose" });
            }
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 4096.", new [] { "Description" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Fees
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(FeesDetail), "FeesDetail")]
    public partial class Fees :  IEquatable<Fees>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Fees" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Fees() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Fees" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="totalFees">A monetary amount, up to 4 decimal places. Decimal place needs to be included..</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public Fees(string type = default(string), float? totalFees = default(float?), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Fees and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.TotalFees = totalFees;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// A monetary amount, up to 4 decimal places. Decimal place needs to be included.
        /// </summary>
        /// <value>A monetary amount, up to 4 decimal places. Decimal place needs to be included.</value>
        [DataMember(Name="TotalFees", EmitDefaultValue=false)]
        public float? TotalFees { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fees {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TotalFees: ").Append(TotalFees).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Fees);
        }
        /// <summary>
        /// Returns true if Fees instances are equal
        /// </summary>
        /// <param name="input">Instance of Fees to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fees input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TotalFees == input.TotalFees ||
                    (this.TotalFees != null &&
                    this.TotalFees.Equals(input.TotalFees))
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TotalFees != null)
                    hashCode = hashCode * 59 + this.TotalFees.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// FeesDetail
    /// </summary>
    [DataContract]
    public partial class FeesDetail : Fees,  IEquatable<FeesDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeesDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeesDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeesDetail" /> class.
        /// </summary>
        /// <param name="fee">fee.</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public FeesDetail(List<Fee> fee = default(List<Fee>), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "FeesDetail", float? totalFees = default(float?), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, totalFees, extensionPointSummary)
        {
            this.Fee = fee;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name="Fee", EmitDefaultValue=false)]
        public List<Fee> Fee { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeesDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeesDetail);
        }
        /// <summary>
        /// Returns true if FeesDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of FeesDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeesDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Fee == input.Fee ||
                    this.Fee != null &&
                    this.Fee.SequenceEqual(input.Fee)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Flight
    /// </summary>
    [DataContract]
    public partial class Flight : FlightID,  IEquatable<Flight>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Flight" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Flight() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Flight" /> class.
        /// </summary>
        /// <param name="distance">Assigned Type: c-0400:NonnegativeInteger.</param>
        /// <param name="stops">Assigned Type: c-0400:NumberSingleDigit.</param>
        /// <param name="duration">Elapsed flight time in minutes.</param>
        /// <param name="carrier">Assigned Type: c-0400:AirlineCode (required).</param>
        /// <param name="number">Assigned Type: c-0400:FlightNumber (required).</param>
        /// <param name="operatingCarrier">Assigned Type: c-0400:AirlineCode.</param>
        /// <param name="operatingCarrierName">Assigned Type: c-0400:StringShort (required).</param>
        /// <param name="equipment">Assigned Type: c-0400:AirEquipCodeIATA.</param>
        /// <param name="departure">Assigned Type: ctar-0400:Departure (required).</param>
        /// <param name="arrival">Assigned Type: ctar-0400:Arrival (required).</param>
        /// <param name="intermediateStop">intermediateStop.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public Flight(int? distance = default(int?), int? stops = default(int?), string duration = default(string), string carrier = default(string), string number = default(string), string operatingCarrier = default(string), string operatingCarrierName = default(string), string equipment = default(string), Departure departure = default(Departure), Arrival arrival = default(Arrival), List<IntermediateStop> intermediateStop = default(List<IntermediateStop>), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "Flight", string id = default(string), string flightRef = default(string), Identifier identifier = default(Identifier)) : base(type, id, flightRef, identifier)
        {
            // to ensure "carrier" is required (not null)
            if (carrier == null)
            {
                throw new InvalidDataException("carrier is a required property for Flight and cannot be null");
            }
            else
            {
                this.Carrier = carrier;
            }
            // to ensure "number" is required (not null)
            if (number == null)
            {
                throw new InvalidDataException("number is a required property for Flight and cannot be null");
            }
            else
            {
                this.Number = number;
            }
            // to ensure "operatingCarrierName" is required (not null)
            if (operatingCarrierName == null)
            {
                throw new InvalidDataException("operatingCarrierName is a required property for Flight and cannot be null");
            }
            else
            {
                this.OperatingCarrierName = operatingCarrierName;
            }
            // to ensure "departure" is required (not null)
            if (departure == null)
            {
                throw new InvalidDataException("departure is a required property for Flight and cannot be null");
            }
            else
            {
                this.Departure = departure;
            }
            // to ensure "arrival" is required (not null)
            if (arrival == null)
            {
                throw new InvalidDataException("arrival is a required property for Flight and cannot be null");
            }
            else
            {
                this.Arrival = arrival;
            }
            this.Distance = distance;
            this.Stops = stops;
            this.Duration = duration;
            this.OperatingCarrier = operatingCarrier;
            this.Equipment = equipment;
            this.IntermediateStop = intermediateStop;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Assigned Type: c-0400:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-0400:NonnegativeInteger</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public int? Distance { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:NumberSingleDigit
        /// </summary>
        /// <value>Assigned Type: c-0400:NumberSingleDigit</value>
        [DataMember(Name="stops", EmitDefaultValue=false)]
        public int? Stops { get; set; }
        /// <summary>
        /// Elapsed flight time in minutes
        /// </summary>
        /// <value>Elapsed flight time in minutes</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:AirlineCode
        /// </summary>
        /// <value>Assigned Type: c-0400:AirlineCode</value>
        [DataMember(Name="carrier", EmitDefaultValue=false)]
        public string Carrier { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:FlightNumber
        /// </summary>
        /// <value>Assigned Type: c-0400:FlightNumber</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:AirlineCode
        /// </summary>
        /// <value>Assigned Type: c-0400:AirlineCode</value>
        [DataMember(Name="operatingCarrier", EmitDefaultValue=false)]
        public string OperatingCarrier { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringShort
        /// </summary>
        /// <value>Assigned Type: c-0400:StringShort</value>
        [DataMember(Name="operatingCarrierName", EmitDefaultValue=false)]
        public string OperatingCarrierName { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:AirEquipCodeIATA
        /// </summary>
        /// <value>Assigned Type: c-0400:AirEquipCodeIATA</value>
        [DataMember(Name="equipment", EmitDefaultValue=false)]
        public string Equipment { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:Departure
        /// </summary>
        /// <value>Assigned Type: ctar-0400:Departure</value>
        [DataMember(Name="Departure", EmitDefaultValue=false)]
        public Departure Departure { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:Arrival
        /// </summary>
        /// <value>Assigned Type: ctar-0400:Arrival</value>
        [DataMember(Name="Arrival", EmitDefaultValue=false)]
        public Arrival Arrival { get; set; }
        /// <summary>
        /// Gets or Sets IntermediateStop
        /// </summary>
        [DataMember(Name="IntermediateStop", EmitDefaultValue=false)]
        public List<IntermediateStop> IntermediateStop { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Flight {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  Stops: ").Append(Stops).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OperatingCarrier: ").Append(OperatingCarrier).Append("\n");
            sb.Append("  OperatingCarrierName: ").Append(OperatingCarrierName).Append("\n");
            sb.Append("  Equipment: ").Append(Equipment).Append("\n");
            sb.Append("  Departure: ").Append(Departure).Append("\n");
            sb.Append("  Arrival: ").Append(Arrival).Append("\n");
            sb.Append("  IntermediateStop: ").Append(IntermediateStop).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Flight);
        }
        /// <summary>
        /// Returns true if Flight instances are equal
        /// </summary>
        /// <param name="input">Instance of Flight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Flight input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && base.Equals(input) && 
                (
                    this.Stops == input.Stops ||
                    (this.Stops != null &&
                    this.Stops.Equals(input.Stops))
                ) && base.Equals(input) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && base.Equals(input) && 
                (
                    this.Carrier == input.Carrier ||
                    (this.Carrier != null &&
                    this.Carrier.Equals(input.Carrier))
                ) && base.Equals(input) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && base.Equals(input) && 
                (
                    this.OperatingCarrier == input.OperatingCarrier ||
                    (this.OperatingCarrier != null &&
                    this.OperatingCarrier.Equals(input.OperatingCarrier))
                ) && base.Equals(input) && 
                (
                    this.OperatingCarrierName == input.OperatingCarrierName ||
                    (this.OperatingCarrierName != null &&
                    this.OperatingCarrierName.Equals(input.OperatingCarrierName))
                ) && base.Equals(input) && 
                (
                    this.Equipment == input.Equipment ||
                    (this.Equipment != null &&
                    this.Equipment.Equals(input.Equipment))
                ) && base.Equals(input) && 
                (
                    this.Departure == input.Departure ||
                    (this.Departure != null &&
                    this.Departure.Equals(input.Departure))
                ) && base.Equals(input) && 
                (
                    this.Arrival == input.Arrival ||
                    (this.Arrival != null &&
                    this.Arrival.Equals(input.Arrival))
                ) && base.Equals(input) && 
                (
                    this.IntermediateStop == input.IntermediateStop ||
                    this.IntermediateStop != null &&
                    this.IntermediateStop.SequenceEqual(input.IntermediateStop)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.Stops != null)
                    hashCode = hashCode * 59 + this.Stops.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Carrier != null)
                    hashCode = hashCode * 59 + this.Carrier.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.OperatingCarrier != null)
                    hashCode = hashCode * 59 + this.OperatingCarrier.GetHashCode();
                if (this.OperatingCarrierName != null)
                    hashCode = hashCode * 59 + this.OperatingCarrierName.GetHashCode();
                if (this.Equipment != null)
                    hashCode = hashCode * 59 + this.Equipment.GetHashCode();
                if (this.Departure != null)
                    hashCode = hashCode * 59 + this.Departure.GetHashCode();
                if (this.Arrival != null)
                    hashCode = hashCode * 59 + this.Arrival.GetHashCode();
                if (this.IntermediateStop != null)
                    hashCode = hashCode * 59 + this.IntermediateStop.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Distance (int?) minimum
            if(this.Distance < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Distance, must be a value greater than or equal to 0.", new [] { "Distance" });
            }
            // Carrier (string) pattern
            Regex regexCarrier = new Regex(@"([a-zA-Z0-9]{2,3})", RegexOptions.CultureInvariant);
            if (false == regexCarrier.Match(this.Carrier).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Carrier, must match a pattern of " + regexCarrier, new [] { "Carrier" });
            }
            // Number (string) pattern
            Regex regexNumber = new Regex(@"[0-9]{1,4}[A-Z]?|OPEN|ARNK", RegexOptions.CultureInvariant);
            if (false == regexNumber.Match(this.Number).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Number, must match a pattern of " + regexNumber, new [] { "Number" });
            }
            // OperatingCarrier (string) pattern
            Regex regexOperatingCarrier = new Regex(@"([a-zA-Z0-9]{2,3})", RegexOptions.CultureInvariant);
            if (false == regexOperatingCarrier.Match(this.OperatingCarrier).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OperatingCarrier, must match a pattern of " + regexOperatingCarrier, new [] { "OperatingCarrier" });
            }
            // OperatingCarrierName (string) maxLength
            if(this.OperatingCarrierName != null && this.OperatingCarrierName.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OperatingCarrierName, length must be less than 128.", new [] { "OperatingCarrierName" });
            }
            // Equipment (string) pattern
            Regex regexEquipment = new Regex(@"([A-Z0-9]{3})?", RegexOptions.CultureInvariant);
            if (false == regexEquipment.Match(this.Equipment).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Equipment, must match a pattern of " + regexEquipment, new [] { "Equipment" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// FlightID
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(Flight), "Flight")]
    public partial class FlightID :  IEquatable<FlightID>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightID" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlightID() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightID" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">Internal ID.</param>
        /// <param name="flightRef">Reference to a Flight object eslewhere in the message.</param>
        /// <param name="identifier">Assigned Type: c-0400:Identifier.</param>
        public FlightID(string type = default(string), string id = default(string), string flightRef = default(string), Identifier identifier = default(Identifier))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for FlightID and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Id = id;
            this.FlightRef = flightRef;
            this.Identifier = identifier;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Internal ID
        /// </summary>
        /// <value>Internal ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Reference to a Flight object eslewhere in the message
        /// </summary>
        /// <value>Reference to a Flight object eslewhere in the message</value>
        [DataMember(Name="FlightRef", EmitDefaultValue=false)]
        public string FlightRef { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Identifier
        /// </summary>
        /// <value>Assigned Type: c-0400:Identifier</value>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public Identifier Identifier { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightID {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FlightRef: ").Append(FlightRef).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightID);
        }
        /// <summary>
        /// Returns true if FlightID instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightID input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FlightRef == input.FlightRef ||
                    (this.FlightRef != null &&
                    this.FlightRef.Equals(input.FlightRef))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FlightRef != null)
                    hashCode = hashCode * 59 + this.FlightRef.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// FlightProduct
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class FlightProduct :  IEquatable<FlightProduct>, IValidatableObject
    {
        /// <summary>
        /// The cabin
        /// </summary>
        /// <value>The cabin</value>
        [DataMember(Name="cabin", EmitDefaultValue=false)]
        public CabinAirEnum? Cabin { get; set; }
        /// <summary>
        /// Type of fare which has been returned
        /// </summary>
        /// <value>Type of fare which has been returned</value>
        [DataMember(Name="fareType", EmitDefaultValue=false)]
        public FareTypeEnum? FareType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightProduct" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlightProduct() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightProduct" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="segmentSequence">Assigned Type: ctar-0400:SegmentSequenceList (required).</param>
        /// <param name="classOfService">Assigned Type: c-0400:ClassOfService.</param>
        /// <param name="cabin">The cabin.</param>
        /// <param name="fareBasisCode">Assigned Type: c-0400:StringTiny.</param>
        /// <param name="fareType">Type of fare which has been returned.</param>
        /// <param name="brand">Assigned Type: ctbr-0400:Brand.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public FlightProduct(string type = default(string), List<int?> segmentSequence = default(List<int?>), string classOfService = default(string), CabinAirEnum? cabin = default(CabinAirEnum?), string fareBasisCode = default(string), FareTypeEnum? fareType = default(FareTypeEnum?), BrandID brand = default(BrandID), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for FlightProduct and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "segmentSequence" is required (not null)
            if (segmentSequence == null)
            {
                throw new InvalidDataException("segmentSequence is a required property for FlightProduct and cannot be null");
            }
            else
            {
                this.SegmentSequence = segmentSequence;
            }
            this.ClassOfService = classOfService;
            this.Cabin = cabin;
            this.FareBasisCode = fareBasisCode;
            this.FareType = fareType;
            this.Brand = brand;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:SegmentSequenceList
        /// </summary>
        /// <value>Assigned Type: ctar-0400:SegmentSequenceList</value>
        [DataMember(Name="segmentSequence", EmitDefaultValue=false)]
        public List<int?> SegmentSequence { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:ClassOfService
        /// </summary>
        /// <value>Assigned Type: c-0400:ClassOfService</value>
        [DataMember(Name="classOfService", EmitDefaultValue=false)]
        public string ClassOfService { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-0400:StringTiny</value>
        [DataMember(Name="fareBasisCode", EmitDefaultValue=false)]
        public string FareBasisCode { get; set; }
        /// <summary>
        /// Assigned Type: ctbr-0400:Brand
        /// </summary>
        /// <value>Assigned Type: ctbr-0400:Brand</value>
        [DataMember(Name="Brand", EmitDefaultValue=false)]
        public BrandID Brand { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightProduct {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SegmentSequence: ").Append(SegmentSequence).Append("\n");
            sb.Append("  ClassOfService: ").Append(ClassOfService).Append("\n");
            sb.Append("  Cabin: ").Append(Cabin).Append("\n");
            sb.Append("  FareBasisCode: ").Append(FareBasisCode).Append("\n");
            sb.Append("  FareType: ").Append(FareType).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightProduct);
        }
        /// <summary>
        /// Returns true if FlightProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightProduct input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SegmentSequence == input.SegmentSequence ||
                    this.SegmentSequence != null &&
                    this.SegmentSequence.SequenceEqual(input.SegmentSequence)
                ) && 
                (
                    this.ClassOfService == input.ClassOfService ||
                    (this.ClassOfService != null &&
                    this.ClassOfService.Equals(input.ClassOfService))
                ) && 
                (
                    this.Cabin == input.Cabin ||
                    (this.Cabin != null &&
                    this.Cabin.Equals(input.Cabin))
                ) && 
                (
                    this.FareBasisCode == input.FareBasisCode ||
                    (this.FareBasisCode != null &&
                    this.FareBasisCode.Equals(input.FareBasisCode))
                ) && 
                (
                    this.FareType == input.FareType ||
                    (this.FareType != null &&
                    this.FareType.Equals(input.FareType))
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SegmentSequence != null)
                    hashCode = hashCode * 59 + this.SegmentSequence.GetHashCode();
                if (this.ClassOfService != null)
                    hashCode = hashCode * 59 + this.ClassOfService.GetHashCode();
                if (this.Cabin != null)
                    hashCode = hashCode * 59 + this.Cabin.GetHashCode();
                if (this.FareBasisCode != null)
                    hashCode = hashCode * 59 + this.FareBasisCode.GetHashCode();
                if (this.FareType != null)
                    hashCode = hashCode * 59 + this.FareType.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // ClassOfService (string) maxLength
            if(this.ClassOfService != null && this.ClassOfService.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassOfService, length must be less than 2.", new [] { "ClassOfService" });
            }
            // ClassOfService (string) minLength
            if(this.ClassOfService != null && this.ClassOfService.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassOfService, length must be greater than 1.", new [] { "ClassOfService" });
            }
            // ClassOfService (string) pattern
            Regex regexClassOfService = new Regex(@"([a-zA-Z0-9]{1,2})", RegexOptions.CultureInvariant);
            if (false == regexClassOfService.Match(this.ClassOfService).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassOfService, must match a pattern of " + regexClassOfService, new [] { "ClassOfService" });
            }
            // FareBasisCode (string) maxLength
            if(this.FareBasisCode != null && this.FareBasisCode.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FareBasisCode, length must be less than 32.", new [] { "FareBasisCode" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// FlightSegment
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class FlightSegment :  IEquatable<FlightSegment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightSegment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlightSegment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightSegment" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">Local indentifier within a given message for this object..</param>
        /// <param name="sequence">Assigned Type: ctar-0400:SegmentSequence (required).</param>
        /// <param name="connectionDuration">The actual duration (in minutes) between\\n\\tsegments. (required).</param>
        /// <param name="flight">Assigned Type: ctar-0400:Flight (required).</param>
        /// <param name="boundFlightsInd">If present and true, the Segments in this Connection must be sold and cancelled together..</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public FlightSegment(string type = default(string), string id = default(string), int? sequence = default(int?), string connectionDuration = default(string), FlightID flight = default(FlightID), bool? boundFlightsInd = default(bool?), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for FlightSegment and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "sequence" is required (not null)
            if (sequence == null)
            {
                throw new InvalidDataException("sequence is a required property for FlightSegment and cannot be null");
            }
            else
            {
                this.Sequence = sequence;
            }
            // to ensure "connectionDuration" is required (not null)
            if (connectionDuration == null)
            {
                throw new InvalidDataException("connectionDuration is a required property for FlightSegment and cannot be null");
            }
            else
            {
                this.ConnectionDuration = connectionDuration;
            }
            // to ensure "flight" is required (not null)
            if (flight == null)
            {
                throw new InvalidDataException("flight is a required property for FlightSegment and cannot be null");
            }
            else
            {
                this.Flight = flight;
            }
            this.Id = id;
            this.BoundFlightsInd = boundFlightsInd;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Local indentifier within a given message for this object.
        /// </summary>
        /// <value>Local indentifier within a given message for this object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:SegmentSequence
        /// </summary>
        /// <value>Assigned Type: ctar-0400:SegmentSequence</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }
        /// <summary>
        /// The actual duration (in minutes) between\\n\\tsegments.
        /// </summary>
        /// <value>The actual duration (in minutes) between\\n\\tsegments.</value>
        [DataMember(Name="connectionDuration", EmitDefaultValue=false)]
        public string ConnectionDuration { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:Flight
        /// </summary>
        /// <value>Assigned Type: ctar-0400:Flight</value>
        [DataMember(Name="Flight", EmitDefaultValue=false)]
        public FlightID Flight { get; set; }
        /// <summary>
        /// If present and true, the Segments in this Connection must be sold and cancelled together.
        /// </summary>
        /// <value>If present and true, the Segments in this Connection must be sold and cancelled together.</value>
        [DataMember(Name="boundFlightsInd", EmitDefaultValue=false)]
        public bool? BoundFlightsInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightSegment {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  ConnectionDuration: ").Append(ConnectionDuration).Append("\n");
            sb.Append("  Flight: ").Append(Flight).Append("\n");
            sb.Append("  BoundFlightsInd: ").Append(BoundFlightsInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightSegment);
        }
        /// <summary>
        /// Returns true if FlightSegment instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightSegment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightSegment input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && 
                (
                    this.ConnectionDuration == input.ConnectionDuration ||
                    (this.ConnectionDuration != null &&
                    this.ConnectionDuration.Equals(input.ConnectionDuration))
                ) && 
                (
                    this.Flight == input.Flight ||
                    (this.Flight != null &&
                    this.Flight.Equals(input.Flight))
                ) && 
                (
                    this.BoundFlightsInd == input.BoundFlightsInd ||
                    (this.BoundFlightsInd != null &&
                    this.BoundFlightsInd.Equals(input.BoundFlightsInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.ConnectionDuration != null)
                    hashCode = hashCode * 59 + this.ConnectionDuration.GetHashCode();
                if (this.Flight != null)
                    hashCode = hashCode * 59 + this.Flight.GetHashCode();
                if (this.BoundFlightsInd != null)
                    hashCode = hashCode * 59 + this.BoundFlightsInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// FlightType
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class FlightType :  IEquatable<FlightType>, IValidatableObject
    {
        /// <summary>
        /// Describes if the flight type is nonstop, direct, single connection, etc.
        /// </summary>
        /// <value>Describes if the flight type is nonstop, direct, single connection, etc.</value>
        [DataMember(Name="connectionType", EmitDefaultValue=false)]
        public ConnectionTypeEnum? ConnectionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlightType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlightType" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="connectionType">Describes if the flight type is nonstop, direct, single connection, etc..</param>
        /// <param name="excludeInterlineConnectionsInd">If present and true, exclude interline connections.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public FlightType(string type = default(string), ConnectionTypeEnum? connectionType = default(ConnectionTypeEnum?), bool? excludeInterlineConnectionsInd = default(bool?), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for FlightType and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.ConnectionType = connectionType;
            this.ExcludeInterlineConnectionsInd = excludeInterlineConnectionsInd;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// If present and true, exclude interline connections
        /// </summary>
        /// <value>If present and true, exclude interline connections</value>
        [DataMember(Name="excludeInterlineConnectionsInd", EmitDefaultValue=false)]
        public bool? ExcludeInterlineConnectionsInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlightType {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ConnectionType: ").Append(ConnectionType).Append("\n");
            sb.Append("  ExcludeInterlineConnectionsInd: ").Append(ExcludeInterlineConnectionsInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlightType);
        }
        /// <summary>
        /// Returns true if FlightType instances are equal
        /// </summary>
        /// <param name="input">Instance of FlightType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlightType input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ConnectionType == input.ConnectionType ||
                    (this.ConnectionType != null &&
                    this.ConnectionType.Equals(input.ConnectionType))
                ) && 
                (
                    this.ExcludeInterlineConnectionsInd == input.ExcludeInterlineConnectionsInd ||
                    (this.ExcludeInterlineConnectionsInd != null &&
                    this.ExcludeInterlineConnectionsInd.Equals(input.ExcludeInterlineConnectionsInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ConnectionType != null)
                    hashCode = hashCode * 59 + this.ConnectionType.GetHashCode();
                if (this.ExcludeInterlineConnectionsInd != null)
                    hashCode = hashCode * 59 + this.ExcludeInterlineConnectionsInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Location code
    /// </summary>
    [DataContract]
    public partial class FromTo :  IEquatable<FromTo>, IValidatableObject
    {
        /// <summary>
        /// Airport or City
        /// </summary>
        /// <value>Airport or City</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public CityOrAirportEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FromTo" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="type">Airport or City.</param>
        public FromTo(string value = default(string), CityOrAirportEnum? type = default(CityOrAirportEnum?))
        {
            this.Value = value;
            this.Type = type;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FromTo {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FromTo);
        }
        /// <summary>
        /// Returns true if FromTo instances are equal
        /// </summary>
        /// <param name="input">Instance of FromTo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FromTo input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 3.", new [] { "Value" });
            }
            // Value (string) minLength
            if(this.Value != null && this.Value.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be greater than 3.", new [] { "Value" });
            }
            // Value (string) pattern
            Regex regexValue = new Regex(@"([a-zA-Z]{3})", RegexOptions.CultureInvariant);
            if (false == regexValue.Match(this.Value).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must match a pattern of " + regexValue, new [] { "Value" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.\\n\\nThe URL, system and company attributes can be omitted only when the system context can be implied by a parent or ancestor element.
    /// </summary>
    [DataContract]
    public partial class Identifier :  IEquatable<Identifier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Identifier" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="authority">Assigned Type: c-0400:StringShort.</param>
        public Identifier(string value = default(string), string authority = default(string))
        {
            this.Value = value;
            this.Authority = authority;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringShort
        /// </summary>
        /// <value>Assigned Type: c-0400:StringShort</value>
        [DataMember(Name="authority", EmitDefaultValue=false)]
        public string Authority { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Identifier {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Authority: ").Append(Authority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Identifier);
        }
        /// <summary>
        /// Returns true if Identifier instances are equal
        /// </summary>
        /// <param name="input">Instance of Identifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Identifier input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Authority == input.Authority ||
                    (this.Authority != null &&
                    this.Authority.Equals(input.Authority))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Authority != null)
                    hashCode = hashCode * 59 + this.Authority.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 128.", new [] { "Value" });
            }
            // Authority (string) maxLength
            if(this.Authority != null && this.Authority.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Authority, length must be less than 128.", new [] { "Authority" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Image Details
    /// </summary>
    [DataContract]
    public partial class Image :  IEquatable<Image>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Image" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="height">The number of pixels on the vertical edge of the image..</param>
        /// <param name="width">The number of pixels on the horizontal edge of the image..</param>
        public Image(string value = default(string), int? height = default(int?), int? width = default(int?))
        {
            this.Value = value;
            this.Height = height;
            this.Width = width;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// The number of pixels on the vertical edge of the image.
        /// </summary>
        /// <value>The number of pixels on the vertical edge of the image.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }
        /// <summary>
        /// The number of pixels on the horizontal edge of the image.
        /// </summary>
        /// <value>The number of pixels on the horizontal edge of the image.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Image {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Image);
        }
        /// <summary>
        /// Returns true if Image instances are equal
        /// </summary>
        /// <param name="input">Instance of Image to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Image input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// An intermediate stop location and duration
    /// </summary>
    [DataContract]
    public partial class IntermediateStop :  IEquatable<IntermediateStop>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntermediateStop" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="duration">Duration stopped at this location.</param>
        /// <param name="equipment">Assigned Type: c-0400:AirEquipCodeIATA.</param>
        public IntermediateStop(string value = default(string), string duration = default(string), string equipment = default(string))
        {
            this.Value = value;
            this.Duration = duration;
            this.Equipment = equipment;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Duration stopped at this location
        /// </summary>
        /// <value>Duration stopped at this location</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:AirEquipCodeIATA
        /// </summary>
        /// <value>Assigned Type: c-0400:AirEquipCodeIATA</value>
        [DataMember(Name="equipment", EmitDefaultValue=false)]
        public string Equipment { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IntermediateStop {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Equipment: ").Append(Equipment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntermediateStop);
        }
        /// <summary>
        /// Returns true if IntermediateStop instances are equal
        /// </summary>
        /// <param name="input">Instance of IntermediateStop to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntermediateStop input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Equipment == input.Equipment ||
                    (this.Equipment != null &&
                    this.Equipment.Equals(input.Equipment))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Equipment != null)
                    hashCode = hashCode * 59 + this.Equipment.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 3.", new [] { "Value" });
            }
            // Value (string) minLength
            if(this.Value != null && this.Value.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be greater than 3.", new [] { "Value" });
            }
            // Value (string) pattern
            Regex regexValue = new Regex(@"([a-zA-Z]{3})", RegexOptions.CultureInvariant);
            if (false == regexValue.Match(this.Value).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must match a pattern of " + regexValue, new [] { "Value" });
            }
            // Equipment (string) pattern
            Regex regexEquipment = new Regex(@"([A-Z0-9]{3})?", RegexOptions.CultureInvariant);
            if (false == regexEquipment.Match(this.Equipment).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Equipment, must match a pattern of " + regexEquipment, new [] { "Equipment" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// MaximumStay
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class MaximumStay :  IEquatable<MaximumStay>, IValidatableObject
    {
        /// <summary>
        /// Assigned Type: ctar-0400:RuleAppliesEnum
        /// </summary>
        /// <value>Assigned Type: ctar-0400:RuleAppliesEnum</value>
        [DataMember(Name="RuleApplies", EmitDefaultValue=false)]
        public RuleAppliesEnum? RuleApplies { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaximumStay" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MaximumStay() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaximumStay" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="passengerTypeCodes">Assigned Type: c-0400:PassengerTypeCodeList.</param>
        /// <param name="maximumStayDuration">maximumStayDuration.</param>
        /// <param name="maximumStayDate">maximumStayDate.</param>
        /// <param name="returnTime">Assigned Type: ota2:LocalTime.</param>
        /// <param name="ruleApplies">Assigned Type: ctar-0400:RuleAppliesEnum.</param>
        /// <param name="indeterminateInd">Structured fare rules could not be determined for this category.</param>
        /// <param name="mustCommenceByInd">Indicates if travel must commence by this date/duration.</param>
        /// <param name="mustCompleteByInd">Indicates if travel must complete by this date/duration.</param>
        /// <param name="fromDateOfIssueInd">If true the Maximum stay is calculated from the date of ticket issuance.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public MaximumStay(string type = default(string), List<string> passengerTypeCodes = default(List<string>), string maximumStayDuration = default(string), DateTime? maximumStayDate = default(DateTime?), string returnTime = default(string), RuleAppliesEnum? ruleApplies = default(RuleAppliesEnum?), bool? indeterminateInd = default(bool?), bool? mustCommenceByInd = default(bool?), bool? mustCompleteByInd = default(bool?), bool? fromDateOfIssueInd = default(bool?), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for MaximumStay and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.PassengerTypeCodes = passengerTypeCodes;
            this.MaximumStayDuration = maximumStayDuration;
            this.MaximumStayDate = maximumStayDate;
            this.ReturnTime = returnTime;
            this.RuleApplies = ruleApplies;
            this.IndeterminateInd = indeterminateInd;
            this.MustCommenceByInd = mustCommenceByInd;
            this.MustCompleteByInd = mustCompleteByInd;
            this.FromDateOfIssueInd = fromDateOfIssueInd;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:PassengerTypeCodeList
        /// </summary>
        /// <value>Assigned Type: c-0400:PassengerTypeCodeList</value>
        [DataMember(Name="passengerTypeCodes", EmitDefaultValue=false)]
        public List<string> PassengerTypeCodes { get; set; }
        /// <summary>
        /// Gets or Sets MaximumStayDuration
        /// </summary>
        [DataMember(Name="maximumStayDuration", EmitDefaultValue=false)]
        public string MaximumStayDuration { get; set; }
        /// <summary>
        /// Gets or Sets MaximumStayDate
        /// </summary>
        [DataMember(Name="maximumStayDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? MaximumStayDate { get; set; }
        /// <summary>
        /// Assigned Type: ota2:LocalTime
        /// </summary>
        /// <value>Assigned Type: ota2:LocalTime</value>
        [DataMember(Name="returnTime", EmitDefaultValue=false)]
        public string ReturnTime { get; set; }
        /// <summary>
        /// Structured fare rules could not be determined for this category
        /// </summary>
        /// <value>Structured fare rules could not be determined for this category</value>
        [DataMember(Name="indeterminateInd", EmitDefaultValue=false)]
        public bool? IndeterminateInd { get; set; }
        /// <summary>
        /// Indicates if travel must commence by this date/duration
        /// </summary>
        /// <value>Indicates if travel must commence by this date/duration</value>
        [DataMember(Name="mustCommenceByInd", EmitDefaultValue=false)]
        public bool? MustCommenceByInd { get; set; }
        /// <summary>
        /// Indicates if travel must complete by this date/duration
        /// </summary>
        /// <value>Indicates if travel must complete by this date/duration</value>
        [DataMember(Name="mustCompleteByInd", EmitDefaultValue=false)]
        public bool? MustCompleteByInd { get; set; }
        /// <summary>
        /// If true the Maximum stay is calculated from the date of ticket issuance
        /// </summary>
        /// <value>If true the Maximum stay is calculated from the date of ticket issuance</value>
        [DataMember(Name="fromDateOfIssueInd", EmitDefaultValue=false)]
        public bool? FromDateOfIssueInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaximumStay {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PassengerTypeCodes: ").Append(PassengerTypeCodes).Append("\n");
            sb.Append("  MaximumStayDuration: ").Append(MaximumStayDuration).Append("\n");
            sb.Append("  MaximumStayDate: ").Append(MaximumStayDate).Append("\n");
            sb.Append("  ReturnTime: ").Append(ReturnTime).Append("\n");
            sb.Append("  RuleApplies: ").Append(RuleApplies).Append("\n");
            sb.Append("  IndeterminateInd: ").Append(IndeterminateInd).Append("\n");
            sb.Append("  MustCommenceByInd: ").Append(MustCommenceByInd).Append("\n");
            sb.Append("  MustCompleteByInd: ").Append(MustCompleteByInd).Append("\n");
            sb.Append("  FromDateOfIssueInd: ").Append(FromDateOfIssueInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MaximumStay);
        }
        /// <summary>
        /// Returns true if MaximumStay instances are equal
        /// </summary>
        /// <param name="input">Instance of MaximumStay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaximumStay input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.PassengerTypeCodes == input.PassengerTypeCodes ||
                    this.PassengerTypeCodes != null &&
                    this.PassengerTypeCodes.SequenceEqual(input.PassengerTypeCodes)
                ) && 
                (
                    this.MaximumStayDuration == input.MaximumStayDuration ||
                    (this.MaximumStayDuration != null &&
                    this.MaximumStayDuration.Equals(input.MaximumStayDuration))
                ) && 
                (
                    this.MaximumStayDate == input.MaximumStayDate ||
                    (this.MaximumStayDate != null &&
                    this.MaximumStayDate.Equals(input.MaximumStayDate))
                ) && 
                (
                    this.ReturnTime == input.ReturnTime ||
                    (this.ReturnTime != null &&
                    this.ReturnTime.Equals(input.ReturnTime))
                ) && 
                (
                    this.RuleApplies == input.RuleApplies ||
                    (this.RuleApplies != null &&
                    this.RuleApplies.Equals(input.RuleApplies))
                ) && 
                (
                    this.IndeterminateInd == input.IndeterminateInd ||
                    (this.IndeterminateInd != null &&
                    this.IndeterminateInd.Equals(input.IndeterminateInd))
                ) && 
                (
                    this.MustCommenceByInd == input.MustCommenceByInd ||
                    (this.MustCommenceByInd != null &&
                    this.MustCommenceByInd.Equals(input.MustCommenceByInd))
                ) && 
                (
                    this.MustCompleteByInd == input.MustCompleteByInd ||
                    (this.MustCompleteByInd != null &&
                    this.MustCompleteByInd.Equals(input.MustCompleteByInd))
                ) && 
                (
                    this.FromDateOfIssueInd == input.FromDateOfIssueInd ||
                    (this.FromDateOfIssueInd != null &&
                    this.FromDateOfIssueInd.Equals(input.FromDateOfIssueInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.PassengerTypeCodes != null)
                    hashCode = hashCode * 59 + this.PassengerTypeCodes.GetHashCode();
                if (this.MaximumStayDuration != null)
                    hashCode = hashCode * 59 + this.MaximumStayDuration.GetHashCode();
                if (this.MaximumStayDate != null)
                    hashCode = hashCode * 59 + this.MaximumStayDate.GetHashCode();
                if (this.ReturnTime != null)
                    hashCode = hashCode * 59 + this.ReturnTime.GetHashCode();
                if (this.RuleApplies != null)
                    hashCode = hashCode * 59 + this.RuleApplies.GetHashCode();
                if (this.IndeterminateInd != null)
                    hashCode = hashCode * 59 + this.IndeterminateInd.GetHashCode();
                if (this.MustCommenceByInd != null)
                    hashCode = hashCode * 59 + this.MustCommenceByInd.GetHashCode();
                if (this.MustCompleteByInd != null)
                    hashCode = hashCode * 59 + this.MustCompleteByInd.GetHashCode();
                if (this.FromDateOfIssueInd != null)
                    hashCode = hashCode * 59 + this.FromDateOfIssueInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // ReturnTime (string) pattern
            Regex regexReturnTime = new Regex(@"(([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)((:?)[0-5]\\d)?([\\.,]\\d+(?!:))?", RegexOptions.CultureInvariant);
            if (false == regexReturnTime.Match(this.ReturnTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReturnTime, must match a pattern of " + regexReturnTime, new [] { "ReturnTime" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// MaxLayover
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class MaxLayover :  IEquatable<MaxLayover>, IValidatableObject
    {
        /// <summary>
        /// Type of Layover
        /// </summary>
        /// <value>Type of Layover</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public MaxLayoverTypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaxLayover" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MaxLayover() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MaxLayover" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="type">Type of Layover (required).</param>
        /// <param name="duration">Maximum duration for this layover type (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public MaxLayover(string type = default(string), MaxLayoverTypeEnum type = default(MaxLayoverTypeEnum), string duration = default(string), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for MaxLayover and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for MaxLayover and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "duration" is required (not null)
            if (duration == null)
            {
                throw new InvalidDataException("duration is a required property for MaxLayover and cannot be null");
            }
            else
            {
                this.Duration = duration;
            }
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Maximum duration for this layover type
        /// </summary>
        /// <value>Maximum duration for this layover type</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MaxLayover {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MaxLayover);
        }
        /// <summary>
        /// Returns true if MaxLayover instances are equal
        /// </summary>
        /// <param name="input">Instance of MaxLayover to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MaxLayover input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Layover is Domestic
    /// </summary>
    /// <value>Layover is Domestic</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum MaxLayoverTypeEnum
    {
        /// <summary>
        /// Enum Domestic for value: Domestic
        /// </summary>
        [EnumMember(Value = "Domestic")]
        Domestic = 1,
        /// <summary>
        /// Enum International for value: International
        /// </summary>
        [EnumMember(Value = "International")]
        International = 2,
        /// <summary>
        /// Enum DomesticToFromInternational for value: DomesticToFromInternational
        /// </summary>
        [EnumMember(Value = "DomesticToFromInternational")]
        DomesticToFromInternational = 3
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Used for dimensional units (width, height, depth) or weight
    /// </summary>
    [DataContract]
    public partial class Measurement :  IEquatable<Measurement>, IValidatableObject
    {
        /// <summary>
        /// The type of measurement, such as width, height, weight
        /// </summary>
        /// <value>The type of measurement, such as width, height, weight</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public MeasurementTypeEnum? Type { get; set; }
        /// <summary>
        /// The unit that applies to the amount, such as feet, meters, pounds
        /// </summary>
        /// <value>The unit that applies to the amount, such as feet, meters, pounds</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public UnitOfMeasureEnum? Unit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Measurement" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="type">The type of measurement, such as width, height, weight.</param>
        /// <param name="unit">The unit that applies to the amount, such as feet, meters, pounds.</param>
        public Measurement(float? value = default(float?), MeasurementTypeEnum? type = default(MeasurementTypeEnum?), UnitOfMeasureEnum? unit = default(UnitOfMeasureEnum?))
        {
            this.Value = value;
            this.Type = type;
            this.Unit = unit;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public float? Value { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Measurement {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Measurement);
        }
        /// <summary>
        /// Returns true if Measurement instances are equal
        /// </summary>
        /// <param name="input">Instance of Measurement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Measurement input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// The type of measurement such as width, height, weight
    /// </summary>
    /// <value>The type of measurement such as width, height, weight</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum MeasurementTypeEnum
    {
        /// <summary>
        /// Enum Width for value: Width
        /// </summary>
        [EnumMember(Value = "Width")]
        Width = 1,
        /// <summary>
        /// Enum Height for value: Height
        /// </summary>
        [EnumMember(Value = "Height")]
        Height = 2,
        /// <summary>
        /// Enum Depth for value: Depth
        /// </summary>
        [EnumMember(Value = "Depth")]
        Depth = 3,
        /// <summary>
        /// Enum Weight for value: Weight
        /// </summary>
        [EnumMember(Value = "Weight")]
        Weight = 4,
        /// <summary>
        /// Enum OverallDimension for value: OverallDimension
        /// </summary>
        [EnumMember(Value = "OverallDimension")]
        OverallDimension = 5
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Minimum Stay
    /// </summary>
    [DataContract]
    public partial class MinimumStay :  IEquatable<MinimumStay>, IValidatableObject
    {
        /// <summary>
        /// This day of the week must be included as part of the minimum stay
        /// </summary>
        /// <value>This day of the week must be included as part of the minimum stay</value>
        [DataMember(Name="mustIncludeDayOfWeek", EmitDefaultValue=false)]
        public DayOfWeekEnum? MustIncludeDayOfWeek { get; set; }
        /// <summary>
        /// The rule applies to trips commencing on a specific day of a week
        /// </summary>
        /// <value>The rule applies to trips commencing on a specific day of a week</value>
        [DataMember(Name="originDayOfWeek", EmitDefaultValue=false)]
        public DayOfWeekEnum? OriginDayOfWeek { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MinimumStay" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="passengerTypeCodes">Assigned Type: c-0400:PassengerTypeCodeList.</param>
        /// <param name="mustIncludeDayOfWeek">This day of the week must be included as part of the minimum stay.</param>
        /// <param name="originDayOfWeek">The rule applies to trips commencing on a specific day of a week.</param>
        /// <param name="returnTime">Assigned Type: ota2:LocalTime.</param>
        /// <param name="indeterminateInd">Structured fare rules could not be determined for this category.</param>
        public MinimumStay(string value = default(string), List<string> passengerTypeCodes = default(List<string>), DayOfWeekEnum? mustIncludeDayOfWeek = default(DayOfWeekEnum?), DayOfWeekEnum? originDayOfWeek = default(DayOfWeekEnum?), string returnTime = default(string), bool? indeterminateInd = default(bool?))
        {
            this.Value = value;
            this.PassengerTypeCodes = passengerTypeCodes;
            this.MustIncludeDayOfWeek = mustIncludeDayOfWeek;
            this.OriginDayOfWeek = originDayOfWeek;
            this.ReturnTime = returnTime;
            this.IndeterminateInd = indeterminateInd;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:PassengerTypeCodeList
        /// </summary>
        /// <value>Assigned Type: c-0400:PassengerTypeCodeList</value>
        [DataMember(Name="passengerTypeCodes", EmitDefaultValue=false)]
        public List<string> PassengerTypeCodes { get; set; }
        /// <summary>
        /// Assigned Type: ota2:LocalTime
        /// </summary>
        /// <value>Assigned Type: ota2:LocalTime</value>
        [DataMember(Name="returnTime", EmitDefaultValue=false)]
        public string ReturnTime { get; set; }
        /// <summary>
        /// Structured fare rules could not be determined for this category
        /// </summary>
        /// <value>Structured fare rules could not be determined for this category</value>
        [DataMember(Name="indeterminateInd", EmitDefaultValue=false)]
        public bool? IndeterminateInd { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MinimumStay {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  PassengerTypeCodes: ").Append(PassengerTypeCodes).Append("\n");
            sb.Append("  MustIncludeDayOfWeek: ").Append(MustIncludeDayOfWeek).Append("\n");
            sb.Append("  OriginDayOfWeek: ").Append(OriginDayOfWeek).Append("\n");
            sb.Append("  ReturnTime: ").Append(ReturnTime).Append("\n");
            sb.Append("  IndeterminateInd: ").Append(IndeterminateInd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MinimumStay);
        }
        /// <summary>
        /// Returns true if MinimumStay instances are equal
        /// </summary>
        /// <param name="input">Instance of MinimumStay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MinimumStay input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.PassengerTypeCodes == input.PassengerTypeCodes ||
                    this.PassengerTypeCodes != null &&
                    this.PassengerTypeCodes.SequenceEqual(input.PassengerTypeCodes)
                ) && 
                (
                    this.MustIncludeDayOfWeek == input.MustIncludeDayOfWeek ||
                    (this.MustIncludeDayOfWeek != null &&
                    this.MustIncludeDayOfWeek.Equals(input.MustIncludeDayOfWeek))
                ) && 
                (
                    this.OriginDayOfWeek == input.OriginDayOfWeek ||
                    (this.OriginDayOfWeek != null &&
                    this.OriginDayOfWeek.Equals(input.OriginDayOfWeek))
                ) && 
                (
                    this.ReturnTime == input.ReturnTime ||
                    (this.ReturnTime != null &&
                    this.ReturnTime.Equals(input.ReturnTime))
                ) && 
                (
                    this.IndeterminateInd == input.IndeterminateInd ||
                    (this.IndeterminateInd != null &&
                    this.IndeterminateInd.Equals(input.IndeterminateInd))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.PassengerTypeCodes != null)
                    hashCode = hashCode * 59 + this.PassengerTypeCodes.GetHashCode();
                if (this.MustIncludeDayOfWeek != null)
                    hashCode = hashCode * 59 + this.MustIncludeDayOfWeek.GetHashCode();
                if (this.OriginDayOfWeek != null)
                    hashCode = hashCode * 59 + this.OriginDayOfWeek.GetHashCode();
                if (this.ReturnTime != null)
                    hashCode = hashCode * 59 + this.ReturnTime.GetHashCode();
                if (this.IndeterminateInd != null)
                    hashCode = hashCode * 59 + this.IndeterminateInd.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ReturnTime (string) pattern
            Regex regexReturnTime = new Regex(@"(([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)((:?)[0-5]\\d)?([\\.,]\\d+(?!:))?", RegexOptions.CultureInvariant);
            if (false == regexReturnTime.Match(this.ReturnTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReturnTime, must match a pattern of " + regexReturnTime, new [] { "ReturnTime" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Used for data stored in Name/Value pairs
    /// </summary>
    [DataContract]
    public partial class NameValuePair :  IEquatable<NameValuePair>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NameValuePair" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NameValuePair() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NameValuePair" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="id">Optional internally referenced id.</param>
        /// <param name="name">Assigned Type: c-0400:String (required).</param>
        public NameValuePair(string value = default(string), string id = default(string), string name = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for NameValuePair and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Value = value;
            this.Id = id;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Optional internally referenced id
        /// </summary>
        /// <value>Optional internally referenced id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:String
        /// </summary>
        /// <value>Assigned Type: c-0400:String</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NameValuePair {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NameValuePair);
        }
        /// <summary>
        /// Returns true if NameValuePair instances are equal
        /// </summary>
        /// <param name="input">Instance of NameValuePair to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NameValuePair input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 512.", new [] { "Value" });
            }
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 512.", new [] { "Name" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// A URL that describes a step that can be applied to the resource containing the next step structure.
    /// </summary>
    [DataContract]
    public partial class NextStep :  IEquatable<NextStep>, IValidatableObject
    {
        /// <summary>
        /// possible action that can be performed on the returned results
        /// </summary>
        /// <value>possible action that can be performed on the returned results</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public NextStepMethodEnum Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NextStep" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NextStep() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NextStep" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="id">Identifier for the Next Step.</param>
        /// <param name="action">Assigned Type: c-0400:StringTiny (required).</param>
        /// <param name="method">possible action that can be performed on the returned results (required).</param>
        /// <param name="description">Assigned Type: c-0400:StringTiny.</param>
        public NextStep(string value = default(string), string id = default(string), string action = default(string), NextStepMethodEnum method = default(NextStepMethodEnum), string description = default(string))
        {
            // to ensure "action" is required (not null)
            if (action == null)
            {
                throw new InvalidDataException("action is a required property for NextStep and cannot be null");
            }
            else
            {
                this.Action = action;
            }
            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new InvalidDataException("method is a required property for NextStep and cannot be null");
            }
            else
            {
                this.Method = method;
            }
            this.Value = value;
            this.Id = id;
            this.Description = description;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Identifier for the Next Step
        /// </summary>
        /// <value>Identifier for the Next Step</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-0400:StringTiny</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-0400:StringTiny</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NextStep {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NextStep);
        }
        /// <summary>
        /// Returns true if NextStep instances are equal
        /// </summary>
        /// <param name="input">Instance of NextStep to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NextStep input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Action (string) maxLength
            if(this.Action != null && this.Action.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Action, length must be less than 32.", new [] { "Action" });
            }
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 32.", new [] { "Description" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Describes the set of potential methods that can be taken after an operation.
    /// </summary>
    /// <value>Describes the set of potential methods that can be taken after an operation.</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum NextStepMethodEnum
    {
        /// <summary>
        /// Enum GET for value: GET
        /// </summary>
        [EnumMember(Value = "GET")]
        GET = 1,
        /// <summary>
        /// Enum DELETE for value: DELETE
        /// </summary>
        [EnumMember(Value = "DELETE")]
        DELETE = 2,
        /// <summary>
        /// Enum PUT for value: PUT
        /// </summary>
        [EnumMember(Value = "PUT")]
        PUT = 3,
        /// <summary>
        /// Enum POST for value: POST
        /// </summary>
        [EnumMember(Value = "POST")]
        POST = 4
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// NextSteps
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class NextSteps :  IEquatable<NextSteps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NextSteps" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NextSteps() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NextSteps" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="baseURI">The base portion of the uri in order to shorten the uri&#39;s in the individual steps (required).</param>
        /// <param name="id">Optional internally referenced id.</param>
        /// <param name="nextStep">nextStep (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public NextSteps(string type = default(string), string baseURI = default(string), string id = default(string), List<NextStep> nextStep = default(List<NextStep>), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for NextSteps and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "baseURI" is required (not null)
            if (baseURI == null)
            {
                throw new InvalidDataException("baseURI is a required property for NextSteps and cannot be null");
            }
            else
            {
                this.BaseURI = baseURI;
            }
            // to ensure "nextStep" is required (not null)
            if (nextStep == null)
            {
                throw new InvalidDataException("nextStep is a required property for NextSteps and cannot be null");
            }
            else
            {
                this.NextStep = nextStep;
            }
            this.Id = id;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// The base portion of the uri in order to shorten the uri&#39;s in the individual steps
        /// </summary>
        /// <value>The base portion of the uri in order to shorten the uri&#39;s in the individual steps</value>
        [DataMember(Name="baseURI", EmitDefaultValue=false)]
        public string BaseURI { get; set; }
        /// <summary>
        /// Optional internally referenced id
        /// </summary>
        /// <value>Optional internally referenced id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets NextStep
        /// </summary>
        [DataMember(Name="NextStep", EmitDefaultValue=false)]
        public List<NextStep> NextStep { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NextSteps {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  BaseURI: ").Append(BaseURI).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NextStep: ").Append(NextStep).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NextSteps);
        }
        /// <summary>
        /// Returns true if NextSteps instances are equal
        /// </summary>
        /// <param name="input">Instance of NextSteps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NextSteps input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.BaseURI == input.BaseURI ||
                    (this.BaseURI != null &&
                    this.BaseURI.Equals(input.BaseURI))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.NextStep == input.NextStep ||
                    this.NextStep != null &&
                    this.NextStep.SequenceEqual(input.NextStep)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.BaseURI != null)
                    hashCode = hashCode * 59 + this.BaseURI.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.NextStep != null)
                    hashCode = hashCode * 59 + this.NextStep.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Defines OrganizationCodeTypeEnum
    /// </summary>
    public enum OrganizationCodeTypeEnum
    {
        /// <summary>
        /// Enum Account for value: Account
        /// </summary>
        Account = Account,
        /// <summary>
        /// Enum Organization for value: Organization
        /// </summary>
        Organization = Organization
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// The organization identifier
    /// </summary>
    [DataContract]
    public partial class OrganizationIdentifier :  IEquatable<OrganizationIdentifier>, IValidatableObject
    {
        /// <summary>
        /// The type od code.  Organization or account
        /// </summary>
        /// <value>The type od code.  Organization or account</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public OrganizationCodeTypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationIdentifier" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="supplier">Assigned Type: c-0400:AirlineCode.</param>
        /// <param name="type">The type od code.  Organization or account.</param>
        public OrganizationIdentifier(string value = default(string), string supplier = default(string), OrganizationCodeTypeEnum? type = default(OrganizationCodeTypeEnum?))
        {
            this.Value = value;
            this.Supplier = supplier;
            this.Type = type;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:AirlineCode
        /// </summary>
        /// <value>Assigned Type: c-0400:AirlineCode</value>
        [DataMember(Name="supplier", EmitDefaultValue=false)]
        public string Supplier { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrganizationIdentifier {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrganizationIdentifier);
        }
        /// <summary>
        /// Returns true if OrganizationIdentifier instances are equal
        /// </summary>
        /// <param name="input">Instance of OrganizationIdentifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrganizationIdentifier input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Supplier != null)
                    hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 32.", new [] { "Value" });
            }
            // Supplier (string) pattern
            Regex regexSupplier = new Regex(@"([a-zA-Z0-9]{2,3})", RegexOptions.CultureInvariant);
            if (false == regexSupplier.Match(this.Supplier).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Supplier, must match a pattern of " + regexSupplier, new [] { "Supplier" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Passenger Type Code
    /// </summary>
    [DataContract]
    public partial class PassengerCriteria :  IEquatable<PassengerCriteria>, IValidatableObject
    {
        /// <summary>
        /// The geographic location type.  For example (Country)
        /// </summary>
        /// <value>The geographic location type.  For example (Country)</value>
        [DataMember(Name="travelerGeographicLocationType", EmitDefaultValue=false)]
        public TravelerGeographicTypeEnum? TravelerGeographicLocationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PassengerCriteria" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PassengerCriteria() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PassengerCriteria" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="number">Assigned Type: c-0400:NonnegativeInteger (required).</param>
        /// <param name="age">Assigned Type: c-0400:NumberDoubleDigit.</param>
        /// <param name="travelerGeographicLocation">Assigned Type: ctar-0400:TravelerGeographicLocation.</param>
        /// <param name="customerLoyalty">Assigned Type: c-0400:CustomerLoyalty.</param>
        /// <param name="travelerGeographicLocationType">The geographic location type.  For example (Country).</param>
        /// <param name="id">Customer Loyality Id.</param>
        /// <param name="priority">Assigned Type: c-0400:Priority.</param>
        /// <param name="programId">Assigned Type: c-0400:StringShort.</param>
        /// <param name="programName">Assigned Type: c-0400:LoyaltyProgramName.</param>
        /// <param name="supplierType">Assigned Type: c-0400:LoyaltySupplierType.</param>
        /// <param name="supplier">Assigned Type: c-0400:LoyaltySupplier.</param>
        /// <param name="tier">Assigned Type: c-0400:StringTiny.</param>
        /// <param name="shareWithSupplier">Assigned Type: c-0400:TinyStrings.</param>
        /// <param name="cardHolderName">Assigned Type: c-0400:StringShort.</param>
        /// <param name="specifiedPassengerTypeCodeOnlyInd">If true then the Offering/Offer will only be returned for the specific passengerTypeCode.</param>
        /// <param name="validatedInd">Customer loyalty number has been validated by the supplier.</param>
        public PassengerCriteria(string value = default(string), int? number = default(int?), int? age = default(int?), string travelerGeographicLocation = default(string), string customerLoyalty = default(string), TravelerGeographicTypeEnum? travelerGeographicLocationType = default(TravelerGeographicTypeEnum?), string id = default(string), int? priority = default(int?), string programId = default(string), string programName = default(string), string supplierType = default(string), string supplier = default(string), string tier = default(string), List<string> shareWithSupplier = default(List<string>), string cardHolderName = default(string), bool? specifiedPassengerTypeCodeOnlyInd = default(bool?), bool? validatedInd = default(bool?))
        {
            // to ensure "number" is required (not null)
            if (number == null)
            {
                throw new InvalidDataException("number is a required property for PassengerCriteria and cannot be null");
            }
            else
            {
                this.Number = number;
            }
            this.Value = value;
            this.Age = age;
            this.TravelerGeographicLocation = travelerGeographicLocation;
            this.CustomerLoyalty = customerLoyalty;
            this.TravelerGeographicLocationType = travelerGeographicLocationType;
            this.Id = id;
            this.Priority = priority;
            this.ProgramId = programId;
            this.ProgramName = programName;
            this.SupplierType = supplierType;
            this.Supplier = supplier;
            this.Tier = tier;
            this.ShareWithSupplier = shareWithSupplier;
            this.CardHolderName = cardHolderName;
            this.SpecifiedPassengerTypeCodeOnlyInd = specifiedPassengerTypeCodeOnlyInd;
            this.ValidatedInd = validatedInd;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-0400:NonnegativeInteger</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public int? Number { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:NumberDoubleDigit
        /// </summary>
        /// <value>Assigned Type: c-0400:NumberDoubleDigit</value>
        [DataMember(Name="age", EmitDefaultValue=false)]
        public int? Age { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:TravelerGeographicLocation
        /// </summary>
        /// <value>Assigned Type: ctar-0400:TravelerGeographicLocation</value>
        [DataMember(Name="travelerGeographicLocation", EmitDefaultValue=false)]
        public string TravelerGeographicLocation { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CustomerLoyalty
        /// </summary>
        /// <value>Assigned Type: c-0400:CustomerLoyalty</value>
        [DataMember(Name="customerLoyalty", EmitDefaultValue=false)]
        public string CustomerLoyalty { get; set; }
        /// <summary>
        /// Customer Loyality Id
        /// </summary>
        /// <value>Customer Loyality Id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Priority
        /// </summary>
        /// <value>Assigned Type: c-0400:Priority</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringShort
        /// </summary>
        /// <value>Assigned Type: c-0400:StringShort</value>
        [DataMember(Name="programId", EmitDefaultValue=false)]
        public string ProgramId { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:LoyaltyProgramName
        /// </summary>
        /// <value>Assigned Type: c-0400:LoyaltyProgramName</value>
        [DataMember(Name="programName", EmitDefaultValue=false)]
        public string ProgramName { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:LoyaltySupplierType
        /// </summary>
        /// <value>Assigned Type: c-0400:LoyaltySupplierType</value>
        [DataMember(Name="supplierType", EmitDefaultValue=false)]
        public string SupplierType { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:LoyaltySupplier
        /// </summary>
        /// <value>Assigned Type: c-0400:LoyaltySupplier</value>
        [DataMember(Name="supplier", EmitDefaultValue=false)]
        public string Supplier { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringTiny
        /// </summary>
        /// <value>Assigned Type: c-0400:StringTiny</value>
        [DataMember(Name="tier", EmitDefaultValue=false)]
        public string Tier { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:TinyStrings
        /// </summary>
        /// <value>Assigned Type: c-0400:TinyStrings</value>
        [DataMember(Name="shareWithSupplier", EmitDefaultValue=false)]
        public List<string> ShareWithSupplier { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringShort
        /// </summary>
        /// <value>Assigned Type: c-0400:StringShort</value>
        [DataMember(Name="cardHolderName", EmitDefaultValue=false)]
        public string CardHolderName { get; set; }
        /// <summary>
        /// If true then the Offering/Offer will only be returned for the specific passengerTypeCode
        /// </summary>
        /// <value>If true then the Offering/Offer will only be returned for the specific passengerTypeCode</value>
        [DataMember(Name="specifiedPassengerTypeCodeOnlyInd", EmitDefaultValue=false)]
        public bool? SpecifiedPassengerTypeCodeOnlyInd { get; set; }
        /// <summary>
        /// Customer loyalty number has been validated by the supplier
        /// </summary>
        /// <value>Customer loyalty number has been validated by the supplier</value>
        [DataMember(Name="validatedInd", EmitDefaultValue=false)]
        public bool? ValidatedInd { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PassengerCriteria {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  TravelerGeographicLocation: ").Append(TravelerGeographicLocation).Append("\n");
            sb.Append("  CustomerLoyalty: ").Append(CustomerLoyalty).Append("\n");
            sb.Append("  TravelerGeographicLocationType: ").Append(TravelerGeographicLocationType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  ProgramName: ").Append(ProgramName).Append("\n");
            sb.Append("  SupplierType: ").Append(SupplierType).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  ShareWithSupplier: ").Append(ShareWithSupplier).Append("\n");
            sb.Append("  CardHolderName: ").Append(CardHolderName).Append("\n");
            sb.Append("  SpecifiedPassengerTypeCodeOnlyInd: ").Append(SpecifiedPassengerTypeCodeOnlyInd).Append("\n");
            sb.Append("  ValidatedInd: ").Append(ValidatedInd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PassengerCriteria);
        }
        /// <summary>
        /// Returns true if PassengerCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of PassengerCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PassengerCriteria input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Age == input.Age ||
                    (this.Age != null &&
                    this.Age.Equals(input.Age))
                ) && 
                (
                    this.TravelerGeographicLocation == input.TravelerGeographicLocation ||
                    (this.TravelerGeographicLocation != null &&
                    this.TravelerGeographicLocation.Equals(input.TravelerGeographicLocation))
                ) && 
                (
                    this.CustomerLoyalty == input.CustomerLoyalty ||
                    (this.CustomerLoyalty != null &&
                    this.CustomerLoyalty.Equals(input.CustomerLoyalty))
                ) && 
                (
                    this.TravelerGeographicLocationType == input.TravelerGeographicLocationType ||
                    (this.TravelerGeographicLocationType != null &&
                    this.TravelerGeographicLocationType.Equals(input.TravelerGeographicLocationType))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.ProgramId == input.ProgramId ||
                    (this.ProgramId != null &&
                    this.ProgramId.Equals(input.ProgramId))
                ) && 
                (
                    this.ProgramName == input.ProgramName ||
                    (this.ProgramName != null &&
                    this.ProgramName.Equals(input.ProgramName))
                ) && 
                (
                    this.SupplierType == input.SupplierType ||
                    (this.SupplierType != null &&
                    this.SupplierType.Equals(input.SupplierType))
                ) && 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.Tier == input.Tier ||
                    (this.Tier != null &&
                    this.Tier.Equals(input.Tier))
                ) && 
                (
                    this.ShareWithSupplier == input.ShareWithSupplier ||
                    this.ShareWithSupplier != null &&
                    this.ShareWithSupplier.SequenceEqual(input.ShareWithSupplier)
                ) && 
                (
                    this.CardHolderName == input.CardHolderName ||
                    (this.CardHolderName != null &&
                    this.CardHolderName.Equals(input.CardHolderName))
                ) && 
                (
                    this.SpecifiedPassengerTypeCodeOnlyInd == input.SpecifiedPassengerTypeCodeOnlyInd ||
                    (this.SpecifiedPassengerTypeCodeOnlyInd != null &&
                    this.SpecifiedPassengerTypeCodeOnlyInd.Equals(input.SpecifiedPassengerTypeCodeOnlyInd))
                ) && 
                (
                    this.ValidatedInd == input.ValidatedInd ||
                    (this.ValidatedInd != null &&
                    this.ValidatedInd.Equals(input.ValidatedInd))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Age != null)
                    hashCode = hashCode * 59 + this.Age.GetHashCode();
                if (this.TravelerGeographicLocation != null)
                    hashCode = hashCode * 59 + this.TravelerGeographicLocation.GetHashCode();
                if (this.CustomerLoyalty != null)
                    hashCode = hashCode * 59 + this.CustomerLoyalty.GetHashCode();
                if (this.TravelerGeographicLocationType != null)
                    hashCode = hashCode * 59 + this.TravelerGeographicLocationType.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.ProgramId != null)
                    hashCode = hashCode * 59 + this.ProgramId.GetHashCode();
                if (this.ProgramName != null)
                    hashCode = hashCode * 59 + this.ProgramName.GetHashCode();
                if (this.SupplierType != null)
                    hashCode = hashCode * 59 + this.SupplierType.GetHashCode();
                if (this.Supplier != null)
                    hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.Tier != null)
                    hashCode = hashCode * 59 + this.Tier.GetHashCode();
                if (this.ShareWithSupplier != null)
                    hashCode = hashCode * 59 + this.ShareWithSupplier.GetHashCode();
                if (this.CardHolderName != null)
                    hashCode = hashCode * 59 + this.CardHolderName.GetHashCode();
                if (this.SpecifiedPassengerTypeCodeOnlyInd != null)
                    hashCode = hashCode * 59 + this.SpecifiedPassengerTypeCodeOnlyInd.GetHashCode();
                if (this.ValidatedInd != null)
                    hashCode = hashCode * 59 + this.ValidatedInd.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 5.", new [] { "Value" });
            }
            // Value (string) minLength
            if(this.Value != null && this.Value.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be greater than 3.", new [] { "Value" });
            }
            // Value (string) pattern
            Regex regexValue = new Regex(@"([a-zA-Z0-9]{3,5})", RegexOptions.CultureInvariant);
            if (false == regexValue.Match(this.Value).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must match a pattern of " + regexValue, new [] { "Value" });
            }
            // Number (int?) minimum
            if(this.Number < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Number, must be a value greater than or equal to 0.", new [] { "Number" });
            }
            // TravelerGeographicLocation (string) maxLength
            if(this.TravelerGeographicLocation != null && this.TravelerGeographicLocation.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TravelerGeographicLocation, length must be less than 32.", new [] { "TravelerGeographicLocation" });
            }
            // CustomerLoyalty (string) maxLength
            if(this.CustomerLoyalty != null && this.CustomerLoyalty.Length > 1000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerLoyalty, length must be less than 1000.", new [] { "CustomerLoyalty" });
            }
            // CustomerLoyalty (string) minLength
            if(this.CustomerLoyalty != null && this.CustomerLoyalty.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomerLoyalty, length must be greater than 1.", new [] { "CustomerLoyalty" });
            }
            // Priority (int?) maximum
            if(this.Priority > (int?)300)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Priority, must be a value less than or equal to 300.", new [] { "Priority" });
            }
            // Priority (int?) minimum
            if(this.Priority < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Priority, must be a value greater than or equal to 0.", new [] { "Priority" });
            }
            // ProgramId (string) maxLength
            if(this.ProgramId != null && this.ProgramId.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramId, length must be less than 128.", new [] { "ProgramId" });
            }
            // ProgramName (string) maxLength
            if(this.ProgramName != null && this.ProgramName.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramName, length must be less than 128.", new [] { "ProgramName" });
            }
            // SupplierType (string) maxLength
            if(this.SupplierType != null && this.SupplierType.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SupplierType, length must be less than 32.", new [] { "SupplierType" });
            }
            // Supplier (string) maxLength
            if(this.Supplier != null && this.Supplier.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Supplier, length must be less than 128.", new [] { "Supplier" });
            }
            // Tier (string) maxLength
            if(this.Tier != null && this.Tier.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Tier, length must be less than 32.", new [] { "Tier" });
            }
            // CardHolderName (string) maxLength
            if(this.CardHolderName != null && this.CardHolderName.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardHolderName, length must be less than 128.", new [] { "CardHolderName" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// PassengerFlight
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class PassengerFlight :  IEquatable<PassengerFlight>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PassengerFlight" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PassengerFlight() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PassengerFlight" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="passengerQuantity">Number of passengers of the specified passenger type code.</param>
        /// <param name="passengerTypeCode">Assigned Type: c-0400:PassengerTypeCode.</param>
        /// <param name="flightProduct">flightProduct.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public PassengerFlight(string type = default(string), int? passengerQuantity = default(int?), string passengerTypeCode = default(string), List<FlightProduct> flightProduct = default(List<FlightProduct>), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for PassengerFlight and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.PassengerQuantity = passengerQuantity;
            this.PassengerTypeCode = passengerTypeCode;
            this.FlightProduct = flightProduct;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Number of passengers of the specified passenger type code
        /// </summary>
        /// <value>Number of passengers of the specified passenger type code</value>
        [DataMember(Name="passengerQuantity", EmitDefaultValue=false)]
        public int? PassengerQuantity { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:PassengerTypeCode
        /// </summary>
        /// <value>Assigned Type: c-0400:PassengerTypeCode</value>
        [DataMember(Name="passengerTypeCode", EmitDefaultValue=false)]
        public string PassengerTypeCode { get; set; }
        /// <summary>
        /// Gets or Sets FlightProduct
        /// </summary>
        [DataMember(Name="FlightProduct", EmitDefaultValue=false)]
        public List<FlightProduct> FlightProduct { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PassengerFlight {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PassengerQuantity: ").Append(PassengerQuantity).Append("\n");
            sb.Append("  PassengerTypeCode: ").Append(PassengerTypeCode).Append("\n");
            sb.Append("  FlightProduct: ").Append(FlightProduct).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PassengerFlight);
        }
        /// <summary>
        /// Returns true if PassengerFlight instances are equal
        /// </summary>
        /// <param name="input">Instance of PassengerFlight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PassengerFlight input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.PassengerQuantity == input.PassengerQuantity ||
                    (this.PassengerQuantity != null &&
                    this.PassengerQuantity.Equals(input.PassengerQuantity))
                ) && 
                (
                    this.PassengerTypeCode == input.PassengerTypeCode ||
                    (this.PassengerTypeCode != null &&
                    this.PassengerTypeCode.Equals(input.PassengerTypeCode))
                ) && 
                (
                    this.FlightProduct == input.FlightProduct ||
                    this.FlightProduct != null &&
                    this.FlightProduct.SequenceEqual(input.FlightProduct)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.PassengerQuantity != null)
                    hashCode = hashCode * 59 + this.PassengerQuantity.GetHashCode();
                if (this.PassengerTypeCode != null)
                    hashCode = hashCode * 59 + this.PassengerTypeCode.GetHashCode();
                if (this.FlightProduct != null)
                    hashCode = hashCode * 59 + this.FlightProduct.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // PassengerTypeCode (string) maxLength
            if(this.PassengerTypeCode != null && this.PassengerTypeCode.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PassengerTypeCode, length must be less than 5.", new [] { "PassengerTypeCode" });
            }
            // PassengerTypeCode (string) minLength
            if(this.PassengerTypeCode != null && this.PassengerTypeCode.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PassengerTypeCode, length must be greater than 3.", new [] { "PassengerTypeCode" });
            }
            // PassengerTypeCode (string) pattern
            Regex regexPassengerTypeCode = new Regex(@"([a-zA-Z0-9]{3,5})", RegexOptions.CultureInvariant);
            if (false == regexPassengerTypeCode.Match(this.PassengerTypeCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PassengerTypeCode, must match a pattern of " + regexPassengerTypeCode, new [] { "PassengerTypeCode" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// PaymentCriteria
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class PaymentCriteria :  IEquatable<PaymentCriteria>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentCriteria" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentCriteria() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentCriteria" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="issuerIdentificationNumber">This the BIN/IIN.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public PaymentCriteria(string type = default(string), string issuerIdentificationNumber = default(string), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for PaymentCriteria and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.IssuerIdentificationNumber = issuerIdentificationNumber;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// This the BIN/IIN
        /// </summary>
        /// <value>This the BIN/IIN</value>
        [DataMember(Name="IssuerIdentificationNumber", EmitDefaultValue=false)]
        public string IssuerIdentificationNumber { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentCriteria {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IssuerIdentificationNumber: ").Append(IssuerIdentificationNumber).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentCriteria);
        }
        /// <summary>
        /// Returns true if PaymentCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentCriteria input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.IssuerIdentificationNumber == input.IssuerIdentificationNumber ||
                    (this.IssuerIdentificationNumber != null &&
                    this.IssuerIdentificationNumber.Equals(input.IssuerIdentificationNumber))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.IssuerIdentificationNumber != null)
                    hashCode = hashCode * 59 + this.IssuerIdentificationNumber.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // IssuerIdentificationNumber (string) maxLength
            if(this.IssuerIdentificationNumber != null && this.IssuerIdentificationNumber.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuerIdentificationNumber, length must be less than 32.", new [] { "IssuerIdentificationNumber" });
            }
            // IssuerIdentificationNumber (string) pattern
            Regex regexIssuerIdentificationNumber = new Regex(@"[0-9]{6,9}", RegexOptions.CultureInvariant);
            if (false == regexIssuerIdentificationNumber.Match(this.IssuerIdentificationNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuerIdentificationNumber, must match a pattern of " + regexIssuerIdentificationNumber, new [] { "IssuerIdentificationNumber" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Penalties
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class Penalties :  IEquatable<Penalties>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Penalties" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Penalties() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Penalties" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="passengerTypeCodes">Assigned Type: c-0400:PassengerTypeCodeList.</param>
        /// <param name="change">change.</param>
        /// <param name="refund">refund.</param>
        /// <param name="waiver">waiver.</param>
        /// <param name="involuntaryInd">Penalties apply for involuntary changes initiated by the airline.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public Penalties(string type = default(string), List<string> passengerTypeCodes = default(List<string>), List<Change> change = default(List<Change>), List<Refund> refund = default(List<Refund>), List<WaiverEnum> waiver = default(List<WaiverEnum>), bool? involuntaryInd = default(bool?), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Penalties and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.PassengerTypeCodes = passengerTypeCodes;
            this.Change = change;
            this.Refund = refund;
            this.Waiver = waiver;
            this.InvoluntaryInd = involuntaryInd;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:PassengerTypeCodeList
        /// </summary>
        /// <value>Assigned Type: c-0400:PassengerTypeCodeList</value>
        [DataMember(Name="passengerTypeCodes", EmitDefaultValue=false)]
        public List<string> PassengerTypeCodes { get; set; }
        /// <summary>
        /// Gets or Sets Change
        /// </summary>
        [DataMember(Name="Change", EmitDefaultValue=false)]
        public List<Change> Change { get; set; }
        /// <summary>
        /// Gets or Sets Refund
        /// </summary>
        [DataMember(Name="Refund", EmitDefaultValue=false)]
        public List<Refund> Refund { get; set; }
        /// <summary>
        /// Gets or Sets Waiver
        /// </summary>
        [DataMember(Name="Waiver", EmitDefaultValue=false)]
        public List<WaiverEnum> Waiver { get; set; }
        /// <summary>
        /// Penalties apply for involuntary changes initiated by the airline
        /// </summary>
        /// <value>Penalties apply for involuntary changes initiated by the airline</value>
        [DataMember(Name="involuntaryInd", EmitDefaultValue=false)]
        public bool? InvoluntaryInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Penalties {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PassengerTypeCodes: ").Append(PassengerTypeCodes).Append("\n");
            sb.Append("  Change: ").Append(Change).Append("\n");
            sb.Append("  Refund: ").Append(Refund).Append("\n");
            sb.Append("  Waiver: ").Append(Waiver).Append("\n");
            sb.Append("  InvoluntaryInd: ").Append(InvoluntaryInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Penalties);
        }
        /// <summary>
        /// Returns true if Penalties instances are equal
        /// </summary>
        /// <param name="input">Instance of Penalties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Penalties input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.PassengerTypeCodes == input.PassengerTypeCodes ||
                    this.PassengerTypeCodes != null &&
                    this.PassengerTypeCodes.SequenceEqual(input.PassengerTypeCodes)
                ) && 
                (
                    this.Change == input.Change ||
                    this.Change != null &&
                    this.Change.SequenceEqual(input.Change)
                ) && 
                (
                    this.Refund == input.Refund ||
                    this.Refund != null &&
                    this.Refund.SequenceEqual(input.Refund)
                ) && 
                (
                    this.Waiver == input.Waiver ||
                    this.Waiver != null &&
                    this.Waiver.SequenceEqual(input.Waiver)
                ) && 
                (
                    this.InvoluntaryInd == input.InvoluntaryInd ||
                    (this.InvoluntaryInd != null &&
                    this.InvoluntaryInd.Equals(input.InvoluntaryInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.PassengerTypeCodes != null)
                    hashCode = hashCode * 59 + this.PassengerTypeCodes.GetHashCode();
                if (this.Change != null)
                    hashCode = hashCode * 59 + this.Change.GetHashCode();
                if (this.Refund != null)
                    hashCode = hashCode * 59 + this.Refund.GetHashCode();
                if (this.Waiver != null)
                    hashCode = hashCode * 59 + this.Waiver.GetHashCode();
                if (this.InvoluntaryInd != null)
                    hashCode = hashCode * 59 + this.InvoluntaryInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Penalty applicable list
    /// </summary>
    /// <value>Penalty applicable list</value>
    public enum PenaltyAppliesToEnum
    {
        /// <summary>
        /// Enum OneWay for value: OneWay
        /// </summary>
        OneWay = OneWay,
        /// <summary>
        /// Enum RoundTrip for value: RoundTrip
        /// </summary>
        RoundTrip = RoundTrip,
        /// <summary>
        /// Enum PerTicket for value: PerTicket
        /// </summary>
        PerTicket = PerTicket,
        /// <summary>
        /// Enum PerCoupon for value: PerCoupon
        /// </summary>
        PerCoupon = PerCoupon,
        /// <summary>
        /// Enum PerDirectionOfTravel for value: PerDirectionOfTravel
        /// </summary>
        PerDirectionOfTravel = PerDirectionOfTravel
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Defines PenaltyTypeEnum
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum PenaltyTypeEnum
    {
        /// <summary>
        /// Enum BeforeDeparture for value: BeforeDeparture
        /// </summary>
        [EnumMember(Value = "BeforeDeparture")]
        BeforeDeparture = 1,
        /// <summary>
        /// Enum AfterDeparture for value: AfterDeparture
        /// </summary>
        [EnumMember(Value = "AfterDeparture")]
        AfterDeparture = 2,
        /// <summary>
        /// Enum Anytime for value: Anytime
        /// </summary>
        [EnumMember(Value = "Anytime")]
        Anytime = 3,
        /// <summary>
        /// Enum NoShow for value: NoShow
        /// </summary>
        [EnumMember(Value = "NoShow")]
        NoShow = 4,
        /// <summary>
        /// Enum Minimum for value: Minimum
        /// </summary>
        [EnumMember(Value = "Minimum")]
        Minimum = 5,
        /// <summary>
        /// Enum Maximum for value: Maximum
        /// </summary>
        [EnumMember(Value = "Maximum")]
        Maximum = 6,
        /// <summary>
        /// Enum ExchangeRequired for value: ExchangeRequired
        /// </summary>
        [EnumMember(Value = "ExchangeRequired")]
        ExchangeRequired = 7,
        /// <summary>
        /// Enum ExchangeNotRequired for value: ExchangeNotRequired
        /// </summary>
        [EnumMember(Value = "ExchangeNotRequired")]
        ExchangeNotRequired = 8
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Price
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(PriceDetail), "PriceDetail")]
    public partial class Price :  IEquatable<Price>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Price" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Price() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Price" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="currencyCode">Assigned Type: c-0400:CurrencyCodeISO.</param>
        /// <param name="id">Internally referenced id.</param>
        /// <param name="_base">The total amount not including taxes and/or fees.</param>
        /// <param name="totalTaxes">The total of the taxes included in the total price.</param>
        /// <param name="totalFees">The total of the fees included in the total price.</param>
        /// <param name="totalPrice">The total price of the product in the currency indicated.</param>
        /// <param name="vendorCurrencyTotal">Assigned Type: c-0400:VendorCurrencyAmount.</param>
        /// <param name="exchangeInd">If exchangeInd is true then the price is as a result of an exchange.</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public Price(string type = default(string), string currencyCode = default(string), string id = default(string), float? _base = default(float?), float? totalTaxes = default(float?), float? totalFees = default(float?), float? totalPrice = default(float?), VendorCurrencyAmount vendorCurrencyTotal = default(VendorCurrencyAmount), bool? exchangeInd = default(bool?), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Price and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.CurrencyCode = currencyCode;
            this.Id = id;
            this.Base = _base;
            this.TotalTaxes = totalTaxes;
            this.TotalFees = totalFees;
            this.TotalPrice = totalPrice;
            this.VendorCurrencyTotal = vendorCurrencyTotal;
            this.ExchangeInd = exchangeInd;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CurrencyCodeISO
        /// </summary>
        /// <value>Assigned Type: c-0400:CurrencyCodeISO</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// Internally referenced id
        /// </summary>
        /// <value>Internally referenced id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The total amount not including taxes and/or fees
        /// </summary>
        /// <value>The total amount not including taxes and/or fees</value>
        [DataMember(Name="Base", EmitDefaultValue=false)]
        public float? Base { get; set; }
        /// <summary>
        /// The total of the taxes included in the total price
        /// </summary>
        /// <value>The total of the taxes included in the total price</value>
        [DataMember(Name="TotalTaxes", EmitDefaultValue=false)]
        public float? TotalTaxes { get; set; }
        /// <summary>
        /// The total of the fees included in the total price
        /// </summary>
        /// <value>The total of the fees included in the total price</value>
        [DataMember(Name="TotalFees", EmitDefaultValue=false)]
        public float? TotalFees { get; set; }
        /// <summary>
        /// The total price of the product in the currency indicated
        /// </summary>
        /// <value>The total price of the product in the currency indicated</value>
        [DataMember(Name="TotalPrice", EmitDefaultValue=false)]
        public float? TotalPrice { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:VendorCurrencyAmount
        /// </summary>
        /// <value>Assigned Type: c-0400:VendorCurrencyAmount</value>
        [DataMember(Name="VendorCurrencyTotal", EmitDefaultValue=false)]
        public VendorCurrencyAmount VendorCurrencyTotal { get; set; }
        /// <summary>
        /// If exchangeInd is true then the price is as a result of an exchange
        /// </summary>
        /// <value>If exchangeInd is true then the price is as a result of an exchange</value>
        [DataMember(Name="exchangeInd", EmitDefaultValue=false)]
        public bool? ExchangeInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Price {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  TotalTaxes: ").Append(TotalTaxes).Append("\n");
            sb.Append("  TotalFees: ").Append(TotalFees).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  VendorCurrencyTotal: ").Append(VendorCurrencyTotal).Append("\n");
            sb.Append("  ExchangeInd: ").Append(ExchangeInd).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Price);
        }
        /// <summary>
        /// Returns true if Price instances are equal
        /// </summary>
        /// <param name="input">Instance of Price to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Price input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Base == input.Base ||
                    (this.Base != null &&
                    this.Base.Equals(input.Base))
                ) && 
                (
                    this.TotalTaxes == input.TotalTaxes ||
                    (this.TotalTaxes != null &&
                    this.TotalTaxes.Equals(input.TotalTaxes))
                ) && 
                (
                    this.TotalFees == input.TotalFees ||
                    (this.TotalFees != null &&
                    this.TotalFees.Equals(input.TotalFees))
                ) && 
                (
                    this.TotalPrice == input.TotalPrice ||
                    (this.TotalPrice != null &&
                    this.TotalPrice.Equals(input.TotalPrice))
                ) && 
                (
                    this.VendorCurrencyTotal == input.VendorCurrencyTotal ||
                    (this.VendorCurrencyTotal != null &&
                    this.VendorCurrencyTotal.Equals(input.VendorCurrencyTotal))
                ) && 
                (
                    this.ExchangeInd == input.ExchangeInd ||
                    (this.ExchangeInd != null &&
                    this.ExchangeInd.Equals(input.ExchangeInd))
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Base != null)
                    hashCode = hashCode * 59 + this.Base.GetHashCode();
                if (this.TotalTaxes != null)
                    hashCode = hashCode * 59 + this.TotalTaxes.GetHashCode();
                if (this.TotalFees != null)
                    hashCode = hashCode * 59 + this.TotalFees.GetHashCode();
                if (this.TotalPrice != null)
                    hashCode = hashCode * 59 + this.TotalPrice.GetHashCode();
                if (this.VendorCurrencyTotal != null)
                    hashCode = hashCode * 59 + this.VendorCurrencyTotal.GetHashCode();
                if (this.ExchangeInd != null)
                    hashCode = hashCode * 59 + this.ExchangeInd.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // CurrencyCode (string) pattern
            Regex regexCurrencyCode = new Regex(@"[a-zA-Z]{3}", RegexOptions.CultureInvariant);
            if (false == regexCurrencyCode.Match(this.CurrencyCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyCode, must match a pattern of " + regexCurrencyCode, new [] { "CurrencyCode" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// PriceBreakdown
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(PriceBreakdownAir), "PriceBreakdownAir")]
    public partial class PriceBreakdown :  IEquatable<PriceBreakdown>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceBreakdown" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PriceBreakdown() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceBreakdown" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="amount">Assigned Type: c-0400:Amount.</param>
        /// <param name="extensionPointShared">extensionPointShared.</param>
        public PriceBreakdown(string type = default(string), Amount amount = default(Amount), ExtensionPointShared extensionPointShared = default(ExtensionPointShared))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for PriceBreakdown and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Amount = amount;
            this.ExtensionPointShared = extensionPointShared;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Amount
        /// </summary>
        /// <value>Assigned Type: c-0400:Amount</value>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public Amount Amount { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointShared
        /// </summary>
        [DataMember(Name="ExtensionPoint_Shared", EmitDefaultValue=false)]
        public ExtensionPointShared ExtensionPointShared { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceBreakdown {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ExtensionPointShared: ").Append(ExtensionPointShared).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriceBreakdown);
        }
        /// <summary>
        /// Returns true if PriceBreakdown instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceBreakdown to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceBreakdown input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.ExtensionPointShared == input.ExtensionPointShared ||
                    (this.ExtensionPointShared != null &&
                    this.ExtensionPointShared.Equals(input.ExtensionPointShared))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.ExtensionPointShared != null)
                    hashCode = hashCode * 59 + this.ExtensionPointShared.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// PriceBreakdownAir
    /// </summary>
    [DataContract]
    public partial class PriceBreakdownAir : PriceBreakdown,  IEquatable<PriceBreakdownAir>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceBreakdownAir" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PriceBreakdownAir() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceBreakdownAir" /> class.
        /// </summary>
        /// <param name="quantity">Assigned Type: c-0400:NumberDoubleDigit.</param>
        /// <param name="requestedPassengerType">Assigned Type: c-0400:PassengerTypeCode.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public PriceBreakdownAir(int? quantity = default(int?), string requestedPassengerType = default(string), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "PriceBreakdownAir", Amount amount = default(Amount), ExtensionPointShared extensionPointShared = default(ExtensionPointShared)) : base(type, amount, extensionPointShared)
        {
            this.Quantity = quantity;
            this.RequestedPassengerType = requestedPassengerType;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Assigned Type: c-0400:NumberDoubleDigit
        /// </summary>
        /// <value>Assigned Type: c-0400:NumberDoubleDigit</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:PassengerTypeCode
        /// </summary>
        /// <value>Assigned Type: c-0400:PassengerTypeCode</value>
        [DataMember(Name="requestedPassengerType", EmitDefaultValue=false)]
        public string RequestedPassengerType { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceBreakdownAir {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RequestedPassengerType: ").Append(RequestedPassengerType).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriceBreakdownAir);
        }
        /// <summary>
        /// Returns true if PriceBreakdownAir instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceBreakdownAir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceBreakdownAir input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && base.Equals(input) && 
                (
                    this.RequestedPassengerType == input.RequestedPassengerType ||
                    (this.RequestedPassengerType != null &&
                    this.RequestedPassengerType.Equals(input.RequestedPassengerType))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.RequestedPassengerType != null)
                    hashCode = hashCode * 59 + this.RequestedPassengerType.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // RequestedPassengerType (string) maxLength
            if(this.RequestedPassengerType != null && this.RequestedPassengerType.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestedPassengerType, length must be less than 5.", new [] { "RequestedPassengerType" });
            }
            // RequestedPassengerType (string) minLength
            if(this.RequestedPassengerType != null && this.RequestedPassengerType.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestedPassengerType, length must be greater than 3.", new [] { "RequestedPassengerType" });
            }
            // RequestedPassengerType (string) pattern
            Regex regexRequestedPassengerType = new Regex(@"([a-zA-Z0-9]{3,5})", RegexOptions.CultureInvariant);
            if (false == regexRequestedPassengerType.Match(this.RequestedPassengerType).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestedPassengerType, must match a pattern of " + regexRequestedPassengerType, new [] { "RequestedPassengerType" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// PriceDetail
    /// </summary>
    [DataContract]
    public partial class PriceDetail : Price,  IEquatable<PriceDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PriceDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceDetail" /> class.
        /// </summary>
        /// <param name="priceBreakdown">priceBreakdown.</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public PriceDetail(List<PriceBreakdown> priceBreakdown = default(List<PriceBreakdown>), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "PriceDetail", string currencyCode = default(string), string id = default(string), float? _base = default(float?), float? totalTaxes = default(float?), float? totalFees = default(float?), float? totalPrice = default(float?), VendorCurrencyAmount vendorCurrencyTotal = default(VendorCurrencyAmount), bool? exchangeInd = default(bool?), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, currencyCode, id, _base, totalTaxes, totalFees, totalPrice, vendorCurrencyTotal, exchangeInd, extensionPointSummary)
        {
            this.PriceBreakdown = priceBreakdown;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// Gets or Sets PriceBreakdown
        /// </summary>
        [DataMember(Name="PriceBreakdown", EmitDefaultValue=false)]
        public List<PriceBreakdown> PriceBreakdown { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  PriceBreakdown: ").Append(PriceBreakdown).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriceDetail);
        }
        /// <summary>
        /// Returns true if PriceDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.PriceBreakdown == input.PriceBreakdown ||
                    this.PriceBreakdown != null &&
                    this.PriceBreakdown.SequenceEqual(input.PriceBreakdown)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.PriceBreakdown != null)
                    hashCode = hashCode * 59 + this.PriceBreakdown.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// PricingModifiersAir
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(PricingModifiersAirDetail), "PricingModifiersAirDetail")]
    public partial class PricingModifiersAir :  IEquatable<PricingModifiersAir>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PricingModifiersAir" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PricingModifiersAir() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PricingModifiersAir" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="currencyCode">Assigned Type: c-0400:CurrencyCodeISO.</param>
        /// <param name="fareSelection">Assigned Type: ctar-0400:FareSelection.</param>
        /// <param name="organizationIdentifier">organizationIdentifier (required).</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public PricingModifiersAir(string type = default(string), string currencyCode = default(string), FareSelection fareSelection = default(FareSelection), List<OrganizationIdentifier> organizationIdentifier = default(List<OrganizationIdentifier>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for PricingModifiersAir and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "organizationIdentifier" is required (not null)
            if (organizationIdentifier == null)
            {
                throw new InvalidDataException("organizationIdentifier is a required property for PricingModifiersAir and cannot be null");
            }
            else
            {
                this.OrganizationIdentifier = organizationIdentifier;
            }
            this.CurrencyCode = currencyCode;
            this.FareSelection = fareSelection;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CurrencyCodeISO
        /// </summary>
        /// <value>Assigned Type: c-0400:CurrencyCodeISO</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:FareSelection
        /// </summary>
        /// <value>Assigned Type: ctar-0400:FareSelection</value>
        [DataMember(Name="FareSelection", EmitDefaultValue=false)]
        public FareSelection FareSelection { get; set; }
        /// <summary>
        /// Gets or Sets OrganizationIdentifier
        /// </summary>
        [DataMember(Name="OrganizationIdentifier", EmitDefaultValue=false)]
        public List<OrganizationIdentifier> OrganizationIdentifier { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PricingModifiersAir {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  FareSelection: ").Append(FareSelection).Append("\n");
            sb.Append("  OrganizationIdentifier: ").Append(OrganizationIdentifier).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PricingModifiersAir);
        }
        /// <summary>
        /// Returns true if PricingModifiersAir instances are equal
        /// </summary>
        /// <param name="input">Instance of PricingModifiersAir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PricingModifiersAir input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.FareSelection == input.FareSelection ||
                    (this.FareSelection != null &&
                    this.FareSelection.Equals(input.FareSelection))
                ) && 
                (
                    this.OrganizationIdentifier == input.OrganizationIdentifier ||
                    this.OrganizationIdentifier != null &&
                    this.OrganizationIdentifier.SequenceEqual(input.OrganizationIdentifier)
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.FareSelection != null)
                    hashCode = hashCode * 59 + this.FareSelection.GetHashCode();
                if (this.OrganizationIdentifier != null)
                    hashCode = hashCode * 59 + this.OrganizationIdentifier.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // CurrencyCode (string) pattern
            Regex regexCurrencyCode = new Regex(@"[a-zA-Z]{3}", RegexOptions.CultureInvariant);
            if (false == regexCurrencyCode.Match(this.CurrencyCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyCode, must match a pattern of " + regexCurrencyCode, new [] { "CurrencyCode" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// PricingModifiersAirDetail
    /// </summary>
    [DataContract]
    public partial class PricingModifiersAirDetail : PricingModifiersAir,  IEquatable<PricingModifiersAirDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PricingModifiersAirDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PricingModifiersAirDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PricingModifiersAirDetail" /> class.
        /// </summary>
        /// <param name="brand">Assigned Type: ctbr-0400:Brand.</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public PricingModifiersAirDetail(BrandID brand = default(BrandID), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "PricingModifiersAirDetail", string currencyCode = default(string), FareSelection fareSelection = default(FareSelection), List<OrganizationIdentifier> organizationIdentifier = default(List<OrganizationIdentifier>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, currencyCode, fareSelection, organizationIdentifier, extensionPointSummary)
        {
            this.Brand = brand;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// Assigned Type: ctbr-0400:Brand
        /// </summary>
        /// <value>Assigned Type: ctbr-0400:Brand</value>
        [DataMember(Name="Brand", EmitDefaultValue=false)]
        public BrandID Brand { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PricingModifiersAirDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PricingModifiersAirDetail);
        }
        /// <summary>
        /// Returns true if PricingModifiersAirDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of PricingModifiersAirDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PricingModifiersAirDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Product
    /// </summary>
    [DataContract]
    public partial class Product : ProductID,  IEquatable<Product>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Product() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="quantity">The number of products dependent on context.</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public Product(int? quantity = default(int?), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary), string type = "Product", string id = default(string), string productRef = default(string), Identifier identifier = default(Identifier)) : base(type, id, productRef, identifier)
        {
            this.Quantity = quantity;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// The number of products dependent on context
        /// </summary>
        /// <value>The number of products dependent on context</value>
        [DataMember(Name="Quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Product);
        }
        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Quantity (int?) minimum
            if(this.Quantity < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 0.", new [] { "Quantity" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ProductAir
    /// </summary>
    [DataContract]
    public partial class ProductAir : Product,  IEquatable<ProductAir>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductAir" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductAir() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductAir" /> class.
        /// </summary>
        /// <param name="totalDuration">Total duration of all Segments that are part of this ProductAir.</param>
        /// <param name="flightSegment">flightSegment (required).</param>
        /// <param name="passengerFlight">passengerFlight (required).</param>
        /// <param name="extensionPointCustom">extensionPointCustom.</param>
        public ProductAir(string totalDuration = default(string), List<FlightSegment> flightSegment = default(List<FlightSegment>), List<PassengerFlight> passengerFlight = default(List<PassengerFlight>), ExtensionPointCustom extensionPointCustom = default(ExtensionPointCustom), string type = default(string), string id = default(string), string productRef = default(string), Identifier identifier = default(Identifier), int? quantity = default(int?), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(quantity, extensionPointSummary)
        {
            // to ensure "flightSegment" is required (not null)
            if (flightSegment == null)
            {
                throw new InvalidDataException("flightSegment is a required property for ProductAir and cannot be null");
            }
            else
            {
                this.FlightSegment = flightSegment;
            }
            // to ensure "passengerFlight" is required (not null)
            if (passengerFlight == null)
            {
                throw new InvalidDataException("passengerFlight is a required property for ProductAir and cannot be null");
            }
            else
            {
                this.PassengerFlight = passengerFlight;
            }
            this.TotalDuration = totalDuration;
            this.ExtensionPointCustom = extensionPointCustom;
        }
        /// <summary>
        /// Total duration of all Segments that are part of this ProductAir
        /// </summary>
        /// <value>Total duration of all Segments that are part of this ProductAir</value>
        [DataMember(Name="totalDuration", EmitDefaultValue=false)]
        public string TotalDuration { get; set; }
        /// <summary>
        /// Gets or Sets FlightSegment
        /// </summary>
        [DataMember(Name="FlightSegment", EmitDefaultValue=false)]
        public List<FlightSegment> FlightSegment { get; set; }
        /// <summary>
        /// Gets or Sets PassengerFlight
        /// </summary>
        [DataMember(Name="PassengerFlight", EmitDefaultValue=false)]
        public List<PassengerFlight> PassengerFlight { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointCustom
        /// </summary>
        [DataMember(Name="ExtensionPoint_Custom", EmitDefaultValue=false)]
        public ExtensionPointCustom ExtensionPointCustom { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductAir {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  TotalDuration: ").Append(TotalDuration).Append("\n");
            sb.Append("  FlightSegment: ").Append(FlightSegment).Append("\n");
            sb.Append("  PassengerFlight: ").Append(PassengerFlight).Append("\n");
            sb.Append("  ExtensionPointCustom: ").Append(ExtensionPointCustom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductAir);
        }
        /// <summary>
        /// Returns true if ProductAir instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductAir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductAir input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.TotalDuration == input.TotalDuration ||
                    (this.TotalDuration != null &&
                    this.TotalDuration.Equals(input.TotalDuration))
                ) && base.Equals(input) && 
                (
                    this.FlightSegment == input.FlightSegment ||
                    this.FlightSegment != null &&
                    this.FlightSegment.SequenceEqual(input.FlightSegment)
                ) && base.Equals(input) && 
                (
                    this.PassengerFlight == input.PassengerFlight ||
                    this.PassengerFlight != null &&
                    this.PassengerFlight.SequenceEqual(input.PassengerFlight)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointCustom == input.ExtensionPointCustom ||
                    (this.ExtensionPointCustom != null &&
                    this.ExtensionPointCustom.Equals(input.ExtensionPointCustom))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.TotalDuration != null)
                    hashCode = hashCode * 59 + this.TotalDuration.GetHashCode();
                if (this.FlightSegment != null)
                    hashCode = hashCode * 59 + this.FlightSegment.GetHashCode();
                if (this.PassengerFlight != null)
                    hashCode = hashCode * 59 + this.PassengerFlight.GetHashCode();
                if (this.ExtensionPointCustom != null)
                    hashCode = hashCode * 59 + this.ExtensionPointCustom.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ProductCriteriaAir
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class ProductCriteriaAir :  IEquatable<ProductCriteriaAir>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductCriteriaAir" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductCriteriaAir() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductCriteriaAir" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="sequence">Assigned Type: c-0400:NonnegativeInteger (required).</param>
        /// <param name="specificFlightCriteria">specificFlightCriteria (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public ProductCriteriaAir(string type = default(string), int? sequence = default(int?), List<SpecificFlightCriteria> specificFlightCriteria = default(List<SpecificFlightCriteria>), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ProductCriteriaAir and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "sequence" is required (not null)
            if (sequence == null)
            {
                throw new InvalidDataException("sequence is a required property for ProductCriteriaAir and cannot be null");
            }
            else
            {
                this.Sequence = sequence;
            }
            // to ensure "specificFlightCriteria" is required (not null)
            if (specificFlightCriteria == null)
            {
                throw new InvalidDataException("specificFlightCriteria is a required property for ProductCriteriaAir and cannot be null");
            }
            else
            {
                this.SpecificFlightCriteria = specificFlightCriteria;
            }
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-0400:NonnegativeInteger</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }
        /// <summary>
        /// Gets or Sets SpecificFlightCriteria
        /// </summary>
        [DataMember(Name="SpecificFlightCriteria", EmitDefaultValue=false)]
        public List<SpecificFlightCriteria> SpecificFlightCriteria { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductCriteriaAir {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  SpecificFlightCriteria: ").Append(SpecificFlightCriteria).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductCriteriaAir);
        }
        /// <summary>
        /// Returns true if ProductCriteriaAir instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductCriteriaAir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductCriteriaAir input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && 
                (
                    this.SpecificFlightCriteria == input.SpecificFlightCriteria ||
                    this.SpecificFlightCriteria != null &&
                    this.SpecificFlightCriteria.SequenceEqual(input.SpecificFlightCriteria)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.SpecificFlightCriteria != null)
                    hashCode = hashCode * 59 + this.SpecificFlightCriteria.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Sequence (int?) minimum
            if(this.Sequence < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sequence, must be a value greater than or equal to 0.", new [] { "Sequence" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ProductID
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(Product), "Product")]
    [JsonSubtypes.KnownSubType(typeof(ProductAir), "ProductAir")]
    public partial class ProductID :  IEquatable<ProductID>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductID" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductID() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductID" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">Local indentifier within a given message for this object..</param>
        /// <param name="productRef">Used to reference another instance of this object in the same message.</param>
        /// <param name="identifier">Assigned Type: c-0400:Identifier.</param>
        public ProductID(string type = default(string), string id = default(string), string productRef = default(string), Identifier identifier = default(Identifier))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ProductID and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Id = id;
            this.ProductRef = productRef;
            this.Identifier = identifier;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Local indentifier within a given message for this object.
        /// </summary>
        /// <value>Local indentifier within a given message for this object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Used to reference another instance of this object in the same message
        /// </summary>
        /// <value>Used to reference another instance of this object in the same message</value>
        [DataMember(Name="productRef", EmitDefaultValue=false)]
        public string ProductRef { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Identifier
        /// </summary>
        /// <value>Assigned Type: c-0400:Identifier</value>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public Identifier Identifier { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductID {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductRef: ").Append(ProductRef).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductID);
        }
        /// <summary>
        /// Returns true if ProductID instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductID input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ProductRef == input.ProductRef ||
                    (this.ProductRef != null &&
                    this.ProductRef.Equals(input.ProductRef))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ProductRef != null)
                    hashCode = hashCode * 59 + this.ProductRef.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ProductOptions
    /// </summary>
    [DataContract]
    public partial class ProductOptions : ProductOptionsID,  IEquatable<ProductOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductOptions" /> class.
        /// </summary>
        /// <param name="sequence">Assigned Type: c-0400:NonnegativeInteger.</param>
        /// <param name="product">product (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public ProductOptions(int? sequence = default(int?), List<ProductID> product = default(List<ProductID>), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "ProductOptions", string id = default(string), Identifier identifier = default(Identifier), string productOptionsRef = default(string)) : base(type, id, identifier, productOptionsRef)
        {
            // to ensure "product" is required (not null)
            if (product == null)
            {
                throw new InvalidDataException("product is a required property for ProductOptions and cannot be null");
            }
            else
            {
                this.Product = product;
            }
            this.Sequence = sequence;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Assigned Type: c-0400:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-0400:NonnegativeInteger</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }
        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="Product", EmitDefaultValue=false)]
        public List<ProductID> Product { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductOptions {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductOptions);
        }
        /// <summary>
        /// Returns true if ProductOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductOptions input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && base.Equals(input) && 
                (
                    this.Product == input.Product ||
                    this.Product != null &&
                    this.Product.SequenceEqual(input.Product)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Sequence (int?) minimum
            if(this.Sequence < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sequence, must be a value greater than or equal to 0.", new [] { "Sequence" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ProductOptionsID
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(ProductOptions), "ProductOptions")]
    public partial class ProductOptionsID :  IEquatable<ProductOptionsID>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductOptionsID" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductOptionsID() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductOptionsID" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">Local indentifier within a given message for this object..</param>
        /// <param name="identifier">Assigned Type: c-0400:Identifier.</param>
        /// <param name="productOptionsRef">Used to reference another instance of this object in the same message.</param>
        public ProductOptionsID(string type = default(string), string id = default(string), Identifier identifier = default(Identifier), string productOptionsRef = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ProductOptionsID and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Id = id;
            this.Identifier = identifier;
            this.ProductOptionsRef = productOptionsRef;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Local indentifier within a given message for this object.
        /// </summary>
        /// <value>Local indentifier within a given message for this object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Identifier
        /// </summary>
        /// <value>Assigned Type: c-0400:Identifier</value>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public Identifier Identifier { get; set; }
        /// <summary>
        /// Used to reference another instance of this object in the same message
        /// </summary>
        /// <value>Used to reference another instance of this object in the same message</value>
        [DataMember(Name="ProductOptionsRef", EmitDefaultValue=false)]
        public string ProductOptionsRef { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductOptionsID {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  ProductOptionsRef: ").Append(ProductOptionsRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductOptionsID);
        }
        /// <summary>
        /// Returns true if ProductOptionsID instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductOptionsID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductOptionsID input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.ProductOptionsRef == input.ProductOptionsRef ||
                    (this.ProductOptionsRef != null &&
                    this.ProductOptionsRef.Equals(input.ProductOptionsRef))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.ProductOptionsRef != null)
                    hashCode = hashCode * 59 + this.ProductOptionsRef.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// a pseudo city information contains the details about the corporate user of a computer reservation system (CRS) or global distribution system (GDS), typically a travel agency.
    /// </summary>
    [DataContract]
    public partial class PseudoCityInfo :  IEquatable<PseudoCityInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PseudoCityInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PseudoCityInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PseudoCityInfo" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="providerCode">Assigned Type: c-0400:SupplierCode (required).</param>
        public PseudoCityInfo(string value = default(string), string providerCode = default(string))
        {
            // to ensure "providerCode" is required (not null)
            if (providerCode == null)
            {
                throw new InvalidDataException("providerCode is a required property for PseudoCityInfo and cannot be null");
            }
            else
            {
                this.ProviderCode = providerCode;
            }
            this.Value = value;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:SupplierCode
        /// </summary>
        /// <value>Assigned Type: c-0400:SupplierCode</value>
        [DataMember(Name="providerCode", EmitDefaultValue=false)]
        public string ProviderCode { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PseudoCityInfo {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ProviderCode: ").Append(ProviderCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PseudoCityInfo);
        }
        /// <summary>
        /// Returns true if PseudoCityInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PseudoCityInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PseudoCityInfo input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.ProviderCode == input.ProviderCode ||
                    (this.ProviderCode != null &&
                    this.ProviderCode.Equals(input.ProviderCode))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.ProviderCode != null)
                    hashCode = hashCode * 59 + this.ProviderCode.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 10.", new [] { "Value" });
            }
            // Value (string) minLength
            if(this.Value != null && this.Value.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be greater than 2.", new [] { "Value" });
            }
            // Value (string) pattern
            Regex regexValue = new Regex(@"([a-zA-Z0-9]{2,10})", RegexOptions.CultureInvariant);
            if (false == regexValue.Match(this.Value).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must match a pattern of " + regexValue, new [] { "Value" });
            }
            // ProviderCode (string) maxLength
            if(this.ProviderCode != null && this.ProviderCode.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProviderCode, length must be less than 5.", new [] { "ProviderCode" });
            }
            // ProviderCode (string) minLength
            if(this.ProviderCode != null && this.ProviderCode.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProviderCode, length must be greater than 2.", new [] { "ProviderCode" });
            }
            // ProviderCode (string) pattern
            Regex regexProviderCode = new Regex(@"([a-zA-Z0-9]{2,5})", RegexOptions.CultureInvariant);
            if (false == regexProviderCode.Match(this.ProviderCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProviderCode, must match a pattern of " + regexProviderCode, new [] { "ProviderCode" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// RateDescription
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(RateDescriptionDetail), "RateDescriptionDetail")]
    public partial class RateDescription :  IEquatable<RateDescription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RateDescription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RateDescription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RateDescription" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="title">Assigned Type: c-0400:String.</param>
        /// <param name="id">Internally referenced id.</param>
        /// <param name="textFormatted">textFormatted (required).</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public RateDescription(string type = default(string), string title = default(string), string id = default(string), List<TextFormatted> textFormatted = default(List<TextFormatted>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for RateDescription and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "textFormatted" is required (not null)
            if (textFormatted == null)
            {
                throw new InvalidDataException("textFormatted is a required property for RateDescription and cannot be null");
            }
            else
            {
                this.TextFormatted = textFormatted;
            }
            this.Title = title;
            this.Id = id;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:String
        /// </summary>
        /// <value>Assigned Type: c-0400:String</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Internally referenced id
        /// </summary>
        /// <value>Internally referenced id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets TextFormatted
        /// </summary>
        [DataMember(Name="TextFormatted", EmitDefaultValue=false)]
        public List<TextFormatted> TextFormatted { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RateDescription {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TextFormatted: ").Append(TextFormatted).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RateDescription);
        }
        /// <summary>
        /// Returns true if RateDescription instances are equal
        /// </summary>
        /// <param name="input">Instance of RateDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RateDescription input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TextFormatted == input.TextFormatted ||
                    this.TextFormatted != null &&
                    this.TextFormatted.SequenceEqual(input.TextFormatted)
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TextFormatted != null)
                    hashCode = hashCode * 59 + this.TextFormatted.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if(this.Title != null && this.Title.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 512.", new [] { "Title" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// RateDescriptionDetail
    /// </summary>
    [DataContract]
    public partial class RateDescriptionDetail : RateDescription,  IEquatable<RateDescriptionDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RateDescriptionDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RateDescriptionDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RateDescriptionDetail" /> class.
        /// </summary>
        /// <param name="sequence">The order of the text block, if there are more than one block..</param>
        /// <param name="description">Assigned Type: c-0400:Description.</param>
        /// <param name="image">Assigned Type: c-0400:Image.</param>
        /// <param name="uRL">A URL for this block.</param>
        /// <param name="dateCreateModify">Assigned Type: c-0400:DateCreateModify (required).</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public RateDescriptionDetail(int? sequence = default(int?), string description = default(string), Image image = default(Image), string uRL = default(string), DateCreateModify dateCreateModify = default(DateCreateModify), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "RateDescriptionDetail", string title = default(string), string id = default(string), List<TextFormatted> textFormatted = default(List<TextFormatted>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, title, id, textFormatted, extensionPointSummary)
        {
            // to ensure "dateCreateModify" is required (not null)
            if (dateCreateModify == null)
            {
                throw new InvalidDataException("dateCreateModify is a required property for RateDescriptionDetail and cannot be null");
            }
            else
            {
                this.DateCreateModify = dateCreateModify;
            }
            this.Sequence = sequence;
            this.Description = description;
            this.Image = image;
            this.URL = uRL;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// The order of the text block, if there are more than one block.
        /// </summary>
        /// <value>The order of the text block, if there are more than one block.</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Description
        /// </summary>
        /// <value>Assigned Type: c-0400:Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Image
        /// </summary>
        /// <value>Assigned Type: c-0400:Image</value>
        [DataMember(Name="Image", EmitDefaultValue=false)]
        public Image Image { get; set; }
        /// <summary>
        /// A URL for this block
        /// </summary>
        /// <value>A URL for this block</value>
        [DataMember(Name="URL", EmitDefaultValue=false)]
        public string URL { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:DateCreateModify
        /// </summary>
        /// <value>Assigned Type: c-0400:DateCreateModify</value>
        [DataMember(Name="DateCreateModify", EmitDefaultValue=false)]
        public DateCreateModify DateCreateModify { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RateDescriptionDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  DateCreateModify: ").Append(DateCreateModify).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RateDescriptionDetail);
        }
        /// <summary>
        /// Returns true if RateDescriptionDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of RateDescriptionDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RateDescriptionDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && base.Equals(input) && 
                (
                    this.URL == input.URL ||
                    (this.URL != null &&
                    this.URL.Equals(input.URL))
                ) && base.Equals(input) && 
                (
                    this.DateCreateModify == input.DateCreateModify ||
                    (this.DateCreateModify != null &&
                    this.DateCreateModify.Equals(input.DateCreateModify))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.URL != null)
                    hashCode = hashCode * 59 + this.URL.GetHashCode();
                if (this.DateCreateModify != null)
                    hashCode = hashCode * 59 + this.DateCreateModify.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ReferenceList
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(ReferenceListBrand), "ReferenceListBrand")]
    [JsonSubtypes.KnownSubType(typeof(ReferenceListProduct), "ReferenceListProduct")]
    [JsonSubtypes.KnownSubType(typeof(ReferenceListBrandFullInfo), "ReferenceListBrandFullInfo")]
    [JsonSubtypes.KnownSubType(typeof(ReferenceListTextBlock), "ReferenceListTextBlock")]
    [JsonSubtypes.KnownSubType(typeof(ReferenceListFlight), "ReferenceListFlight")]
    [JsonSubtypes.KnownSubType(typeof(ReferenceListTermsAndConditions), "ReferenceListTermsAndConditions")]
    public partial class ReferenceList :  IEquatable<ReferenceList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReferenceList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceList" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">Uniquely identifies for the Reference List.</param>
        /// <param name="extensionPointShared">extensionPointShared.</param>
        public ReferenceList(string type = default(string), string id = default(string), ExtensionPointShared extensionPointShared = default(ExtensionPointShared))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ReferenceList and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Id = id;
            this.ExtensionPointShared = extensionPointShared;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Uniquely identifies for the Reference List
        /// </summary>
        /// <value>Uniquely identifies for the Reference List</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointShared
        /// </summary>
        [DataMember(Name="ExtensionPoint_Shared", EmitDefaultValue=false)]
        public ExtensionPointShared ExtensionPointShared { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReferenceList {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ExtensionPointShared: ").Append(ExtensionPointShared).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReferenceList);
        }
        /// <summary>
        /// Returns true if ReferenceList instances are equal
        /// </summary>
        /// <param name="input">Instance of ReferenceList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferenceList input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ExtensionPointShared == input.ExtensionPointShared ||
                    (this.ExtensionPointShared != null &&
                    this.ExtensionPointShared.Equals(input.ExtensionPointShared))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ExtensionPointShared != null)
                    hashCode = hashCode * 59 + this.ExtensionPointShared.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ReferenceListBrand
    /// </summary>
    [DataContract]
    public partial class ReferenceListBrand : ReferenceList,  IEquatable<ReferenceListBrand>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceListBrand" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReferenceListBrand() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceListBrand" /> class.
        /// </summary>
        /// <param name="brand">brand.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public ReferenceListBrand(List<BrandID> brand = default(List<BrandID>), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "ReferenceListBrand", string id = default(string), ExtensionPointShared extensionPointShared = default(ExtensionPointShared)) : base(type, id, extensionPointShared)
        {
            this.Brand = brand;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name="Brand", EmitDefaultValue=false)]
        public List<BrandID> Brand { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReferenceListBrand {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReferenceListBrand);
        }
        /// <summary>
        /// Returns true if ReferenceListBrand instances are equal
        /// </summary>
        /// <param name="input">Instance of ReferenceListBrand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferenceListBrand input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Brand == input.Brand ||
                    this.Brand != null &&
                    this.Brand.SequenceEqual(input.Brand)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ReferenceListBrandFullInfo
    /// </summary>
    [DataContract]
    public partial class ReferenceListBrandFullInfo : ReferenceList,  IEquatable<ReferenceListBrandFullInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceListBrandFullInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReferenceListBrandFullInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceListBrandFullInfo" /> class.
        /// </summary>
        /// <param name="brandFullInfo">brandFullInfo.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public ReferenceListBrandFullInfo(List<BrandFullInfoID> brandFullInfo = default(List<BrandFullInfoID>), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "ReferenceListBrandFullInfo", string id = default(string), ExtensionPointShared extensionPointShared = default(ExtensionPointShared)) : base(type, id, extensionPointShared)
        {
            this.BrandFullInfo = brandFullInfo;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets BrandFullInfo
        /// </summary>
        [DataMember(Name="BrandFullInfo", EmitDefaultValue=false)]
        public List<BrandFullInfoID> BrandFullInfo { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReferenceListBrandFullInfo {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BrandFullInfo: ").Append(BrandFullInfo).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReferenceListBrandFullInfo);
        }
        /// <summary>
        /// Returns true if ReferenceListBrandFullInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ReferenceListBrandFullInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferenceListBrandFullInfo input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.BrandFullInfo == input.BrandFullInfo ||
                    this.BrandFullInfo != null &&
                    this.BrandFullInfo.SequenceEqual(input.BrandFullInfo)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BrandFullInfo != null)
                    hashCode = hashCode * 59 + this.BrandFullInfo.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ReferenceListFlight
    /// </summary>
    [DataContract]
    public partial class ReferenceListFlight : ReferenceList,  IEquatable<ReferenceListFlight>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceListFlight" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReferenceListFlight() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceListFlight" /> class.
        /// </summary>
        /// <param name="flight">flight (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public ReferenceListFlight(List<FlightID> flight = default(List<FlightID>), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "ReferenceListFlight", string id = default(string), ExtensionPointShared extensionPointShared = default(ExtensionPointShared)) : base(type, id, extensionPointShared)
        {
            // to ensure "flight" is required (not null)
            if (flight == null)
            {
                throw new InvalidDataException("flight is a required property for ReferenceListFlight and cannot be null");
            }
            else
            {
                this.Flight = flight;
            }
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Flight
        /// </summary>
        [DataMember(Name="Flight", EmitDefaultValue=false)]
        public List<FlightID> Flight { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReferenceListFlight {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Flight: ").Append(Flight).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReferenceListFlight);
        }
        /// <summary>
        /// Returns true if ReferenceListFlight instances are equal
        /// </summary>
        /// <param name="input">Instance of ReferenceListFlight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferenceListFlight input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Flight == input.Flight ||
                    this.Flight != null &&
                    this.Flight.SequenceEqual(input.Flight)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Flight != null)
                    hashCode = hashCode * 59 + this.Flight.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ReferenceListProduct
    /// </summary>
    [DataContract]
    public partial class ReferenceListProduct : ReferenceList,  IEquatable<ReferenceListProduct>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceListProduct" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReferenceListProduct() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceListProduct" /> class.
        /// </summary>
        /// <param name="product">product.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public ReferenceListProduct(List<ProductID> product = default(List<ProductID>), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "ReferenceListProduct", string id = default(string), ExtensionPointShared extensionPointShared = default(ExtensionPointShared)) : base(type, id, extensionPointShared)
        {
            this.Product = product;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="Product", EmitDefaultValue=false)]
        public List<ProductID> Product { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReferenceListProduct {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReferenceListProduct);
        }
        /// <summary>
        /// Returns true if ReferenceListProduct instances are equal
        /// </summary>
        /// <param name="input">Instance of ReferenceListProduct to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferenceListProduct input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Product == input.Product ||
                    this.Product != null &&
                    this.Product.SequenceEqual(input.Product)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ReferenceListTermsAndConditions
    /// </summary>
    [DataContract]
    public partial class ReferenceListTermsAndConditions : ReferenceList,  IEquatable<ReferenceListTermsAndConditions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceListTermsAndConditions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReferenceListTermsAndConditions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceListTermsAndConditions" /> class.
        /// </summary>
        /// <param name="termsAndConditions">termsAndConditions.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public ReferenceListTermsAndConditions(List<TermsAndConditionsID> termsAndConditions = default(List<TermsAndConditionsID>), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "ReferenceListTermsAndConditions", string id = default(string), ExtensionPointShared extensionPointShared = default(ExtensionPointShared)) : base(type, id, extensionPointShared)
        {
            this.TermsAndConditions = termsAndConditions;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets TermsAndConditions
        /// </summary>
        [DataMember(Name="TermsAndConditions", EmitDefaultValue=false)]
        public List<TermsAndConditionsID> TermsAndConditions { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReferenceListTermsAndConditions {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  TermsAndConditions: ").Append(TermsAndConditions).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReferenceListTermsAndConditions);
        }
        /// <summary>
        /// Returns true if ReferenceListTermsAndConditions instances are equal
        /// </summary>
        /// <param name="input">Instance of ReferenceListTermsAndConditions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferenceListTermsAndConditions input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.TermsAndConditions == input.TermsAndConditions ||
                    this.TermsAndConditions != null &&
                    this.TermsAndConditions.SequenceEqual(input.TermsAndConditions)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.TermsAndConditions != null)
                    hashCode = hashCode * 59 + this.TermsAndConditions.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// ReferenceListTextBlock
    /// </summary>
    [DataContract]
    public partial class ReferenceListTextBlock : ReferenceList,  IEquatable<ReferenceListTextBlock>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceListTextBlock" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReferenceListTextBlock() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceListTextBlock" /> class.
        /// </summary>
        /// <param name="textBlock">textBlock.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public ReferenceListTextBlock(List<TextBlock> textBlock = default(List<TextBlock>), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "ReferenceListTextBlock", string id = default(string), ExtensionPointShared extensionPointShared = default(ExtensionPointShared)) : base(type, id, extensionPointShared)
        {
            this.TextBlock = textBlock;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets TextBlock
        /// </summary>
        [DataMember(Name="TextBlock", EmitDefaultValue=false)]
        public List<TextBlock> TextBlock { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReferenceListTextBlock {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  TextBlock: ").Append(TextBlock).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReferenceListTextBlock);
        }
        /// <summary>
        /// Returns true if ReferenceListTextBlock instances are equal
        /// </summary>
        /// <param name="input">Instance of ReferenceListTextBlock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferenceListTextBlock input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.TextBlock == input.TextBlock ||
                    this.TextBlock != null &&
                    this.TextBlock.SequenceEqual(input.TextBlock)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.TextBlock != null)
                    hashCode = hashCode * 59 + this.TextBlock.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Refund
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class Refund :  IEquatable<Refund>, IValidatableObject
    {
        /// <summary>
        /// Assigned Type: ctar-0400:PenaltyAppliesToEnum
        /// </summary>
        /// <value>Assigned Type: ctar-0400:PenaltyAppliesToEnum</value>
        [DataMember(Name="PenaltyAppliesTo", EmitDefaultValue=false)]
        public PenaltyAppliesToEnum? PenaltyAppliesTo { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Refund" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Refund() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Refund" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="penaltyTypes">penaltyTypes.</param>
        /// <param name="amount">Assigned Type: c-0400:CurrencyAmount.</param>
        /// <param name="penaltyAppliesTo">Assigned Type: ctar-0400:PenaltyAppliesToEnum.</param>
        /// <param name="notPermittedInd">Changes are not permitted.</param>
        /// <param name="indeterminateInd">structured fare rules could not be determined for this category.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public Refund(string type = default(string), List<PenaltyTypeEnum> penaltyTypes = default(List<PenaltyTypeEnum>), CurrencyAmount amount = default(CurrencyAmount), PenaltyAppliesToEnum? penaltyAppliesTo = default(PenaltyAppliesToEnum?), bool? notPermittedInd = default(bool?), bool? indeterminateInd = default(bool?), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Refund and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.PenaltyTypes = penaltyTypes;
            this.Amount = amount;
            this.PenaltyAppliesTo = penaltyAppliesTo;
            this.NotPermittedInd = notPermittedInd;
            this.IndeterminateInd = indeterminateInd;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets PenaltyTypes
        /// </summary>
        [DataMember(Name="penaltyTypes", EmitDefaultValue=false)]
        public List<PenaltyTypeEnum> PenaltyTypes { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CurrencyAmount
        /// </summary>
        /// <value>Assigned Type: c-0400:CurrencyAmount</value>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public CurrencyAmount Amount { get; set; }
        /// <summary>
        /// Changes are not permitted
        /// </summary>
        /// <value>Changes are not permitted</value>
        [DataMember(Name="notPermittedInd", EmitDefaultValue=false)]
        public bool? NotPermittedInd { get; set; }
        /// <summary>
        /// structured fare rules could not be determined for this category
        /// </summary>
        /// <value>structured fare rules could not be determined for this category</value>
        [DataMember(Name="indeterminateInd", EmitDefaultValue=false)]
        public bool? IndeterminateInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Refund {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PenaltyTypes: ").Append(PenaltyTypes).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PenaltyAppliesTo: ").Append(PenaltyAppliesTo).Append("\n");
            sb.Append("  NotPermittedInd: ").Append(NotPermittedInd).Append("\n");
            sb.Append("  IndeterminateInd: ").Append(IndeterminateInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Refund);
        }
        /// <summary>
        /// Returns true if Refund instances are equal
        /// </summary>
        /// <param name="input">Instance of Refund to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Refund input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.PenaltyTypes == input.PenaltyTypes ||
                    this.PenaltyTypes != null &&
                    this.PenaltyTypes.SequenceEqual(input.PenaltyTypes)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.PenaltyAppliesTo == input.PenaltyAppliesTo ||
                    (this.PenaltyAppliesTo != null &&
                    this.PenaltyAppliesTo.Equals(input.PenaltyAppliesTo))
                ) && 
                (
                    this.NotPermittedInd == input.NotPermittedInd ||
                    (this.NotPermittedInd != null &&
                    this.NotPermittedInd.Equals(input.NotPermittedInd))
                ) && 
                (
                    this.IndeterminateInd == input.IndeterminateInd ||
                    (this.IndeterminateInd != null &&
                    this.IndeterminateInd.Equals(input.IndeterminateInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.PenaltyTypes != null)
                    hashCode = hashCode * 59 + this.PenaltyTypes.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.PenaltyAppliesTo != null)
                    hashCode = hashCode * 59 + this.PenaltyAppliesTo.GetHashCode();
                if (this.NotPermittedInd != null)
                    hashCode = hashCode * 59 + this.NotPermittedInd.GetHashCode();
                if (this.IndeterminateInd != null)
                    hashCode = hashCode * 59 + this.IndeterminateInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Result
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class Result :  IEquatable<Result>, IValidatableObject
    {
        /// <summary>
        /// Indication of the processing status of the response message
        /// </summary>
        /// <value>Indication of the processing status of the response message</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public ResultStatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Result" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Result() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Result" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="status">Indication of the processing status of the response message.</param>
        /// <param name="error">error.</param>
        /// <param name="warning">warning.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public Result(string type = default(string), ResultStatusEnum? status = default(ResultStatusEnum?), List<Error> error = default(List<Error>), List<Warning> warning = default(List<Warning>), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Result and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Status = status;
            this.Error = error;
            this.Warning = warning;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="Error", EmitDefaultValue=false)]
        public List<Error> Error { get; set; }
        /// <summary>
        /// Gets or Sets Warning
        /// </summary>
        [DataMember(Name="Warning", EmitDefaultValue=false)]
        public List<Warning> Warning { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Result {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Warning: ").Append(Warning).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Result);
        }
        /// <summary>
        /// Returns true if Result instances are equal
        /// </summary>
        /// <param name="input">Instance of Result to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Result input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Error == input.Error ||
                    this.Error != null &&
                    this.Error.SequenceEqual(input.Error)
                ) && 
                (
                    this.Warning == input.Warning ||
                    this.Warning != null &&
                    this.Warning.SequenceEqual(input.Warning)
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.Warning != null)
                    hashCode = hashCode * 59 + this.Warning.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// The status of an error or warning
    /// </summary>
    /// <value>The status of an error or warning</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ResultStatusEnum
    {
        /// <summary>
        /// Enum Notprocessed for value: Not processed
        /// </summary>
        [EnumMember(Value = "Not processed")]
        Notprocessed = 1,
        /// <summary>
        /// Enum Incomplete for value: Incomplete
        /// </summary>
        [EnumMember(Value = "Incomplete")]
        Incomplete = 2,
        /// <summary>
        /// Enum Complete for value: Complete
        /// </summary>
        [EnumMember(Value = "Complete")]
        Complete = 3,
        /// <summary>
        /// Enum Unknown for value: Unknown
        /// </summary>
        [EnumMember(Value = "Unknown")]
        Unknown = 4
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Used when multiple maximumStayDuration and maximumStayDate are given and you must indicate which one applies. (max stay is 1 year or 15thDecember, the later of the two)
    /// </summary>
    /// <value>Used when multiple maximumStayDuration and maximumStayDate are given and you must indicate which one applies. (max stay is 1 year or 15thDecember, the later of the two)</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum RuleAppliesEnum
    {
        /// <summary>
        /// Enum EarliestApplies for value: EarliestApplies
        /// </summary>
        [EnumMember(Value = "EarliestApplies")]
        EarliestApplies = 1,
        /// <summary>
        /// Enum LaterApplies for value: LaterApplies
        /// </summary>
        [EnumMember(Value = "LaterApplies")]
        LaterApplies = 2
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// SearchCriteriaFlight
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class SearchCriteriaFlight :  IEquatable<SearchCriteriaFlight>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCriteriaFlight" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchCriteriaFlight() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCriteriaFlight" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="departureDate">Departure date (required).</param>
        /// <param name="departureTime">Detarture time.</param>
        /// <param name="legSequence">Assigned Type: ctar-0400:SegmentSequence.</param>
        /// <param name="from">Assigned Type: ctar-0400:FromTo (required).</param>
        /// <param name="to">Assigned Type: ctar-0400:FromTo (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public SearchCriteriaFlight(string type = default(string), DateTime? departureDate = default(DateTime?), string departureTime = default(string), int? legSequence = default(int?), FromTo from = default(FromTo), FromTo to = default(FromTo), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for SearchCriteriaFlight and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "departureDate" is required (not null)
            if (departureDate == null)
            {
                throw new InvalidDataException("departureDate is a required property for SearchCriteriaFlight and cannot be null");
            }
            else
            {
                this.DepartureDate = departureDate;
            }
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for SearchCriteriaFlight and cannot be null");
            }
            else
            {
                this.From = from;
            }
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for SearchCriteriaFlight and cannot be null");
            }
            else
            {
                this.To = to;
            }
            this.DepartureTime = departureTime;
            this.LegSequence = legSequence;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Departure date
        /// </summary>
        /// <value>Departure date</value>
        [DataMember(Name="departureDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DepartureDate { get; set; }
        /// <summary>
        /// Detarture time
        /// </summary>
        /// <value>Detarture time</value>
        [DataMember(Name="departureTime", EmitDefaultValue=false)]
        public string DepartureTime { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:SegmentSequence
        /// </summary>
        /// <value>Assigned Type: ctar-0400:SegmentSequence</value>
        [DataMember(Name="legSequence", EmitDefaultValue=false)]
        public int? LegSequence { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:FromTo
        /// </summary>
        /// <value>Assigned Type: ctar-0400:FromTo</value>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public FromTo From { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:FromTo
        /// </summary>
        /// <value>Assigned Type: ctar-0400:FromTo</value>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public FromTo To { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchCriteriaFlight {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DepartureDate: ").Append(DepartureDate).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("  LegSequence: ").Append(LegSequence).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchCriteriaFlight);
        }
        /// <summary>
        /// Returns true if SearchCriteriaFlight instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchCriteriaFlight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchCriteriaFlight input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.DepartureDate == input.DepartureDate ||
                    (this.DepartureDate != null &&
                    this.DepartureDate.Equals(input.DepartureDate))
                ) && 
                (
                    this.DepartureTime == input.DepartureTime ||
                    (this.DepartureTime != null &&
                    this.DepartureTime.Equals(input.DepartureTime))
                ) && 
                (
                    this.LegSequence == input.LegSequence ||
                    (this.LegSequence != null &&
                    this.LegSequence.Equals(input.LegSequence))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.DepartureDate != null)
                    hashCode = hashCode * 59 + this.DepartureDate.GetHashCode();
                if (this.DepartureTime != null)
                    hashCode = hashCode * 59 + this.DepartureTime.GetHashCode();
                if (this.LegSequence != null)
                    hashCode = hashCode * 59 + this.LegSequence.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// SearchCriteriaFlightChange
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(SearchCriteriaFlightChangeByLocation), "SearchCriteriaFlightChangeByLocation")]
    [JsonSubtypes.KnownSubType(typeof(SearchCriteriaFlightChangeSpecific), "SearchCriteriaFlightChangeSpecific")]
    public partial class SearchCriteriaFlightChange :  IEquatable<SearchCriteriaFlightChange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCriteriaFlightChange" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchCriteriaFlightChange() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCriteriaFlightChange" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="sequence">Assigned Type: c-0400:NonnegativeInteger.</param>
        /// <param name="departureDate">Assigned Type: ota2:LocalDate (required).</param>
        /// <param name="departureTime">Assigned Type: ota2:LocalTime.</param>
        /// <param name="extensionPointShared">extensionPointShared.</param>
        public SearchCriteriaFlightChange(string type = default(string), int? sequence = default(int?), string departureDate = default(string), string departureTime = default(string), ExtensionPointShared extensionPointShared = default(ExtensionPointShared))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for SearchCriteriaFlightChange and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "departureDate" is required (not null)
            if (departureDate == null)
            {
                throw new InvalidDataException("departureDate is a required property for SearchCriteriaFlightChange and cannot be null");
            }
            else
            {
                this.DepartureDate = departureDate;
            }
            this.Sequence = sequence;
            this.DepartureTime = departureTime;
            this.ExtensionPointShared = extensionPointShared;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:NonnegativeInteger
        /// </summary>
        /// <value>Assigned Type: c-0400:NonnegativeInteger</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }
        /// <summary>
        /// Assigned Type: ota2:LocalDate
        /// </summary>
        /// <value>Assigned Type: ota2:LocalDate</value>
        [DataMember(Name="departureDate", EmitDefaultValue=false)]
        public string DepartureDate { get; set; }
        /// <summary>
        /// Assigned Type: ota2:LocalTime
        /// </summary>
        /// <value>Assigned Type: ota2:LocalTime</value>
        [DataMember(Name="departureTime", EmitDefaultValue=false)]
        public string DepartureTime { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointShared
        /// </summary>
        [DataMember(Name="ExtensionPoint_Shared", EmitDefaultValue=false)]
        public ExtensionPointShared ExtensionPointShared { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchCriteriaFlightChange {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  DepartureDate: ").Append(DepartureDate).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("  ExtensionPointShared: ").Append(ExtensionPointShared).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchCriteriaFlightChange);
        }
        /// <summary>
        /// Returns true if SearchCriteriaFlightChange instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchCriteriaFlightChange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchCriteriaFlightChange input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && 
                (
                    this.DepartureDate == input.DepartureDate ||
                    (this.DepartureDate != null &&
                    this.DepartureDate.Equals(input.DepartureDate))
                ) && 
                (
                    this.DepartureTime == input.DepartureTime ||
                    (this.DepartureTime != null &&
                    this.DepartureTime.Equals(input.DepartureTime))
                ) && 
                (
                    this.ExtensionPointShared == input.ExtensionPointShared ||
                    (this.ExtensionPointShared != null &&
                    this.ExtensionPointShared.Equals(input.ExtensionPointShared))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.DepartureDate != null)
                    hashCode = hashCode * 59 + this.DepartureDate.GetHashCode();
                if (this.DepartureTime != null)
                    hashCode = hashCode * 59 + this.DepartureTime.GetHashCode();
                if (this.ExtensionPointShared != null)
                    hashCode = hashCode * 59 + this.ExtensionPointShared.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Sequence (int?) minimum
            if(this.Sequence < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sequence, must be a value greater than or equal to 0.", new [] { "Sequence" });
            }
            // DepartureDate (string) pattern
            Regex regexDepartureDate = new Regex(@"(\\d{4}-\\d{2}-\\d{2})", RegexOptions.CultureInvariant);
            if (false == regexDepartureDate.Match(this.DepartureDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DepartureDate, must match a pattern of " + regexDepartureDate, new [] { "DepartureDate" });
            }
            // DepartureTime (string) pattern
            Regex regexDepartureTime = new Regex(@"(([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)((:?)[0-5]\\d)?([\\.,]\\d+(?!:))?", RegexOptions.CultureInvariant);
            if (false == regexDepartureTime.Match(this.DepartureTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DepartureTime, must match a pattern of " + regexDepartureTime, new [] { "DepartureTime" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// SearchCriteriaFlightChangeByLocation
    /// </summary>
    [DataContract]
    public partial class SearchCriteriaFlightChangeByLocation : SearchCriteriaFlightChange,  IEquatable<SearchCriteriaFlightChangeByLocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCriteriaFlightChangeByLocation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchCriteriaFlightChangeByLocation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCriteriaFlightChangeByLocation" /> class.
        /// </summary>
        /// <param name="from">Assigned Type: ctar-0400:FromTo (required).</param>
        /// <param name="to">Assigned Type: ctar-0400:FromTo (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public SearchCriteriaFlightChangeByLocation(FromTo from = default(FromTo), FromTo to = default(FromTo), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "SearchCriteriaFlightChangeByLocation", int? sequence = default(int?), string departureDate = default(string), string departureTime = default(string), ExtensionPointShared extensionPointShared = default(ExtensionPointShared)) : base(type, sequence, departureDate, departureTime, extensionPointShared)
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for SearchCriteriaFlightChangeByLocation and cannot be null");
            }
            else
            {
                this.From = from;
            }
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for SearchCriteriaFlightChangeByLocation and cannot be null");
            }
            else
            {
                this.To = to;
            }
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Assigned Type: ctar-0400:FromTo
        /// </summary>
        /// <value>Assigned Type: ctar-0400:FromTo</value>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public FromTo From { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:FromTo
        /// </summary>
        /// <value>Assigned Type: ctar-0400:FromTo</value>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public FromTo To { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchCriteriaFlightChangeByLocation {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchCriteriaFlightChangeByLocation);
        }
        /// <summary>
        /// Returns true if SearchCriteriaFlightChangeByLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchCriteriaFlightChangeByLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchCriteriaFlightChangeByLocation input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && base.Equals(input) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// SearchCriteriaFlightChangeSpecific
    /// </summary>
    [DataContract]
    public partial class SearchCriteriaFlightChangeSpecific : SearchCriteriaFlightChange,  IEquatable<SearchCriteriaFlightChangeSpecific>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCriteriaFlightChangeSpecific" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchCriteriaFlightChangeSpecific() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchCriteriaFlightChangeSpecific" /> class.
        /// </summary>
        /// <param name="carrier">Assigned Type: c-0400:AirlineCode (required).</param>
        /// <param name="flightNumber">Assigned Type: c-0400:FlightNumber (required).</param>
        /// <param name="arrivalDate">Assigned Type: ota2:LocalDate.</param>
        /// <param name="arrivalTime">Assigned Type: ota2:LocalTime.</param>
        /// <param name="from">Assigned Type: c-0400:AirportCodeIATA (required).</param>
        /// <param name="to">Assigned Type: c-0400:AirportCodeIATA (required).</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public SearchCriteriaFlightChangeSpecific(string carrier = default(string), string flightNumber = default(string), string arrivalDate = default(string), string arrivalTime = default(string), string from = default(string), string to = default(string), ExtensionPoint extensionPoint = default(ExtensionPoint), string type = "SearchCriteriaFlightChangeSpecific", int? sequence = default(int?), string departureDate = default(string), string departureTime = default(string), ExtensionPointShared extensionPointShared = default(ExtensionPointShared)) : base(type, sequence, departureDate, departureTime, extensionPointShared)
        {
            // to ensure "carrier" is required (not null)
            if (carrier == null)
            {
                throw new InvalidDataException("carrier is a required property for SearchCriteriaFlightChangeSpecific and cannot be null");
            }
            else
            {
                this.Carrier = carrier;
            }
            // to ensure "flightNumber" is required (not null)
            if (flightNumber == null)
            {
                throw new InvalidDataException("flightNumber is a required property for SearchCriteriaFlightChangeSpecific and cannot be null");
            }
            else
            {
                this.FlightNumber = flightNumber;
            }
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for SearchCriteriaFlightChangeSpecific and cannot be null");
            }
            else
            {
                this.From = from;
            }
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for SearchCriteriaFlightChangeSpecific and cannot be null");
            }
            else
            {
                this.To = to;
            }
            this.ArrivalDate = arrivalDate;
            this.ArrivalTime = arrivalTime;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Assigned Type: c-0400:AirlineCode
        /// </summary>
        /// <value>Assigned Type: c-0400:AirlineCode</value>
        [DataMember(Name="carrier", EmitDefaultValue=false)]
        public string Carrier { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:FlightNumber
        /// </summary>
        /// <value>Assigned Type: c-0400:FlightNumber</value>
        [DataMember(Name="flightNumber", EmitDefaultValue=false)]
        public string FlightNumber { get; set; }
        /// <summary>
        /// Assigned Type: ota2:LocalDate
        /// </summary>
        /// <value>Assigned Type: ota2:LocalDate</value>
        [DataMember(Name="arrivalDate", EmitDefaultValue=false)]
        public string ArrivalDate { get; set; }
        /// <summary>
        /// Assigned Type: ota2:LocalTime
        /// </summary>
        /// <value>Assigned Type: ota2:LocalTime</value>
        [DataMember(Name="arrivalTime", EmitDefaultValue=false)]
        public string ArrivalTime { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:AirportCodeIATA
        /// </summary>
        /// <value>Assigned Type: c-0400:AirportCodeIATA</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:AirportCodeIATA
        /// </summary>
        /// <value>Assigned Type: c-0400:AirportCodeIATA</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchCriteriaFlightChangeSpecific {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  FlightNumber: ").Append(FlightNumber).Append("\n");
            sb.Append("  ArrivalDate: ").Append(ArrivalDate).Append("\n");
            sb.Append("  ArrivalTime: ").Append(ArrivalTime).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchCriteriaFlightChangeSpecific);
        }
        /// <summary>
        /// Returns true if SearchCriteriaFlightChangeSpecific instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchCriteriaFlightChangeSpecific to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchCriteriaFlightChangeSpecific input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Carrier == input.Carrier ||
                    (this.Carrier != null &&
                    this.Carrier.Equals(input.Carrier))
                ) && base.Equals(input) && 
                (
                    this.FlightNumber == input.FlightNumber ||
                    (this.FlightNumber != null &&
                    this.FlightNumber.Equals(input.FlightNumber))
                ) && base.Equals(input) && 
                (
                    this.ArrivalDate == input.ArrivalDate ||
                    (this.ArrivalDate != null &&
                    this.ArrivalDate.Equals(input.ArrivalDate))
                ) && base.Equals(input) && 
                (
                    this.ArrivalTime == input.ArrivalTime ||
                    (this.ArrivalTime != null &&
                    this.ArrivalTime.Equals(input.ArrivalTime))
                ) && base.Equals(input) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && base.Equals(input) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Carrier != null)
                    hashCode = hashCode * 59 + this.Carrier.GetHashCode();
                if (this.FlightNumber != null)
                    hashCode = hashCode * 59 + this.FlightNumber.GetHashCode();
                if (this.ArrivalDate != null)
                    hashCode = hashCode * 59 + this.ArrivalDate.GetHashCode();
                if (this.ArrivalTime != null)
                    hashCode = hashCode * 59 + this.ArrivalTime.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Carrier (string) pattern
            Regex regexCarrier = new Regex(@"([a-zA-Z0-9]{2,3})", RegexOptions.CultureInvariant);
            if (false == regexCarrier.Match(this.Carrier).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Carrier, must match a pattern of " + regexCarrier, new [] { "Carrier" });
            }
            // FlightNumber (string) pattern
            Regex regexFlightNumber = new Regex(@"[0-9]{1,4}[A-Z]?|OPEN|ARNK", RegexOptions.CultureInvariant);
            if (false == regexFlightNumber.Match(this.FlightNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FlightNumber, must match a pattern of " + regexFlightNumber, new [] { "FlightNumber" });
            }
            // ArrivalDate (string) pattern
            Regex regexArrivalDate = new Regex(@"(\\d{4}-\\d{2}-\\d{2})", RegexOptions.CultureInvariant);
            if (false == regexArrivalDate.Match(this.ArrivalDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArrivalDate, must match a pattern of " + regexArrivalDate, new [] { "ArrivalDate" });
            }
            // ArrivalTime (string) pattern
            Regex regexArrivalTime = new Regex(@"(([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)((:?)[0-5]\\d)?([\\.,]\\d+(?!:))?", RegexOptions.CultureInvariant);
            if (false == regexArrivalTime.Match(this.ArrivalTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArrivalTime, must match a pattern of " + regexArrivalTime, new [] { "ArrivalTime" });
            }
            // From (string) maxLength
            if(this.From != null && this.From.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for From, length must be less than 3.", new [] { "From" });
            }
            // From (string) minLength
            if(this.From != null && this.From.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for From, length must be greater than 3.", new [] { "From" });
            }
            // From (string) pattern
            Regex regexFrom = new Regex(@"([a-zA-Z]{3})", RegexOptions.CultureInvariant);
            if (false == regexFrom.Match(this.From).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for From, must match a pattern of " + regexFrom, new [] { "From" });
            }
            // To (string) maxLength
            if(this.To != null && this.To.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, length must be less than 3.", new [] { "To" });
            }
            // To (string) minLength
            if(this.To != null && this.To.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, length must be greater than 3.", new [] { "To" });
            }
            // To (string) pattern
            Regex regexTo = new Regex(@"([a-zA-Z]{3})", RegexOptions.CultureInvariant);
            if (false == regexTo.Match(this.To).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, must match a pattern of " + regexTo, new [] { "To" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// SearchModifiersAir
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class SearchModifiersAir :  IEquatable<SearchModifiersAir>, IValidatableObject
    {
        /// <summary>
        /// A type of ground transportation that is to be excluded for the response
        /// </summary>
        /// <value>A type of ground transportation that is to be excluded for the response</value>
        [DataMember(Name="excludeGround", EmitDefaultValue=false)]
        public ExcludeGroundTypeEnum? ExcludeGround { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchModifiersAir" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchModifiersAir() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchModifiersAir" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="excludeGround">A type of ground transportation that is to be excluded for the response.</param>
        /// <param name="flightType">Assigned Type: ctar-0400:FlightType.</param>
        /// <param name="carrierPreference">carrierPreference.</param>
        /// <param name="cabinPreference">cabinPreference.</param>
        /// <param name="maxLayover">maxLayover.</param>
        /// <param name="maxConnectionDuration">Do not include connections over this duration in the response.</param>
        /// <param name="maxOvernightDuration">Do not include overnight connections over this duration in the response.</param>
        /// <param name="prohibitChangeOfAirportInd">If present and true, connections that require a change of airports are not returned.</param>
        /// <param name="extensionPoint">extensionPoint.</param>
        public SearchModifiersAir(string type = default(string), ExcludeGroundTypeEnum? excludeGround = default(ExcludeGroundTypeEnum?), FlightType flightType = default(FlightType), List<CarrierPreference> carrierPreference = default(List<CarrierPreference>), List<CabinPreference> cabinPreference = default(List<CabinPreference>), List<MaxLayover> maxLayover = default(List<MaxLayover>), string maxConnectionDuration = default(string), string maxOvernightDuration = default(string), bool? prohibitChangeOfAirportInd = default(bool?), ExtensionPoint extensionPoint = default(ExtensionPoint))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for SearchModifiersAir and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.ExcludeGround = excludeGround;
            this.FlightType = flightType;
            this.CarrierPreference = carrierPreference;
            this.CabinPreference = cabinPreference;
            this.MaxLayover = maxLayover;
            this.MaxConnectionDuration = maxConnectionDuration;
            this.MaxOvernightDuration = maxOvernightDuration;
            this.ProhibitChangeOfAirportInd = prohibitChangeOfAirportInd;
            this.ExtensionPoint = extensionPoint;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:FlightType
        /// </summary>
        /// <value>Assigned Type: ctar-0400:FlightType</value>
        [DataMember(Name="FlightType", EmitDefaultValue=false)]
        public FlightType FlightType { get; set; }
        /// <summary>
        /// Gets or Sets CarrierPreference
        /// </summary>
        [DataMember(Name="CarrierPreference", EmitDefaultValue=false)]
        public List<CarrierPreference> CarrierPreference { get; set; }
        /// <summary>
        /// Gets or Sets CabinPreference
        /// </summary>
        [DataMember(Name="CabinPreference", EmitDefaultValue=false)]
        public List<CabinPreference> CabinPreference { get; set; }
        /// <summary>
        /// Gets or Sets MaxLayover
        /// </summary>
        [DataMember(Name="MaxLayover", EmitDefaultValue=false)]
        public List<MaxLayover> MaxLayover { get; set; }
        /// <summary>
        /// Do not include connections over this duration in the response
        /// </summary>
        /// <value>Do not include connections over this duration in the response</value>
        [DataMember(Name="MaxConnectionDuration", EmitDefaultValue=false)]
        public string MaxConnectionDuration { get; set; }
        /// <summary>
        /// Do not include overnight connections over this duration in the response
        /// </summary>
        /// <value>Do not include overnight connections over this duration in the response</value>
        [DataMember(Name="MaxOvernightDuration", EmitDefaultValue=false)]
        public string MaxOvernightDuration { get; set; }
        /// <summary>
        /// If present and true, connections that require a change of airports are not returned
        /// </summary>
        /// <value>If present and true, connections that require a change of airports are not returned</value>
        [DataMember(Name="prohibitChangeOfAirportInd", EmitDefaultValue=false)]
        public bool? ProhibitChangeOfAirportInd { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPoint
        /// </summary>
        [DataMember(Name="ExtensionPoint", EmitDefaultValue=false)]
        public ExtensionPoint ExtensionPoint { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchModifiersAir {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ExcludeGround: ").Append(ExcludeGround).Append("\n");
            sb.Append("  FlightType: ").Append(FlightType).Append("\n");
            sb.Append("  CarrierPreference: ").Append(CarrierPreference).Append("\n");
            sb.Append("  CabinPreference: ").Append(CabinPreference).Append("\n");
            sb.Append("  MaxLayover: ").Append(MaxLayover).Append("\n");
            sb.Append("  MaxConnectionDuration: ").Append(MaxConnectionDuration).Append("\n");
            sb.Append("  MaxOvernightDuration: ").Append(MaxOvernightDuration).Append("\n");
            sb.Append("  ProhibitChangeOfAirportInd: ").Append(ProhibitChangeOfAirportInd).Append("\n");
            sb.Append("  ExtensionPoint: ").Append(ExtensionPoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchModifiersAir);
        }
        /// <summary>
        /// Returns true if SearchModifiersAir instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchModifiersAir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchModifiersAir input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ExcludeGround == input.ExcludeGround ||
                    (this.ExcludeGround != null &&
                    this.ExcludeGround.Equals(input.ExcludeGround))
                ) && 
                (
                    this.FlightType == input.FlightType ||
                    (this.FlightType != null &&
                    this.FlightType.Equals(input.FlightType))
                ) && 
                (
                    this.CarrierPreference == input.CarrierPreference ||
                    this.CarrierPreference != null &&
                    this.CarrierPreference.SequenceEqual(input.CarrierPreference)
                ) && 
                (
                    this.CabinPreference == input.CabinPreference ||
                    this.CabinPreference != null &&
                    this.CabinPreference.SequenceEqual(input.CabinPreference)
                ) && 
                (
                    this.MaxLayover == input.MaxLayover ||
                    this.MaxLayover != null &&
                    this.MaxLayover.SequenceEqual(input.MaxLayover)
                ) && 
                (
                    this.MaxConnectionDuration == input.MaxConnectionDuration ||
                    (this.MaxConnectionDuration != null &&
                    this.MaxConnectionDuration.Equals(input.MaxConnectionDuration))
                ) && 
                (
                    this.MaxOvernightDuration == input.MaxOvernightDuration ||
                    (this.MaxOvernightDuration != null &&
                    this.MaxOvernightDuration.Equals(input.MaxOvernightDuration))
                ) && 
                (
                    this.ProhibitChangeOfAirportInd == input.ProhibitChangeOfAirportInd ||
                    (this.ProhibitChangeOfAirportInd != null &&
                    this.ProhibitChangeOfAirportInd.Equals(input.ProhibitChangeOfAirportInd))
                ) && 
                (
                    this.ExtensionPoint == input.ExtensionPoint ||
                    (this.ExtensionPoint != null &&
                    this.ExtensionPoint.Equals(input.ExtensionPoint))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ExcludeGround != null)
                    hashCode = hashCode * 59 + this.ExcludeGround.GetHashCode();
                if (this.FlightType != null)
                    hashCode = hashCode * 59 + this.FlightType.GetHashCode();
                if (this.CarrierPreference != null)
                    hashCode = hashCode * 59 + this.CarrierPreference.GetHashCode();
                if (this.CabinPreference != null)
                    hashCode = hashCode * 59 + this.CabinPreference.GetHashCode();
                if (this.MaxLayover != null)
                    hashCode = hashCode * 59 + this.MaxLayover.GetHashCode();
                if (this.MaxConnectionDuration != null)
                    hashCode = hashCode * 59 + this.MaxConnectionDuration.GetHashCode();
                if (this.MaxOvernightDuration != null)
                    hashCode = hashCode * 59 + this.MaxOvernightDuration.GetHashCode();
                if (this.ProhibitChangeOfAirportInd != null)
                    hashCode = hashCode * 59 + this.ProhibitChangeOfAirportInd.GetHashCode();
                if (this.ExtensionPoint != null)
                    hashCode = hashCode * 59 + this.ExtensionPoint.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// SpecificFlightCriteria
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    public partial class SpecificFlightCriteria :  IEquatable<SpecificFlightCriteria>, IValidatableObject
    {
        /// <summary>
        /// Cabin
        /// </summary>
        /// <value>Cabin</value>
        [DataMember(Name="cabin", EmitDefaultValue=false)]
        public CabinAirEnum? Cabin { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecificFlightCriteria" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SpecificFlightCriteria() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecificFlightCriteria" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="carrier">Assigned Type: c-0400:AirlineCode (required).</param>
        /// <param name="flightNumber">Assigned Type: c-0400:FlightNumber (required).</param>
        /// <param name="departureDate">date of departure (required).</param>
        /// <param name="departureTime">Assigned Type: ota2:LocalTime.</param>
        /// <param name="arrivalDate">Assigned Type: ota2:LocalDate.</param>
        /// <param name="arrivalTime">Assigned Type: ota2:LocalTime.</param>
        /// <param name="from">Assigned Type: c-0400:AirportCodeIATA (required).</param>
        /// <param name="to">Assigned Type: c-0400:AirportCodeIATA (required).</param>
        /// <param name="cabin">Cabin.</param>
        /// <param name="classOfService">Assigned Type: c-0400:ClassOfService.</param>
        /// <param name="brandTier">Assigned Type: c-0400:NumberSingleDigit.</param>
        /// <param name="segmentSequence">Assigned Type: ctar-0400:SegmentSequence (required).</param>
        public SpecificFlightCriteria(string type = default(string), string carrier = default(string), string flightNumber = default(string), DateTime? departureDate = default(DateTime?), string departureTime = default(string), string arrivalDate = default(string), string arrivalTime = default(string), string from = default(string), string to = default(string), CabinAirEnum? cabin = default(CabinAirEnum?), string classOfService = default(string), int? brandTier = default(int?), int? segmentSequence = default(int?))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for SpecificFlightCriteria and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "carrier" is required (not null)
            if (carrier == null)
            {
                throw new InvalidDataException("carrier is a required property for SpecificFlightCriteria and cannot be null");
            }
            else
            {
                this.Carrier = carrier;
            }
            // to ensure "flightNumber" is required (not null)
            if (flightNumber == null)
            {
                throw new InvalidDataException("flightNumber is a required property for SpecificFlightCriteria and cannot be null");
            }
            else
            {
                this.FlightNumber = flightNumber;
            }
            // to ensure "departureDate" is required (not null)
            if (departureDate == null)
            {
                throw new InvalidDataException("departureDate is a required property for SpecificFlightCriteria and cannot be null");
            }
            else
            {
                this.DepartureDate = departureDate;
            }
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for SpecificFlightCriteria and cannot be null");
            }
            else
            {
                this.From = from;
            }
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for SpecificFlightCriteria and cannot be null");
            }
            else
            {
                this.To = to;
            }
            // to ensure "segmentSequence" is required (not null)
            if (segmentSequence == null)
            {
                throw new InvalidDataException("segmentSequence is a required property for SpecificFlightCriteria and cannot be null");
            }
            else
            {
                this.SegmentSequence = segmentSequence;
            }
            this.DepartureTime = departureTime;
            this.ArrivalDate = arrivalDate;
            this.ArrivalTime = arrivalTime;
            this.Cabin = cabin;
            this.ClassOfService = classOfService;
            this.BrandTier = brandTier;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:AirlineCode
        /// </summary>
        /// <value>Assigned Type: c-0400:AirlineCode</value>
        [DataMember(Name="carrier", EmitDefaultValue=false)]
        public string Carrier { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:FlightNumber
        /// </summary>
        /// <value>Assigned Type: c-0400:FlightNumber</value>
        [DataMember(Name="flightNumber", EmitDefaultValue=false)]
        public string FlightNumber { get; set; }
        /// <summary>
        /// date of departure
        /// </summary>
        /// <value>date of departure</value>
        [DataMember(Name="departureDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DepartureDate { get; set; }
        /// <summary>
        /// Assigned Type: ota2:LocalTime
        /// </summary>
        /// <value>Assigned Type: ota2:LocalTime</value>
        [DataMember(Name="departureTime", EmitDefaultValue=false)]
        public string DepartureTime { get; set; }
        /// <summary>
        /// Assigned Type: ota2:LocalDate
        /// </summary>
        /// <value>Assigned Type: ota2:LocalDate</value>
        [DataMember(Name="arrivalDate", EmitDefaultValue=false)]
        public string ArrivalDate { get; set; }
        /// <summary>
        /// Assigned Type: ota2:LocalTime
        /// </summary>
        /// <value>Assigned Type: ota2:LocalTime</value>
        [DataMember(Name="arrivalTime", EmitDefaultValue=false)]
        public string ArrivalTime { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:AirportCodeIATA
        /// </summary>
        /// <value>Assigned Type: c-0400:AirportCodeIATA</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:AirportCodeIATA
        /// </summary>
        /// <value>Assigned Type: c-0400:AirportCodeIATA</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:ClassOfService
        /// </summary>
        /// <value>Assigned Type: c-0400:ClassOfService</value>
        [DataMember(Name="classOfService", EmitDefaultValue=false)]
        public string ClassOfService { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:NumberSingleDigit
        /// </summary>
        /// <value>Assigned Type: c-0400:NumberSingleDigit</value>
        [DataMember(Name="brandTier", EmitDefaultValue=false)]
        public int? BrandTier { get; set; }
        /// <summary>
        /// Assigned Type: ctar-0400:SegmentSequence
        /// </summary>
        /// <value>Assigned Type: ctar-0400:SegmentSequence</value>
        [DataMember(Name="segmentSequence", EmitDefaultValue=false)]
        public int? SegmentSequence { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpecificFlightCriteria {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  FlightNumber: ").Append(FlightNumber).Append("\n");
            sb.Append("  DepartureDate: ").Append(DepartureDate).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("  ArrivalDate: ").Append(ArrivalDate).Append("\n");
            sb.Append("  ArrivalTime: ").Append(ArrivalTime).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Cabin: ").Append(Cabin).Append("\n");
            sb.Append("  ClassOfService: ").Append(ClassOfService).Append("\n");
            sb.Append("  BrandTier: ").Append(BrandTier).Append("\n");
            sb.Append("  SegmentSequence: ").Append(SegmentSequence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpecificFlightCriteria);
        }
        /// <summary>
        /// Returns true if SpecificFlightCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of SpecificFlightCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpecificFlightCriteria input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Carrier == input.Carrier ||
                    (this.Carrier != null &&
                    this.Carrier.Equals(input.Carrier))
                ) && 
                (
                    this.FlightNumber == input.FlightNumber ||
                    (this.FlightNumber != null &&
                    this.FlightNumber.Equals(input.FlightNumber))
                ) && 
                (
                    this.DepartureDate == input.DepartureDate ||
                    (this.DepartureDate != null &&
                    this.DepartureDate.Equals(input.DepartureDate))
                ) && 
                (
                    this.DepartureTime == input.DepartureTime ||
                    (this.DepartureTime != null &&
                    this.DepartureTime.Equals(input.DepartureTime))
                ) && 
                (
                    this.ArrivalDate == input.ArrivalDate ||
                    (this.ArrivalDate != null &&
                    this.ArrivalDate.Equals(input.ArrivalDate))
                ) && 
                (
                    this.ArrivalTime == input.ArrivalTime ||
                    (this.ArrivalTime != null &&
                    this.ArrivalTime.Equals(input.ArrivalTime))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Cabin == input.Cabin ||
                    (this.Cabin != null &&
                    this.Cabin.Equals(input.Cabin))
                ) && 
                (
                    this.ClassOfService == input.ClassOfService ||
                    (this.ClassOfService != null &&
                    this.ClassOfService.Equals(input.ClassOfService))
                ) && 
                (
                    this.BrandTier == input.BrandTier ||
                    (this.BrandTier != null &&
                    this.BrandTier.Equals(input.BrandTier))
                ) && 
                (
                    this.SegmentSequence == input.SegmentSequence ||
                    (this.SegmentSequence != null &&
                    this.SegmentSequence.Equals(input.SegmentSequence))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Carrier != null)
                    hashCode = hashCode * 59 + this.Carrier.GetHashCode();
                if (this.FlightNumber != null)
                    hashCode = hashCode * 59 + this.FlightNumber.GetHashCode();
                if (this.DepartureDate != null)
                    hashCode = hashCode * 59 + this.DepartureDate.GetHashCode();
                if (this.DepartureTime != null)
                    hashCode = hashCode * 59 + this.DepartureTime.GetHashCode();
                if (this.ArrivalDate != null)
                    hashCode = hashCode * 59 + this.ArrivalDate.GetHashCode();
                if (this.ArrivalTime != null)
                    hashCode = hashCode * 59 + this.ArrivalTime.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Cabin != null)
                    hashCode = hashCode * 59 + this.Cabin.GetHashCode();
                if (this.ClassOfService != null)
                    hashCode = hashCode * 59 + this.ClassOfService.GetHashCode();
                if (this.BrandTier != null)
                    hashCode = hashCode * 59 + this.BrandTier.GetHashCode();
                if (this.SegmentSequence != null)
                    hashCode = hashCode * 59 + this.SegmentSequence.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Carrier (string) pattern
            Regex regexCarrier = new Regex(@"([a-zA-Z0-9]{2,3})", RegexOptions.CultureInvariant);
            if (false == regexCarrier.Match(this.Carrier).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Carrier, must match a pattern of " + regexCarrier, new [] { "Carrier" });
            }
            // FlightNumber (string) pattern
            Regex regexFlightNumber = new Regex(@"[0-9]{1,4}[A-Z]?|OPEN|ARNK", RegexOptions.CultureInvariant);
            if (false == regexFlightNumber.Match(this.FlightNumber).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FlightNumber, must match a pattern of " + regexFlightNumber, new [] { "FlightNumber" });
            }
            // DepartureTime (string) pattern
            Regex regexDepartureTime = new Regex(@"(([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)((:?)[0-5]\\d)?([\\.,]\\d+(?!:))?", RegexOptions.CultureInvariant);
            if (false == regexDepartureTime.Match(this.DepartureTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DepartureTime, must match a pattern of " + regexDepartureTime, new [] { "DepartureTime" });
            }
            // ArrivalDate (string) pattern
            Regex regexArrivalDate = new Regex(@"(\\d{4}-\\d{2}-\\d{2})", RegexOptions.CultureInvariant);
            if (false == regexArrivalDate.Match(this.ArrivalDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArrivalDate, must match a pattern of " + regexArrivalDate, new [] { "ArrivalDate" });
            }
            // ArrivalTime (string) pattern
            Regex regexArrivalTime = new Regex(@"(([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)((:?)[0-5]\\d)?([\\.,]\\d+(?!:))?", RegexOptions.CultureInvariant);
            if (false == regexArrivalTime.Match(this.ArrivalTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ArrivalTime, must match a pattern of " + regexArrivalTime, new [] { "ArrivalTime" });
            }
            // From (string) maxLength
            if(this.From != null && this.From.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for From, length must be less than 3.", new [] { "From" });
            }
            // From (string) minLength
            if(this.From != null && this.From.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for From, length must be greater than 3.", new [] { "From" });
            }
            // From (string) pattern
            Regex regexFrom = new Regex(@"([a-zA-Z]{3})", RegexOptions.CultureInvariant);
            if (false == regexFrom.Match(this.From).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for From, must match a pattern of " + regexFrom, new [] { "From" });
            }
            // To (string) maxLength
            if(this.To != null && this.To.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, length must be less than 3.", new [] { "To" });
            }
            // To (string) minLength
            if(this.To != null && this.To.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, length must be greater than 3.", new [] { "To" });
            }
            // To (string) pattern
            Regex regexTo = new Regex(@"([a-zA-Z]{3})", RegexOptions.CultureInvariant);
            if (false == regexTo.Match(this.To).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, must match a pattern of " + regexTo, new [] { "To" });
            }
            // ClassOfService (string) maxLength
            if(this.ClassOfService != null && this.ClassOfService.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassOfService, length must be less than 2.", new [] { "ClassOfService" });
            }
            // ClassOfService (string) minLength
            if(this.ClassOfService != null && this.ClassOfService.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassOfService, length must be greater than 1.", new [] { "ClassOfService" });
            }
            // ClassOfService (string) pattern
            Regex regexClassOfService = new Regex(@"([a-zA-Z0-9]{1,2})", RegexOptions.CultureInvariant);
            if (false == regexClassOfService.Match(this.ClassOfService).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClassOfService, must match a pattern of " + regexClassOfService, new [] { "ClassOfService" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// The tax amount with tax code and reporting informtion
    /// </summary>
    [DataContract]
    public partial class Tax :  IEquatable<Tax>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tax" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="currencyCode">Assigned Type: c-0400:CurrencyCodeISO.</param>
        /// <param name="taxCode">Assigned Type: c-0400:String.</param>
        /// <param name="reportingAuthority">Assigned Type: c-0400:String.</param>
        /// <param name="purpose">Assigned Type: c-0400:String.</param>
        /// <param name="description">Assigned Type: c-0400:StringLong.</param>
        public Tax(float? value = default(float?), string currencyCode = default(string), string taxCode = default(string), string reportingAuthority = default(string), string purpose = default(string), string description = default(string))
        {
            this.Value = value;
            this.CurrencyCode = currencyCode;
            this.TaxCode = taxCode;
            this.ReportingAuthority = reportingAuthority;
            this.Purpose = purpose;
            this.Description = description;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public float? Value { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CurrencyCodeISO
        /// </summary>
        /// <value>Assigned Type: c-0400:CurrencyCodeISO</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:String
        /// </summary>
        /// <value>Assigned Type: c-0400:String</value>
        [DataMember(Name="taxCode", EmitDefaultValue=false)]
        public string TaxCode { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:String
        /// </summary>
        /// <value>Assigned Type: c-0400:String</value>
        [DataMember(Name="reportingAuthority", EmitDefaultValue=false)]
        public string ReportingAuthority { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:String
        /// </summary>
        /// <value>Assigned Type: c-0400:String</value>
        [DataMember(Name="purpose", EmitDefaultValue=false)]
        public string Purpose { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:StringLong
        /// </summary>
        /// <value>Assigned Type: c-0400:StringLong</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tax {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  ReportingAuthority: ").Append(ReportingAuthority).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Tax);
        }
        /// <summary>
        /// Returns true if Tax instances are equal
        /// </summary>
        /// <param name="input">Instance of Tax to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tax input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.TaxCode == input.TaxCode ||
                    (this.TaxCode != null &&
                    this.TaxCode.Equals(input.TaxCode))
                ) && 
                (
                    this.ReportingAuthority == input.ReportingAuthority ||
                    (this.ReportingAuthority != null &&
                    this.ReportingAuthority.Equals(input.ReportingAuthority))
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    (this.Purpose != null &&
                    this.Purpose.Equals(input.Purpose))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.TaxCode != null)
                    hashCode = hashCode * 59 + this.TaxCode.GetHashCode();
                if (this.ReportingAuthority != null)
                    hashCode = hashCode * 59 + this.ReportingAuthority.GetHashCode();
                if (this.Purpose != null)
                    hashCode = hashCode * 59 + this.Purpose.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CurrencyCode (string) pattern
            Regex regexCurrencyCode = new Regex(@"[a-zA-Z]{3}", RegexOptions.CultureInvariant);
            if (false == regexCurrencyCode.Match(this.CurrencyCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyCode, must match a pattern of " + regexCurrencyCode, new [] { "CurrencyCode" });
            }
            // TaxCode (string) maxLength
            if(this.TaxCode != null && this.TaxCode.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxCode, length must be less than 512.", new [] { "TaxCode" });
            }
            // ReportingAuthority (string) maxLength
            if(this.ReportingAuthority != null && this.ReportingAuthority.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReportingAuthority, length must be less than 512.", new [] { "ReportingAuthority" });
            }
            // Purpose (string) maxLength
            if(this.Purpose != null && this.Purpose.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Purpose, length must be less than 512.", new [] { "Purpose" });
            }
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 4096.", new [] { "Description" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Taxes
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(TaxesDetail), "TaxesDetail")]
    public partial class Taxes :  IEquatable<Taxes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Taxes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Taxes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Taxes" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="totalTaxes">A monetary amount, up to 4 decimal places. Decimal place needs to be included..</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public Taxes(string type = default(string), float? totalTaxes = default(float?), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Taxes and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.TotalTaxes = totalTaxes;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// A monetary amount, up to 4 decimal places. Decimal place needs to be included.
        /// </summary>
        /// <value>A monetary amount, up to 4 decimal places. Decimal place needs to be included.</value>
        [DataMember(Name="TotalTaxes", EmitDefaultValue=false)]
        public float? TotalTaxes { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Taxes {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TotalTaxes: ").Append(TotalTaxes).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Taxes);
        }
        /// <summary>
        /// Returns true if Taxes instances are equal
        /// </summary>
        /// <param name="input">Instance of Taxes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Taxes input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.TotalTaxes == input.TotalTaxes ||
                    (this.TotalTaxes != null &&
                    this.TotalTaxes.Equals(input.TotalTaxes))
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.TotalTaxes != null)
                    hashCode = hashCode * 59 + this.TotalTaxes.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// TaxesDetail
    /// </summary>
    [DataContract]
    public partial class TaxesDetail : Taxes,  IEquatable<TaxesDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxesDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaxesDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxesDetail" /> class.
        /// </summary>
        /// <param name="tax">tax.</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public TaxesDetail(List<Tax> tax = default(List<Tax>), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "TaxesDetail", float? totalTaxes = default(float?), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, totalTaxes, extensionPointSummary)
        {
            this.Tax = tax;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name="Tax", EmitDefaultValue=false)]
        public List<Tax> Tax { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxesDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxesDetail);
        }
        /// <summary>
        /// Returns true if TaxesDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxesDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxesDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Tax == input.Tax ||
                    this.Tax != null &&
                    this.Tax.SequenceEqual(input.Tax)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Tax != null)
                    hashCode = hashCode * 59 + this.Tax.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// TermsAndConditions
    /// </summary>
    [DataContract]
    public partial class TermsAndConditions : TermsAndConditionsID,  IEquatable<TermsAndConditions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TermsAndConditions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditions" /> class.
        /// </summary>
        /// <param name="expiryDate">The data and time range that the Offer is valid..</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public TermsAndConditions(DateTime? expiryDate = default(DateTime?), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary), string type = "TermsAndConditions", string id = default(string), string termsAndConditionsRef = default(string), Identifier identifier = default(Identifier)) : base(type, id, termsAndConditionsRef, identifier)
        {
            this.ExpiryDate = expiryDate;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// The data and time range that the Offer is valid.
        /// </summary>
        /// <value>The data and time range that the Offer is valid.</value>
        [DataMember(Name="ExpiryDate", EmitDefaultValue=false)]
        public DateTime? ExpiryDate { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TermsAndConditions {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TermsAndConditions);
        }
        /// <summary>
        /// Returns true if TermsAndConditions instances are equal
        /// </summary>
        /// <param name="input">Instance of TermsAndConditions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TermsAndConditions input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// TermsAndConditionsAir
    /// </summary>
    [DataContract]
    public partial class TermsAndConditionsAir : TermsAndConditions,  IEquatable<TermsAndConditionsAir>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsAir" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TermsAndConditionsAir() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsAir" /> class.
        /// </summary>
        /// <param name="validatingCarrier">Assigned Type: c-0400:AirlineCode.</param>
        /// <param name="baggageAllowance">baggageAllowance.</param>
        /// <param name="fareRuleInfo">fareRuleInfo.</param>
        /// <param name="restriction">restriction.</param>
        /// <param name="organizationIdentifier">organizationIdentifier.</param>
        /// <param name="extensionPointCustom">extensionPointCustom.</param>
        public TermsAndConditionsAir(string validatingCarrier = default(string), List<BaggageAllowance> baggageAllowance = default(List<BaggageAllowance>), List<FareRuleInfo> fareRuleInfo = default(List<FareRuleInfo>), List<string> restriction = default(List<string>), List<OrganizationIdentifier> organizationIdentifier = default(List<OrganizationIdentifier>), ExtensionPointCustom extensionPointCustom = default(ExtensionPointCustom), string type = default(string), string id = default(string), string termsAndConditionsRef = default(string), Identifier identifier = default(Identifier), DateTime? expiryDate = default(DateTime?), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(expiryDate, extensionPointSummary)
        {
            this.ValidatingCarrier = validatingCarrier;
            this.BaggageAllowance = baggageAllowance;
            this.FareRuleInfo = fareRuleInfo;
            this.Restriction = restriction;
            this.OrganizationIdentifier = organizationIdentifier;
            this.ExtensionPointCustom = extensionPointCustom;
        }
        /// <summary>
        /// Assigned Type: c-0400:AirlineCode
        /// </summary>
        /// <value>Assigned Type: c-0400:AirlineCode</value>
        [DataMember(Name="validatingCarrier", EmitDefaultValue=false)]
        public string ValidatingCarrier { get; set; }
        /// <summary>
        /// Gets or Sets BaggageAllowance
        /// </summary>
        [DataMember(Name="BaggageAllowance", EmitDefaultValue=false)]
        public List<BaggageAllowance> BaggageAllowance { get; set; }
        /// <summary>
        /// Gets or Sets FareRuleInfo
        /// </summary>
        [DataMember(Name="FareRuleInfo", EmitDefaultValue=false)]
        public List<FareRuleInfo> FareRuleInfo { get; set; }
        /// <summary>
        /// Gets or Sets Restriction
        /// </summary>
        [DataMember(Name="Restriction", EmitDefaultValue=false)]
        public List<string> Restriction { get; set; }
        /// <summary>
        /// Gets or Sets OrganizationIdentifier
        /// </summary>
        [DataMember(Name="OrganizationIdentifier", EmitDefaultValue=false)]
        public List<OrganizationIdentifier> OrganizationIdentifier { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointCustom
        /// </summary>
        [DataMember(Name="ExtensionPoint_Custom", EmitDefaultValue=false)]
        public ExtensionPointCustom ExtensionPointCustom { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TermsAndConditionsAir {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ValidatingCarrier: ").Append(ValidatingCarrier).Append("\n");
            sb.Append("  BaggageAllowance: ").Append(BaggageAllowance).Append("\n");
            sb.Append("  FareRuleInfo: ").Append(FareRuleInfo).Append("\n");
            sb.Append("  Restriction: ").Append(Restriction).Append("\n");
            sb.Append("  OrganizationIdentifier: ").Append(OrganizationIdentifier).Append("\n");
            sb.Append("  ExtensionPointCustom: ").Append(ExtensionPointCustom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TermsAndConditionsAir);
        }
        /// <summary>
        /// Returns true if TermsAndConditionsAir instances are equal
        /// </summary>
        /// <param name="input">Instance of TermsAndConditionsAir to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TermsAndConditionsAir input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.ValidatingCarrier == input.ValidatingCarrier ||
                    (this.ValidatingCarrier != null &&
                    this.ValidatingCarrier.Equals(input.ValidatingCarrier))
                ) && base.Equals(input) && 
                (
                    this.BaggageAllowance == input.BaggageAllowance ||
                    this.BaggageAllowance != null &&
                    this.BaggageAllowance.SequenceEqual(input.BaggageAllowance)
                ) && base.Equals(input) && 
                (
                    this.FareRuleInfo == input.FareRuleInfo ||
                    this.FareRuleInfo != null &&
                    this.FareRuleInfo.SequenceEqual(input.FareRuleInfo)
                ) && base.Equals(input) && 
                (
                    this.Restriction == input.Restriction ||
                    this.Restriction != null &&
                    this.Restriction.SequenceEqual(input.Restriction)
                ) && base.Equals(input) && 
                (
                    this.OrganizationIdentifier == input.OrganizationIdentifier ||
                    this.OrganizationIdentifier != null &&
                    this.OrganizationIdentifier.SequenceEqual(input.OrganizationIdentifier)
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointCustom == input.ExtensionPointCustom ||
                    (this.ExtensionPointCustom != null &&
                    this.ExtensionPointCustom.Equals(input.ExtensionPointCustom))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ValidatingCarrier != null)
                    hashCode = hashCode * 59 + this.ValidatingCarrier.GetHashCode();
                if (this.BaggageAllowance != null)
                    hashCode = hashCode * 59 + this.BaggageAllowance.GetHashCode();
                if (this.FareRuleInfo != null)
                    hashCode = hashCode * 59 + this.FareRuleInfo.GetHashCode();
                if (this.Restriction != null)
                    hashCode = hashCode * 59 + this.Restriction.GetHashCode();
                if (this.OrganizationIdentifier != null)
                    hashCode = hashCode * 59 + this.OrganizationIdentifier.GetHashCode();
                if (this.ExtensionPointCustom != null)
                    hashCode = hashCode * 59 + this.ExtensionPointCustom.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // ValidatingCarrier (string) pattern
            Regex regexValidatingCarrier = new Regex(@"([a-zA-Z0-9]{2,3})", RegexOptions.CultureInvariant);
            if (false == regexValidatingCarrier.Match(this.ValidatingCarrier).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ValidatingCarrier, must match a pattern of " + regexValidatingCarrier, new [] { "ValidatingCarrier" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// TermsAndConditionsID
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(TermsAndConditions), "TermsAndConditions")]
    [JsonSubtypes.KnownSubType(typeof(TermsAndConditionsAir), "TermsAndConditionsAir")]
    public partial class TermsAndConditionsID :  IEquatable<TermsAndConditionsID>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsID" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TermsAndConditionsID() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsID" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">Local indentifier within a given message for this object..</param>
        /// <param name="termsAndConditionsRef">Used to reference another instance of this object in the same message..</param>
        /// <param name="identifier">Assigned Type: c-0400:Identifier.</param>
        public TermsAndConditionsID(string type = default(string), string id = default(string), string termsAndConditionsRef = default(string), Identifier identifier = default(Identifier))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for TermsAndConditionsID and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.Id = id;
            this.TermsAndConditionsRef = termsAndConditionsRef;
            this.Identifier = identifier;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Local indentifier within a given message for this object.
        /// </summary>
        /// <value>Local indentifier within a given message for this object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Used to reference another instance of this object in the same message.
        /// </summary>
        /// <value>Used to reference another instance of this object in the same message.</value>
        [DataMember(Name="termsAndConditionsRef", EmitDefaultValue=false)]
        public string TermsAndConditionsRef { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Identifier
        /// </summary>
        /// <value>Assigned Type: c-0400:Identifier</value>
        [DataMember(Name="Identifier", EmitDefaultValue=false)]
        public Identifier Identifier { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TermsAndConditionsID {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TermsAndConditionsRef: ").Append(TermsAndConditionsRef).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TermsAndConditionsID);
        }
        /// <summary>
        /// Returns true if TermsAndConditionsID instances are equal
        /// </summary>
        /// <param name="input">Instance of TermsAndConditionsID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TermsAndConditionsID input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TermsAndConditionsRef == input.TermsAndConditionsRef ||
                    (this.TermsAndConditionsRef != null &&
                    this.TermsAndConditionsRef.Equals(input.TermsAndConditionsRef))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TermsAndConditionsRef != null)
                    hashCode = hashCode * 59 + this.TermsAndConditionsRef.GetHashCode();
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// TermsAndConditionsSubCategory
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(TermsAndConditionsSubCategoryDetail), "TermsAndConditionsSubCategoryDetail")]
    public partial class TermsAndConditionsSubCategory :  IEquatable<TermsAndConditionsSubCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsSubCategory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TermsAndConditionsSubCategory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsSubCategory" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="title">Assigned Type: c-0400:String.</param>
        /// <param name="id">Internally referenced id.</param>
        /// <param name="textFormatted">textFormatted (required).</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public TermsAndConditionsSubCategory(string type = default(string), string title = default(string), string id = default(string), List<TextFormatted> textFormatted = default(List<TextFormatted>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for TermsAndConditionsSubCategory and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "textFormatted" is required (not null)
            if (textFormatted == null)
            {
                throw new InvalidDataException("textFormatted is a required property for TermsAndConditionsSubCategory and cannot be null");
            }
            else
            {
                this.TextFormatted = textFormatted;
            }
            this.Title = title;
            this.Id = id;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:String
        /// </summary>
        /// <value>Assigned Type: c-0400:String</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Internally referenced id
        /// </summary>
        /// <value>Internally referenced id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets TextFormatted
        /// </summary>
        [DataMember(Name="TextFormatted", EmitDefaultValue=false)]
        public List<TextFormatted> TextFormatted { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TermsAndConditionsSubCategory {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TextFormatted: ").Append(TextFormatted).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TermsAndConditionsSubCategory);
        }
        /// <summary>
        /// Returns true if TermsAndConditionsSubCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of TermsAndConditionsSubCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TermsAndConditionsSubCategory input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TextFormatted == input.TextFormatted ||
                    this.TextFormatted != null &&
                    this.TextFormatted.SequenceEqual(input.TextFormatted)
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TextFormatted != null)
                    hashCode = hashCode * 59 + this.TextFormatted.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if(this.Title != null && this.Title.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 512.", new [] { "Title" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// TermsAndConditionsSubCategoryDetail
    /// </summary>
    [DataContract]
    public partial class TermsAndConditionsSubCategoryDetail : TermsAndConditionsSubCategory,  IEquatable<TermsAndConditionsSubCategoryDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsSubCategoryDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TermsAndConditionsSubCategoryDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TermsAndConditionsSubCategoryDetail" /> class.
        /// </summary>
        /// <param name="sequence">The order of the text block, if there are more than one block..</param>
        /// <param name="description">Assigned Type: c-0400:Description.</param>
        /// <param name="image">Assigned Type: c-0400:Image.</param>
        /// <param name="uRL">A URL for this block.</param>
        /// <param name="dateCreateModify">Assigned Type: c-0400:DateCreateModify (required).</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public TermsAndConditionsSubCategoryDetail(int? sequence = default(int?), string description = default(string), Image image = default(Image), string uRL = default(string), DateCreateModify dateCreateModify = default(DateCreateModify), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "TermsAndConditionsSubCategoryDetail", string title = default(string), string id = default(string), List<TextFormatted> textFormatted = default(List<TextFormatted>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, title, id, textFormatted, extensionPointSummary)
        {
            // to ensure "dateCreateModify" is required (not null)
            if (dateCreateModify == null)
            {
                throw new InvalidDataException("dateCreateModify is a required property for TermsAndConditionsSubCategoryDetail and cannot be null");
            }
            else
            {
                this.DateCreateModify = dateCreateModify;
            }
            this.Sequence = sequence;
            this.Description = description;
            this.Image = image;
            this.URL = uRL;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// The order of the text block, if there are more than one block.
        /// </summary>
        /// <value>The order of the text block, if there are more than one block.</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Description
        /// </summary>
        /// <value>Assigned Type: c-0400:Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Image
        /// </summary>
        /// <value>Assigned Type: c-0400:Image</value>
        [DataMember(Name="Image", EmitDefaultValue=false)]
        public Image Image { get; set; }
        /// <summary>
        /// A URL for this block
        /// </summary>
        /// <value>A URL for this block</value>
        [DataMember(Name="URL", EmitDefaultValue=false)]
        public string URL { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:DateCreateModify
        /// </summary>
        /// <value>Assigned Type: c-0400:DateCreateModify</value>
        [DataMember(Name="DateCreateModify", EmitDefaultValue=false)]
        public DateCreateModify DateCreateModify { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TermsAndConditionsSubCategoryDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  DateCreateModify: ").Append(DateCreateModify).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TermsAndConditionsSubCategoryDetail);
        }
        /// <summary>
        /// Returns true if TermsAndConditionsSubCategoryDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of TermsAndConditionsSubCategoryDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TermsAndConditionsSubCategoryDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && base.Equals(input) && 
                (
                    this.URL == input.URL ||
                    (this.URL != null &&
                    this.URL.Equals(input.URL))
                ) && base.Equals(input) && 
                (
                    this.DateCreateModify == input.DateCreateModify ||
                    (this.DateCreateModify != null &&
                    this.DateCreateModify.Equals(input.DateCreateModify))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.URL != null)
                    hashCode = hashCode * 59 + this.URL.GetHashCode();
                if (this.DateCreateModify != null)
                    hashCode = hashCode * 59 + this.DateCreateModify.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// TextBlock
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(TextBlockDetail), "TextBlockDetail")]
    public partial class TextBlock :  IEquatable<TextBlock>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextBlock" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextBlock() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextBlock" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="title">Assigned Type: c-0400:String.</param>
        /// <param name="id">Internally referenced id.</param>
        /// <param name="textFormatted">textFormatted (required).</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public TextBlock(string type = default(string), string title = default(string), string id = default(string), List<TextFormatted> textFormatted = default(List<TextFormatted>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for TextBlock and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "textFormatted" is required (not null)
            if (textFormatted == null)
            {
                throw new InvalidDataException("textFormatted is a required property for TextBlock and cannot be null");
            }
            else
            {
                this.TextFormatted = textFormatted;
            }
            this.Title = title;
            this.Id = id;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:String
        /// </summary>
        /// <value>Assigned Type: c-0400:String</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Internally referenced id
        /// </summary>
        /// <value>Internally referenced id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets TextFormatted
        /// </summary>
        [DataMember(Name="TextFormatted", EmitDefaultValue=false)]
        public List<TextFormatted> TextFormatted { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextBlock {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TextFormatted: ").Append(TextFormatted).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextBlock);
        }
        /// <summary>
        /// Returns true if TextBlock instances are equal
        /// </summary>
        /// <param name="input">Instance of TextBlock to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextBlock input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TextFormatted == input.TextFormatted ||
                    this.TextFormatted != null &&
                    this.TextFormatted.SequenceEqual(input.TextFormatted)
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TextFormatted != null)
                    hashCode = hashCode * 59 + this.TextFormatted.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Title (string) maxLength
            if(this.Title != null && this.Title.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Title, length must be less than 512.", new [] { "Title" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// TextBlockDetail
    /// </summary>
    [DataContract]
    public partial class TextBlockDetail : TextBlock,  IEquatable<TextBlockDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextBlockDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextBlockDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextBlockDetail" /> class.
        /// </summary>
        /// <param name="sequence">The order of the text block, if there are more than one block..</param>
        /// <param name="description">Assigned Type: c-0400:Description.</param>
        /// <param name="image">Assigned Type: c-0400:Image.</param>
        /// <param name="uRL">A URL for this block.</param>
        /// <param name="dateCreateModify">Assigned Type: c-0400:DateCreateModify (required).</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public TextBlockDetail(int? sequence = default(int?), string description = default(string), Image image = default(Image), string uRL = default(string), DateCreateModify dateCreateModify = default(DateCreateModify), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "TextBlockDetail", string title = default(string), string id = default(string), List<TextFormatted> textFormatted = default(List<TextFormatted>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, title, id, textFormatted, extensionPointSummary)
        {
            // to ensure "dateCreateModify" is required (not null)
            if (dateCreateModify == null)
            {
                throw new InvalidDataException("dateCreateModify is a required property for TextBlockDetail and cannot be null");
            }
            else
            {
                this.DateCreateModify = dateCreateModify;
            }
            this.Sequence = sequence;
            this.Description = description;
            this.Image = image;
            this.URL = uRL;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// The order of the text block, if there are more than one block.
        /// </summary>
        /// <value>The order of the text block, if there are more than one block.</value>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Description
        /// </summary>
        /// <value>Assigned Type: c-0400:Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:Image
        /// </summary>
        /// <value>Assigned Type: c-0400:Image</value>
        [DataMember(Name="Image", EmitDefaultValue=false)]
        public Image Image { get; set; }
        /// <summary>
        /// A URL for this block
        /// </summary>
        /// <value>A URL for this block</value>
        [DataMember(Name="URL", EmitDefaultValue=false)]
        public string URL { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:DateCreateModify
        /// </summary>
        /// <value>Assigned Type: c-0400:DateCreateModify</value>
        [DataMember(Name="DateCreateModify", EmitDefaultValue=false)]
        public DateCreateModify DateCreateModify { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextBlockDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  DateCreateModify: ").Append(DateCreateModify).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextBlockDetail);
        }
        /// <summary>
        /// Returns true if TextBlockDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of TextBlockDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextBlockDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && base.Equals(input) && 
                (
                    this.URL == input.URL ||
                    (this.URL != null &&
                    this.URL.Equals(input.URL))
                ) && base.Equals(input) && 
                (
                    this.DateCreateModify == input.DateCreateModify ||
                    (this.DateCreateModify != null &&
                    this.DateCreateModify.Equals(input.DateCreateModify))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.URL != null)
                    hashCode = hashCode * 59 + this.URL.GetHashCode();
                if (this.DateCreateModify != null)
                    hashCode = hashCode * 59 + this.DateCreateModify.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Describes the format of text such as plain text or html
    /// </summary>
    /// <value>Describes the format of text such as plain text or html</value>
    public enum TextFormatEnum
    {
        /// <summary>
        /// Enum PlainText for value: PlainText
        /// </summary>
        PlainText = PlainText,
        /// <summary>
        /// Enum HTML for value: HTML
        /// </summary>
        HTML = HTML
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Provides text and indicates whether it is formatted or not.
    /// </summary>
    [DataContract]
    public partial class TextFormatted :  IEquatable<TextFormatted>, IValidatableObject
    {
        /// <summary>
        /// Indicates the format of text used in the description e.g. plain text or html.
        /// </summary>
        /// <value>Indicates the format of text used in the description e.g. plain text or html.</value>
        [DataMember(Name="textFormat", EmitDefaultValue=false)]
        public TextFormatEnum? TextFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextFormatted" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="language">The language in which the text is provided..</param>
        /// <param name="textFormat">Indicates the format of text used in the description e.g. plain text or html..</param>
        public TextFormatted(string value = default(string), string language = default(string), TextFormatEnum? textFormat = default(TextFormatEnum?))
        {
            this.Value = value;
            this.Language = language;
            this.TextFormat = textFormat;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// The language in which the text is provided.
        /// </summary>
        /// <value>The language in which the text is provided.</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextFormatted {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  TextFormat: ").Append(TextFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextFormatted);
        }
        /// <summary>
        /// Returns true if TextFormatted instances are equal
        /// </summary>
        /// <param name="input">Instance of TextFormatted to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextFormatted input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.TextFormat == input.TextFormat ||
                    (this.TextFormat != null &&
                    this.TextFormat.Equals(input.TextFormat))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.TextFormat != null)
                    hashCode = hashCode * 59 + this.TextFormat.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 4096.", new [] { "Value" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// A counrty, provence/state or city code
    /// </summary>
    [DataContract]
    public partial class TravelerGeographicLocation :  IEquatable<TravelerGeographicLocation>, IValidatableObject
    {
        /// <summary>
        /// The geographic location type.  For example (Country)
        /// </summary>
        /// <value>The geographic location type.  For example (Country)</value>
        [DataMember(Name="travelerGeographicLocationType", EmitDefaultValue=false)]
        public TravelerGeographicTypeEnum? TravelerGeographicLocationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TravelerGeographicLocation" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="travelerGeographicLocationType">The geographic location type.  For example (Country).</param>
        public TravelerGeographicLocation(string value = default(string), TravelerGeographicTypeEnum? travelerGeographicLocationType = default(TravelerGeographicTypeEnum?))
        {
            this.Value = value;
            this.TravelerGeographicLocationType = travelerGeographicLocationType;
        }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TravelerGeographicLocation {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  TravelerGeographicLocationType: ").Append(TravelerGeographicLocationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TravelerGeographicLocation);
        }
        /// <summary>
        /// Returns true if TravelerGeographicLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of TravelerGeographicLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TravelerGeographicLocation input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.TravelerGeographicLocationType == input.TravelerGeographicLocationType ||
                    (this.TravelerGeographicLocationType != null &&
                    this.TravelerGeographicLocationType.Equals(input.TravelerGeographicLocationType))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.TravelerGeographicLocationType != null)
                    hashCode = hashCode * 59 + this.TravelerGeographicLocationType.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (string) maxLength
            if(this.Value != null && this.Value.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 32.", new [] { "Value" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Defines TravelerGeographicTypeEnum
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum TravelerGeographicTypeEnum
    {
        /// <summary>
        /// Enum Country for value: Country
        /// </summary>
        [EnumMember(Value = "Country")]
        Country = 1,
        /// <summary>
        /// Enum StateProvence for value: StateProvence
        /// </summary>
        [EnumMember(Value = "StateProvence")]
        StateProvence = 2,
        /// <summary>
        /// Enum City for value: City
        /// </summary>
        [EnumMember(Value = "City")]
        City = 3
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// The unit of measure in a code format. Refer to OpenTravel Code List Unit of Measure Code (UOM).
    /// </summary>
    /// <value>The unit of measure in a code format. Refer to OpenTravel Code List Unit of Measure Code (UOM).</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum UnitOfMeasureEnum
    {
        /// <summary>
        /// Enum Miles for value: Miles
        /// </summary>
        [EnumMember(Value = "Miles")]
        Miles = 1,
        /// <summary>
        /// Enum Kilometers for value: Kilometers
        /// </summary>
        [EnumMember(Value = "Kilometers")]
        Kilometers = 2,
        /// <summary>
        /// Enum Meters for value: Meters
        /// </summary>
        [EnumMember(Value = "Meters")]
        Meters = 3,
        /// <summary>
        /// Enum Millimeters for value: Millimeters
        /// </summary>
        [EnumMember(Value = "Millimeters")]
        Millimeters = 4,
        /// <summary>
        /// Enum Centimeters for value: Centimeters
        /// </summary>
        [EnumMember(Value = "Centimeters")]
        Centimeters = 5,
        /// <summary>
        /// Enum Yards for value: Yards
        /// </summary>
        [EnumMember(Value = "Yards")]
        Yards = 6,
        /// <summary>
        /// Enum Feet for value: Feet
        /// </summary>
        [EnumMember(Value = "Feet")]
        Feet = 7,
        /// <summary>
        /// Enum Inches for value: Inches
        /// </summary>
        [EnumMember(Value = "Inches")]
        Inches = 8,
        /// <summary>
        /// Enum Pixels for value: Pixels
        /// </summary>
        [EnumMember(Value = "Pixels")]
        Pixels = 9,
        /// <summary>
        /// Enum Block for value: Block
        /// </summary>
        [EnumMember(Value = "Block")]
        Block = 10,
        /// <summary>
        /// Enum Megabytes for value: Megabytes
        /// </summary>
        [EnumMember(Value = "Megabytes")]
        Megabytes = 11,
        /// <summary>
        /// Enum Gigabytes for value: Gigabytes
        /// </summary>
        [EnumMember(Value = "Gigabytes")]
        Gigabytes = 12,
        /// <summary>
        /// Enum Squarefeet for value: Square feet
        /// </summary>
        [EnumMember(Value = "Square feet")]
        Squarefeet = 13,
        /// <summary>
        /// Enum Squaremeters for value: Square meters
        /// </summary>
        [EnumMember(Value = "Square meters")]
        Squaremeters = 14,
        /// <summary>
        /// Enum Pounds for value: Pounds
        /// </summary>
        [EnumMember(Value = "Pounds")]
        Pounds = 15,
        /// <summary>
        /// Enum Kilograms for value: Kilograms
        /// </summary>
        [EnumMember(Value = "Kilograms")]
        Kilograms = 16,
        /// <summary>
        /// Enum Squareinch for value: Square inch
        /// </summary>
        [EnumMember(Value = "Square inch")]
        Squareinch = 17,
        /// <summary>
        /// Enum Squareyard for value: Square yard
        /// </summary>
        [EnumMember(Value = "Square yard")]
        Squareyard = 18,
        /// <summary>
        /// Enum Acre for value: Acre
        /// </summary>
        [EnumMember(Value = "Acre")]
        Acre = 19,
        /// <summary>
        /// Enum Squaremillimeter for value: Square millimeter
        /// </summary>
        [EnumMember(Value = "Square millimeter")]
        Squaremillimeter = 20,
        /// <summary>
        /// Enum Squarecentimeter for value: Square centimeter
        /// </summary>
        [EnumMember(Value = "Square centimeter")]
        Squarecentimeter = 21,
        /// <summary>
        /// Enum Hectare for value: Hectare
        /// </summary>
        [EnumMember(Value = "Hectare")]
        Hectare = 22,
        /// <summary>
        /// Enum Ounce for value: Ounce
        /// </summary>
        [EnumMember(Value = "Ounce")]
        Ounce = 23,
        /// <summary>
        /// Enum Gram for value: Gram
        /// </summary>
        [EnumMember(Value = "Gram")]
        Gram = 24,
        /// <summary>
        /// Enum Gallons for value: Gallons
        /// </summary>
        [EnumMember(Value = "Gallons")]
        Gallons = 25,
        /// <summary>
        /// Enum Liters for value: Liters
        /// </summary>
        [EnumMember(Value = "Liters")]
        Liters = 26,
        /// <summary>
        /// Enum Kilowatts for value: Kilowatts
        /// </summary>
        [EnumMember(Value = "Kilowatts")]
        Kilowatts = 27,
        /// <summary>
        /// Enum Cubicmeters for value: Cubic meters
        /// </summary>
        [EnumMember(Value = "Cubic meters")]
        Cubicmeters = 28
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Use only when the vendor currency is different than the requested currency.
    /// </summary>
    [DataContract]
    public partial class VendorCurrencyAmount :  IEquatable<VendorCurrencyAmount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorCurrencyAmount" /> class.
        /// </summary>
        /// <param name="amount">Vendor Currency Amount.</param>
        /// <param name="currencyCode">Assigned Type: c-0400:CurrencyCodeISO.</param>
        public VendorCurrencyAmount(float? amount = default(float?), string currencyCode = default(string))
        {
            this.Amount = amount;
            this.CurrencyCode = currencyCode;
        }
        /// <summary>
        /// Vendor Currency Amount
        /// </summary>
        /// <value>Vendor Currency Amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public float? Amount { get; set; }
        /// <summary>
        /// Assigned Type: c-0400:CurrencyCodeISO
        /// </summary>
        /// <value>Assigned Type: c-0400:CurrencyCodeISO</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VendorCurrencyAmount {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorCurrencyAmount);
        }
        /// <summary>
        /// Returns true if VendorCurrencyAmount instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorCurrencyAmount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorCurrencyAmount input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CurrencyCode (string) pattern
            Regex regexCurrencyCode = new Regex(@"[a-zA-Z]{3}", RegexOptions.CultureInvariant);
            if (false == regexCurrencyCode.Match(this.CurrencyCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyCode, must match a pattern of " + regexCurrencyCode, new [] { "CurrencyCode" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Type of Waiver like Death of Pessanger,illness Of Passenger, Death of Immediate Family Member  etc
    /// </summary>
    /// <value>Type of Waiver like Death of Pessanger,illness Of Passenger, Death of Immediate Family Member  etc</value>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum WaiverEnum
    {
        /// <summary>
        /// Enum DeathOfPassenger for value: DeathOfPassenger
        /// </summary>
        [EnumMember(Value = "DeathOfPassenger")]
        DeathOfPassenger = 1,
        /// <summary>
        /// Enum IllnessOfPassenger for value: IllnessOfPassenger
        /// </summary>
        [EnumMember(Value = "IllnessOfPassenger")]
        IllnessOfPassenger = 2,
        /// <summary>
        /// Enum DeathOfImmediateFamilyMember for value: DeathOfImmediateFamilyMember
        /// </summary>
        [EnumMember(Value = "DeathOfImmediateFamilyMember")]
        DeathOfImmediateFamilyMember = 3,
        /// <summary>
        /// Enum IllnessOfImmediateFamilyMember for value: IllnessOfImmediateFamilyMember
        /// </summary>
        [EnumMember(Value = "IllnessOfImmediateFamilyMember")]
        IllnessOfImmediateFamilyMember = 4,
        /// <summary>
        /// Enum TicketUpgrade for value: TicketUpgrade
        /// </summary>
        [EnumMember(Value = "TicketUpgrade")]
        TicketUpgrade = 5,
        /// <summary>
        /// Enum ScheduleChange for value: ScheduleChange
        /// </summary>
        [EnumMember(Value = "ScheduleChange")]
        ScheduleChange = 6
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// Warning
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "@type")]
    [JsonSubtypes.KnownSubType(typeof(WarningDetail), "WarningDetail")]
    public partial class Warning :  IEquatable<Warning>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Warning" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Warning() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Warning" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="statusCode">Http standard response code (required).</param>
        /// <param name="message">TODO - \\nTravelport standardized error/warning text. May contain parameters, and include which specific part of the request did not work and why. Get standardized message list, with parameters if appropriate, from ?????????????????????.</param>
        /// <param name="nameValuePair">nameValuePair.</param>
        /// <param name="extensionPointSummary">extensionPointSummary.</param>
        public Warning(string type = default(string), int? statusCode = default(int?), string message = default(string), List<NameValuePair> nameValuePair = default(List<NameValuePair>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Warning and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "statusCode" is required (not null)
            if (statusCode == null)
            {
                throw new InvalidDataException("statusCode is a required property for Warning and cannot be null");
            }
            else
            {
                this.StatusCode = statusCode;
            }
            this.Message = message;
            this.NameValuePair = nameValuePair;
            this.ExtensionPointSummary = extensionPointSummary;
        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Http standard response code
        /// </summary>
        /// <value>Http standard response code</value>
        [DataMember(Name="StatusCode", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }
        /// <summary>
        /// TODO - \\nTravelport standardized error/warning text. May contain parameters, and include which specific part of the request did not work and why. Get standardized message list, with parameters if appropriate, from ?????????????????????
        /// </summary>
        /// <value>TODO - \\nTravelport standardized error/warning text. May contain parameters, and include which specific part of the request did not work and why. Get standardized message list, with parameters if appropriate, from ?????????????????????</value>
        [DataMember(Name="Message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Gets or Sets NameValuePair
        /// </summary>
        [DataMember(Name="NameValuePair", EmitDefaultValue=false)]
        public List<NameValuePair> NameValuePair { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointSummary
        /// </summary>
        [DataMember(Name="ExtensionPoint_Summary", EmitDefaultValue=false)]
        public ExtensionPointSummary ExtensionPointSummary { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Warning {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  NameValuePair: ").Append(NameValuePair).Append("\n");
            sb.Append("  ExtensionPointSummary: ").Append(ExtensionPointSummary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Warning);
        }
        /// <summary>
        /// Returns true if Warning instances are equal
        /// </summary>
        /// <param name="input">Instance of Warning to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Warning input)
        {
            if (input == null)
                return false;
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.NameValuePair == input.NameValuePair ||
                    this.NameValuePair != null &&
                    this.NameValuePair.SequenceEqual(input.NameValuePair)
                ) && 
                (
                    this.ExtensionPointSummary == input.ExtensionPointSummary ||
                    (this.ExtensionPointSummary != null &&
                    this.ExtensionPointSummary.Equals(input.ExtensionPointSummary))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.NameValuePair != null)
                    hashCode = hashCode * 59 + this.NameValuePair.GetHashCode();
                if (this.ExtensionPointSummary != null)
                    hashCode = hashCode * 59 + this.ExtensionPointSummary.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // Message (string) maxLength
            if(this.Message != null && this.Message.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Message, length must be less than 4096.", new [] { "Message" });
            }
            yield break;
        }
    }
}
/* 
 * CatalogOfferingsResource
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
namespace TripServices.Swagger.Model
{
    /// <summary>
    /// WarningDetail
    /// </summary>
    [DataContract]
    public partial class WarningDetail : Warning,  IEquatable<WarningDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WarningDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WarningDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WarningDetail" /> class.
        /// </summary>
        /// <param name="sourceID">Travelport assigned source host or core identifier (required).</param>
        /// <param name="sourceCode">The error or warning code returned by the core/host system.</param>
        /// <param name="sourceDescription">The error message as it is returned from the originating core/host system.</param>
        /// <param name="extensionPointDetail">extensionPointDetail.</param>
        public WarningDetail(string sourceID = default(string), string sourceCode = default(string), string sourceDescription = default(string), ExtensionPointDetail extensionPointDetail = default(ExtensionPointDetail), string type = "WarningDetail", int? statusCode = default(int?), string message = default(string), List<NameValuePair> nameValuePair = default(List<NameValuePair>), ExtensionPointSummary extensionPointSummary = default(ExtensionPointSummary)) : base(type, statusCode, message, nameValuePair, extensionPointSummary)
        {
            // to ensure "sourceID" is required (not null)
            if (sourceID == null)
            {
                throw new InvalidDataException("sourceID is a required property for WarningDetail and cannot be null");
            }
            else
            {
                this.SourceID = sourceID;
            }
            this.SourceCode = sourceCode;
            this.SourceDescription = sourceDescription;
            this.ExtensionPointDetail = extensionPointDetail;
        }
        /// <summary>
        /// Travelport assigned source host or core identifier
        /// </summary>
        /// <value>Travelport assigned source host or core identifier</value>
        [DataMember(Name="SourceID", EmitDefaultValue=false)]
        public string SourceID { get; set; }
        /// <summary>
        /// The error or warning code returned by the core/host system
        /// </summary>
        /// <value>The error or warning code returned by the core/host system</value>
        [DataMember(Name="SourceCode", EmitDefaultValue=false)]
        public string SourceCode { get; set; }
        /// <summary>
        /// The error message as it is returned from the originating core/host system
        /// </summary>
        /// <value>The error message as it is returned from the originating core/host system</value>
        [DataMember(Name="SourceDescription", EmitDefaultValue=false)]
        public string SourceDescription { get; set; }
        /// <summary>
        /// Gets or Sets ExtensionPointDetail
        /// </summary>
        [DataMember(Name="ExtensionPoint_Detail", EmitDefaultValue=false)]
        public ExtensionPointDetail ExtensionPointDetail { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WarningDetail {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  SourceID: ").Append(SourceID).Append("\n");
            sb.Append("  SourceCode: ").Append(SourceCode).Append("\n");
            sb.Append("  SourceDescription: ").Append(SourceDescription).Append("\n");
            sb.Append("  ExtensionPointDetail: ").Append(ExtensionPointDetail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WarningDetail);
        }
        /// <summary>
        /// Returns true if WarningDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of WarningDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WarningDetail input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.SourceID == input.SourceID ||
                    (this.SourceID != null &&
                    this.SourceID.Equals(input.SourceID))
                ) && base.Equals(input) && 
                (
                    this.SourceCode == input.SourceCode ||
                    (this.SourceCode != null &&
                    this.SourceCode.Equals(input.SourceCode))
                ) && base.Equals(input) && 
                (
                    this.SourceDescription == input.SourceDescription ||
                    (this.SourceDescription != null &&
                    this.SourceDescription.Equals(input.SourceDescription))
                ) && base.Equals(input) && 
                (
                    this.ExtensionPointDetail == input.ExtensionPointDetail ||
                    (this.ExtensionPointDetail != null &&
                    this.ExtensionPointDetail.Equals(input.ExtensionPointDetail))
                );
        }
        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.SourceID != null)
                    hashCode = hashCode * 59 + this.SourceID.GetHashCode();
                if (this.SourceCode != null)
                    hashCode = hashCode * 59 + this.SourceCode.GetHashCode();
                if (this.SourceDescription != null)
                    hashCode = hashCode * 59 + this.SourceDescription.GetHashCode();
                if (this.ExtensionPointDetail != null)
                    hashCode = hashCode * 59 + this.ExtensionPointDetail.GetHashCode();
                return hashCode;
            }
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // SourceID (string) maxLength
            if(this.SourceID != null && this.SourceID.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceID, length must be less than 128.", new [] { "SourceID" });
            }
            // SourceCode (string) maxLength
            if(this.SourceCode != null && this.SourceCode.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceCode, length must be less than 32.", new [] { "SourceCode" });
            }
            // SourceDescription (string) maxLength
            if(this.SourceDescription != null && this.SourceDescription.Length > 4096)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceDescription, length must be less than 4096.", new [] { "SourceDescription" });
            }
            yield break;
        }
    }
}
