//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.5.0 (NJsonSchema v9.13.37.0 (Newtonsoft.Json v9.0.0.1)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace TripServices
{
    #pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.5.0 (NJsonSchema v9.13.37.0 (Newtonsoft.Json v9.0.0.1))")]
    public partial interface ICatalogOfferingsResourceClient
    {
        /// <summary>CatalogOfferingsResource - CreateAirChange</summary>
        /// <param name="view">The view.  Either detail or summary.</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console.</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false.</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response.</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogOfferingsResponse> CreateAirChangeAsync(string view, string sccType, string sccChannelID, bool? upsellInd, bool? asynchInd, CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP);
    
        /// <summary>CatalogOfferingsResource - CreateAirChange</summary>
        /// <param name="view">The view.  Either detail or summary.</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console.</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false.</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response.</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<CatalogOfferingsResponse> CreateAirChangeAsync(string view, string sccType, string sccChannelID, bool? upsellInd, bool? asynchInd, CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>CatalogOfferingsResource - BuildOptionsFromProducts</summary>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogOfferingsResponse> BuildOptionsFromProductsAsync(CatalogOfferingsQueryBuildOptionsFromProducts catalogOfferingsQueryBuildOptionsFromProducts, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP);
    
        /// <summary>CatalogOfferingsResource - BuildOptionsFromProducts</summary>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<CatalogOfferingsResponse> BuildOptionsFromProductsAsync(CatalogOfferingsQueryBuildOptionsFromProducts catalogOfferingsQueryBuildOptionsFromProducts, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>CatalogOfferingsResource - BuildOptionsFromCatalogOfferings</summary>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogOfferingsResponse> BuildOptionsFromCatalogOfferingsAsync(CatalogOfferingsQueryBuildOptionsFromCatalogOfferings catalogOfferingsQueryBuildOptionsFromCatalogOfferings, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP);
    
        /// <summary>CatalogOfferingsResource - BuildOptionsFromCatalogOfferings</summary>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<CatalogOfferingsResponse> BuildOptionsFromCatalogOfferingsAsync(CatalogOfferingsQueryBuildOptionsFromCatalogOfferings catalogOfferingsQueryBuildOptionsFromCatalogOfferings, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>CatalogOfferingsResource - Get</summary>
        /// <param name="identifier">The Identifier of the CatalogOfferings from which a page is to be returned</param>
        /// <param name="pageNumber">The page number to be returned</param>
        /// <param name="view">The view.  Either detail or summary.</param>
        /// <param name="upsellInd">if true response will include CatalogOffering plus one upsell (next higher fare)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogOfferingsResponse> GetAsync(string identifier, string pageNumber, string view, bool? upsellInd, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP);
    
        /// <summary>CatalogOfferingsResource - Get</summary>
        /// <param name="identifier">The Identifier of the CatalogOfferings from which a page is to be returned</param>
        /// <param name="pageNumber">The page number to be returned</param>
        /// <param name="view">The view.  Either detail or summary.</param>
        /// <param name="upsellInd">if true response will include CatalogOffering plus one upsell (next higher fare)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<CatalogOfferingsResponse> GetAsync(string identifier, string pageNumber, string view, bool? upsellInd, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>CatalogOfferingsResource - Create</summary>
        /// <param name="view">The view.  Either detail or summary.</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console.</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false.</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response.</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CatalogOfferingsResponse> CreateAsync(string view, string sccType, string sccChannelID, bool? upsellInd, bool? asynchInd, CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP);
    
        /// <summary>CatalogOfferingsResource - Create</summary>
        /// <param name="view">The view.  Either detail or summary.</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console.</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false.</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response.</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<CatalogOfferingsResponse> CreateAsync(string view, string sccType, string sccChannelID, bool? upsellInd, bool? asynchInd, CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.5.0 (NJsonSchema v9.13.37.0 (Newtonsoft.Json v9.0.0.1))")]
    public partial class CatalogOfferingsResourceClient : ICatalogOfferingsResourceClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public CatalogOfferingsResourceClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>CatalogOfferingsResource - CreateAirChange</summary>
        /// <param name="view">The view.  Either detail or summary.</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console.</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false.</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response.</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CatalogOfferingsResponse> CreateAirChangeAsync(string view, string sccType, string sccChannelID, bool? upsellInd, bool? asynchInd, CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP)
        {
            return CreateAirChangeAsync(view, sccType, sccChannelID, upsellInd, asynchInd, catalogOfferingsQueryRequest, e2ETrackingId, xAUTH_TRAVELPORT_ACCESSGROUP, System.Threading.CancellationToken.None);
        }
    
        /// <summary>CatalogOfferingsResource - CreateAirChange</summary>
        /// <param name="view">The view.  Either detail or summary.</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console.</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false.</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response.</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CatalogOfferingsResponse> CreateAirChangeAsync(string view, string sccType, string sccChannelID, bool? upsellInd, bool? asynchInd, CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("catalogofferings/airchange?");
            if (view != null) 
            {
                urlBuilder_.Append("view=").Append(System.Uri.EscapeDataString(ConvertToString(view, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sccType != null) 
            {
                urlBuilder_.Append("sccType=").Append(System.Uri.EscapeDataString(ConvertToString(sccType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sccChannelID != null) 
            {
                urlBuilder_.Append("sccChannelID=").Append(System.Uri.EscapeDataString(ConvertToString(sccChannelID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (upsellInd != null) 
            {
                urlBuilder_.Append("upsellInd=").Append(System.Uri.EscapeDataString(ConvertToString(upsellInd, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (asynchInd != null) 
            {
                urlBuilder_.Append("asynchInd=").Append(System.Uri.EscapeDataString(ConvertToString(asynchInd, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (e2ETrackingId != null)
                        request_.Headers.TryAddWithoutValidation("E2ETrackingId", ConvertToString(e2ETrackingId, System.Globalization.CultureInfo.InvariantCulture));
                    if (xAUTH_TRAVELPORT_ACCESSGROUP != null)
                        request_.Headers.TryAddWithoutValidation("XAUTH_TRAVELPORT_ACCESSGROUP", ConvertToString(xAUTH_TRAVELPORT_ACCESSGROUP, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(catalogOfferingsQueryRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "402") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "201") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CatalogOfferingsResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingsResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CatalogOfferingsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>CatalogOfferingsResource - BuildOptionsFromProducts</summary>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CatalogOfferingsResponse> BuildOptionsFromProductsAsync(CatalogOfferingsQueryBuildOptionsFromProducts catalogOfferingsQueryBuildOptionsFromProducts, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP)
        {
            return BuildOptionsFromProductsAsync(catalogOfferingsQueryBuildOptionsFromProducts, e2ETrackingId, xAUTH_TRAVELPORT_ACCESSGROUP, System.Threading.CancellationToken.None);
        }
    
        /// <summary>CatalogOfferingsResource - BuildOptionsFromProducts</summary>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CatalogOfferingsResponse> BuildOptionsFromProductsAsync(CatalogOfferingsQueryBuildOptionsFromProducts catalogOfferingsQueryBuildOptionsFromProducts, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("catalogofferings/buildoptionsfromcatalogproducts");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (e2ETrackingId != null)
                        request_.Headers.TryAddWithoutValidation("E2ETrackingId", ConvertToString(e2ETrackingId, System.Globalization.CultureInfo.InvariantCulture));
                    if (xAUTH_TRAVELPORT_ACCESSGROUP != null)
                        request_.Headers.TryAddWithoutValidation("XAUTH_TRAVELPORT_ACCESSGROUP", ConvertToString(xAUTH_TRAVELPORT_ACCESSGROUP, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(catalogOfferingsQueryBuildOptionsFromProducts, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "402") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "201") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CatalogOfferingsResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingsResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CatalogOfferingsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>CatalogOfferingsResource - BuildOptionsFromCatalogOfferings</summary>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CatalogOfferingsResponse> BuildOptionsFromCatalogOfferingsAsync(CatalogOfferingsQueryBuildOptionsFromCatalogOfferings catalogOfferingsQueryBuildOptionsFromCatalogOfferings, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP)
        {
            return BuildOptionsFromCatalogOfferingsAsync(catalogOfferingsQueryBuildOptionsFromCatalogOfferings, e2ETrackingId, xAUTH_TRAVELPORT_ACCESSGROUP, System.Threading.CancellationToken.None);
        }
    
        /// <summary>CatalogOfferingsResource - BuildOptionsFromCatalogOfferings</summary>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CatalogOfferingsResponse> BuildOptionsFromCatalogOfferingsAsync(CatalogOfferingsQueryBuildOptionsFromCatalogOfferings catalogOfferingsQueryBuildOptionsFromCatalogOfferings, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("catalogofferings/buildoptionsfromcatalogofferings");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (e2ETrackingId != null)
                        request_.Headers.TryAddWithoutValidation("E2ETrackingId", ConvertToString(e2ETrackingId, System.Globalization.CultureInfo.InvariantCulture));
                    if (xAUTH_TRAVELPORT_ACCESSGROUP != null)
                        request_.Headers.TryAddWithoutValidation("XAUTH_TRAVELPORT_ACCESSGROUP", ConvertToString(xAUTH_TRAVELPORT_ACCESSGROUP, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(catalogOfferingsQueryBuildOptionsFromCatalogOfferings, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "402") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "201") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CatalogOfferingsResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingsResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CatalogOfferingsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>CatalogOfferingsResource - Get</summary>
        /// <param name="identifier">The Identifier of the CatalogOfferings from which a page is to be returned</param>
        /// <param name="pageNumber">The page number to be returned</param>
        /// <param name="view">The view.  Either detail or summary.</param>
        /// <param name="upsellInd">if true response will include CatalogOffering plus one upsell (next higher fare)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CatalogOfferingsResponse> GetAsync(string identifier, string pageNumber, string view, bool? upsellInd, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP)
        {
            return GetAsync(identifier, pageNumber, view, upsellInd, e2ETrackingId, xAUTH_TRAVELPORT_ACCESSGROUP, System.Threading.CancellationToken.None);
        }
    
        /// <summary>CatalogOfferingsResource - Get</summary>
        /// <param name="identifier">The Identifier of the CatalogOfferings from which a page is to be returned</param>
        /// <param name="pageNumber">The page number to be returned</param>
        /// <param name="view">The view.  Either detail or summary.</param>
        /// <param name="upsellInd">if true response will include CatalogOffering plus one upsell (next higher fare)</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CatalogOfferingsResponse> GetAsync(string identifier, string pageNumber, string view, bool? upsellInd, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("catalogofferings?");
            if (identifier != null) 
            {
                urlBuilder_.Append("identifier=").Append(System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageNumber != null) 
            {
                urlBuilder_.Append("pageNumber=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (view != null) 
            {
                urlBuilder_.Append("view=").Append(System.Uri.EscapeDataString(ConvertToString(view, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (upsellInd != null) 
            {
                urlBuilder_.Append("upsellInd=").Append(System.Uri.EscapeDataString(ConvertToString(upsellInd, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (e2ETrackingId != null)
                        request_.Headers.TryAddWithoutValidation("E2ETrackingId", ConvertToString(e2ETrackingId, System.Globalization.CultureInfo.InvariantCulture));
                    if (xAUTH_TRAVELPORT_ACCESSGROUP != null)
                        request_.Headers.TryAddWithoutValidation("XAUTH_TRAVELPORT_ACCESSGROUP", ConvertToString(xAUTH_TRAVELPORT_ACCESSGROUP, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "402") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CatalogOfferingsResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingsResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CatalogOfferingsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>CatalogOfferingsResource - Create</summary>
        /// <param name="view">The view.  Either detail or summary.</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console.</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false.</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response.</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CatalogOfferingsResponse> CreateAsync(string view, string sccType, string sccChannelID, bool? upsellInd, bool? asynchInd, CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP)
        {
            return CreateAsync(view, sccType, sccChannelID, upsellInd, asynchInd, catalogOfferingsQueryRequest, e2ETrackingId, xAUTH_TRAVELPORT_ACCESSGROUP, System.Threading.CancellationToken.None);
        }
    
        /// <summary>CatalogOfferingsResource - Create</summary>
        /// <param name="view">The view.  Either detail or summary.</param>
        /// <param name="sccType">This is used to override specific rulesTypes set in search control console.</param>
        /// <param name="sccChannelID">Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query</param>
        /// <param name="upsellInd">If true one upsell will be returned in the response. If not passed will default to false.</param>
        /// <param name="asynchInd">If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response.</param>
        /// <param name="e2ETrackingId">Identifier used to correlate API invocations with operations across all affected Travelport systems.</param>
        /// <param name="xAUTH_TRAVELPORT_ACCESSGROUP">Identifies the Travelport access group with which the caller is associated</param>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CatalogOfferingsResponse> CreateAsync(string view, string sccType, string sccChannelID, bool? upsellInd, bool? asynchInd, CatalogOfferingsQueryRequest catalogOfferingsQueryRequest, string e2ETrackingId, string xAUTH_TRAVELPORT_ACCESSGROUP, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("catalogofferings?");
            if (view != null) 
            {
                urlBuilder_.Append("view=").Append(System.Uri.EscapeDataString(ConvertToString(view, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sccType != null) 
            {
                urlBuilder_.Append("sccType=").Append(System.Uri.EscapeDataString(ConvertToString(sccType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sccChannelID != null) 
            {
                urlBuilder_.Append("sccChannelID=").Append(System.Uri.EscapeDataString(ConvertToString(sccChannelID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (upsellInd != null) 
            {
                urlBuilder_.Append("upsellInd=").Append(System.Uri.EscapeDataString(ConvertToString(upsellInd, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (asynchInd != null) 
            {
                urlBuilder_.Append("asynchInd=").Append(System.Uri.EscapeDataString(ConvertToString(asynchInd, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (e2ETrackingId != null)
                        request_.Headers.TryAddWithoutValidation("E2ETrackingId", ConvertToString(e2ETrackingId, System.Globalization.CultureInfo.InvariantCulture));
                    if (xAUTH_TRAVELPORT_ACCESSGROUP != null)
                        request_.Headers.TryAddWithoutValidation("XAUTH_TRAVELPORT_ACCESSGROUP", ConvertToString(xAUTH_TRAVELPORT_ACCESSGROUP, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(catalogOfferingsQueryRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "402") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("A server side error occurred.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CatalogOfferingsResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingsResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CatalogOfferingsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ErrorResponse 
    {
        /// <summary>Unique transaction, correlation or tracking id for a single request and reply i.e. for a single transaction. Should be a 128 bit GUID format. Also know as E2ETrackingId.</summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }
    
        /// <summary>Optional ID for internal child transactions created for processing a single request (single transaction). Should be a 128 bit GUID format. Also known as ChildTrackingId.</summary>
        [Newtonsoft.Json.JsonProperty("traceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceId { get; set; }
    
        /// <summary>Assigned Type: c-0400:Result</summary>
        [Newtonsoft.Json.JsonProperty("Result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result Result { get; set; }
    
        /// <summary>Assigned Type: c-0400:Identifier</summary>
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifier Identifier { get; set; }
    
        /// <summary>Assigned Type: c-0400:NextSteps</summary>
        [Newtonsoft.Json.JsonProperty("NextSteps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NextSteps NextSteps { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(5)]
        public System.Collections.Generic.ICollection<ReferenceList> ReferenceList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ErrorResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("ReferenceListTextBlock", typeof(ReferenceListTextBlock))]
    [JsonInheritanceAttribute("ReferenceListProduct", typeof(ReferenceListProduct))]
    [JsonInheritanceAttribute("ReferenceListTermsAndConditions", typeof(ReferenceListTermsAndConditions))]
    [JsonInheritanceAttribute("ReferenceListFlight", typeof(ReferenceListFlight))]
    [JsonInheritanceAttribute("ReferenceListBrand", typeof(ReferenceListBrand))]
    [JsonInheritanceAttribute("ReferenceListBrandFullInfo", typeof(ReferenceListBrandFullInfo))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ReferenceList 
    {
        /// <summary>Uniquely identifies for the Reference List</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Shared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Shared { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ReferenceList FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReferenceList>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ReferenceListTextBlock : ReferenceList
    {
        [Newtonsoft.Json.JsonProperty("TextBlock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TextBlock> TextBlock { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ReferenceListTextBlock FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReferenceListTextBlock>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("PriceBreakdownAir", typeof(PriceBreakdownAir))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class PriceBreakdown 
    {
        /// <summary>Assigned Type: c-0400:Amount</summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Shared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Shared { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PriceBreakdown FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PriceBreakdown>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CatalogOfferingsResponse 
    {
        /// <summary>Assigned Type: ctlg-0400:CatalogOfferings</summary>
        [Newtonsoft.Json.JsonProperty("CatalogOfferings", Required = Newtonsoft.Json.Required.Always)]
        public CatalogOfferingsID CatalogOfferings { get; set; }
    
        /// <summary>Unique transaction, correlation or tracking id for a single request and reply i.e. for a single transaction. Should be a 128 bit GUID format. Also know as E2ETrackingId.</summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }
    
        /// <summary>Optional ID for internal child transactions created for processing a single request (single transaction). Should be a 128 bit GUID format. Also known as ChildTrackingId.</summary>
        [Newtonsoft.Json.JsonProperty("traceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TraceId { get; set; }
    
        /// <summary>Assigned Type: c-0400:Result</summary>
        [Newtonsoft.Json.JsonProperty("Result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result Result { get; set; }
    
        /// <summary>Assigned Type: c-0400:Identifier</summary>
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifier Identifier { get; set; }
    
        /// <summary>Assigned Type: c-0400:NextSteps</summary>
        [Newtonsoft.Json.JsonProperty("NextSteps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NextSteps NextSteps { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReferenceList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(5)]
        public System.Collections.Generic.ICollection<ReferenceList> ReferenceList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CatalogOfferingsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingsResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ReferenceListProduct : ReferenceList
    {
        [Newtonsoft.Json.JsonProperty("Product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductID> Product { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ReferenceListProduct FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReferenceListProduct>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ReferenceListTermsAndConditions : ReferenceList
    {
        [Newtonsoft.Json.JsonProperty("TermsAndConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TermsAndConditionsID> TermsAndConditions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ReferenceListTermsAndConditions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReferenceListTermsAndConditions>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("TermsAndConditions", typeof(TermsAndConditions))]
    [JsonInheritanceAttribute("TermsAndConditionsAir", typeof(TermsAndConditionsAir))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class TermsAndConditionsID 
    {
        /// <summary>Local indentifier within a given message for this object.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Used to reference another instance of this object in the same message.</summary>
        [Newtonsoft.Json.JsonProperty("termsAndConditionsRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TermsAndConditionsRef { get; set; }
    
        /// <summary>Assigned Type: c-0400:Identifier</summary>
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifier Identifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TermsAndConditionsID FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsAndConditionsID>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class TermsAndConditions : TermsAndConditionsID
    {
        /// <summary>The data and time range that the Offer is valid.</summary>
        [Newtonsoft.Json.JsonProperty("ExpiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpiryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TermsAndConditions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsAndConditions>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("Product", typeof(Product))]
    [JsonInheritanceAttribute("ProductAir", typeof(ProductAir))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ProductID 
    {
        /// <summary>Local indentifier within a given message for this object.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Used to reference another instance of this object in the same message</summary>
        [Newtonsoft.Json.JsonProperty("productRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductRef { get; set; }
    
        /// <summary>Assigned Type: c-0400:Identifier</summary>
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifier Identifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProductID FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductID>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Product : ProductID
    {
        /// <summary>The number of products dependent on context</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Quantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Product FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Product>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("CatalogOffering", typeof(CatalogOffering))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CatalogOfferingID 
    {
        /// <summary>Local indentifier within a given message for this object.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Used to reference another instance of this object in the same message</summary>
        [Newtonsoft.Json.JsonProperty("CatalogOfferingRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CatalogOfferingRef { get; set; }
    
        /// <summary>Assigned Type: c-0400:Identifier</summary>
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifier Identifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CatalogOfferingID FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingID>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CatalogOffering : CatalogOfferingID
    {
        [Newtonsoft.Json.JsonProperty("ProductOptions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<ProductOptionsID> ProductOptions { get; set; } = new System.Collections.ObjectModel.Collection<ProductOptionsID>();
    
        /// <summary>Assigned Type: c-0400:Price</summary>
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.Always)]
        public Price Price { get; set; }
    
        /// <summary>Assigned Type: ctlg-0400:TermsAndConditions</summary>
        [Newtonsoft.Json.JsonProperty("TermsAndConditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TermsAndConditionsID TermsAndConditions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CatalogOffering FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOffering>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("ProductOptions", typeof(ProductOptions))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ProductOptionsID 
    {
        /// <summary>Local indentifier within a given message for this object.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Assigned Type: c-0400:Identifier</summary>
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifier Identifier { get; set; }
    
        /// <summary>Used to reference another instance of this object in the same message</summary>
        [Newtonsoft.Json.JsonProperty("ProductOptionsRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductOptionsRef { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProductOptionsID FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductOptionsID>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ProductOptions : ProductOptionsID
    {
        /// <summary>Assigned Type: c-0400:NonnegativeInteger</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Sequence { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Product", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(1000)]
        public System.Collections.Generic.ICollection<ProductID> Product { get; set; } = new System.Collections.ObjectModel.Collection<ProductID>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProductOptions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductOptions>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("CatalogOfferings", typeof(CatalogOfferings))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CatalogOfferingsID 
    {
        /// <summary>Local indentifier within a given message for this object.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Assigned Type: c-0400:Identifier</summary>
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifier Identifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CatalogOfferingsID FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingsID>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CatalogOfferings : CatalogOfferingsID
    {
        /// <summary>Assigned Type: c-0400:Currency</summary>
        [Newtonsoft.Json.JsonProperty("DefaultCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Currency DefaultCurrency { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CatalogOffering", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<CatalogOfferingID> CatalogOffering { get; set; } = new System.Collections.ObjectModel.Collection<CatalogOfferingID>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CatalogOfferings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferings>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CatalogOfferingsQueryPage 
    {
        /// <summary>Assigned Type: c-0400:GUID</summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Identifier { get; set; }
    
        /// <summary>The page number to be returned</summary>
        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageNumber { get; set; }
    
        /// <summary>The view.  Either detail or summary.</summary>
        [Newtonsoft.Json.JsonProperty("view", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string View { get; set; }
    
        /// <summary>if true response will include CatalogOffering plus one upsell (next higher fare)</summary>
        [Newtonsoft.Json.JsonProperty("upsellInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpsellInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CatalogOfferingsQueryPage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingsQueryPage>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CatalogOfferingsQueryRequest 
    {
        [Newtonsoft.Json.JsonProperty("CatalogOfferingsRequest", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(5)]
        public System.Collections.Generic.ICollection<CatalogOfferingsRequest> CatalogOfferingsRequest { get; set; } = new System.Collections.ObjectModel.Collection<CatalogOfferingsRequest>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CatalogOfferingsQueryRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingsQueryRequest>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CatalogOfferingsQueryRequestQueryParameters 
    {
        /// <summary>The view.  Either detail or summary.</summary>
        [Newtonsoft.Json.JsonProperty("view", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string View { get; set; }
    
        /// <summary>This is used to override specific rulesTypes set in search control console.</summary>
        [Newtonsoft.Json.JsonProperty("sccType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SccType { get; set; }
    
        /// <summary>Search Control Console Channel ID allows the user to allocate a customized set of search parameters to their query</summary>
        [Newtonsoft.Json.JsonProperty("sccChannelID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SccChannelID { get; set; }
    
        /// <summary>If true one upsell will be returned in the response. If not passed will default to false.</summary>
        [Newtonsoft.Json.JsonProperty("upsellInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpsellInd { get; set; }
    
        /// <summary>If true the catalogOfferings results will be returned asynchronously. Determined by amount of results or time response.</summary>
        [Newtonsoft.Json.JsonProperty("asynchInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AsynchInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CatalogOfferingsQueryRequestQueryParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingsQueryRequestQueryParameters>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("CatalogOfferingsRequestAir", typeof(CatalogOfferingsRequestAir))]
    [JsonInheritanceAttribute("CatalogOfferingsRequestAirChange", typeof(CatalogOfferingsRequestAirChange))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CatalogOfferingsRequest 
    {
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Shared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Shared { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CatalogOfferingsRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingsRequest>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("BuildFromProductsRequestAir", typeof(BuildFromProductsRequestAir))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BuildFromProductsRequest 
    {
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Shared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Shared { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BuildFromProductsRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BuildFromProductsRequest>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("BuildFromCatalogOfferingsRequestAir", typeof(BuildFromCatalogOfferingsRequestAir))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BuildFromCatalogOfferingsRequest 
    {
        /// <summary>Assigned Type: ctlg-0400:CatalogOfferings_ID</summary>
        [Newtonsoft.Json.JsonProperty("CatalogOfferingsIdentifier", Required = Newtonsoft.Json.Required.Always)]
        public CatalogOfferingsID CatalogOfferingsIdentifier { get; set; }
    
        /// <summary>Assigned Type: ctlg-0400:CatalogOffering_ID</summary>
        [Newtonsoft.Json.JsonProperty("CatalogOfferingIdentifier", Required = Newtonsoft.Json.Required.Always)]
        public CatalogOfferingID CatalogOfferingIdentifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProductIdentifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<ProductID> ProductIdentifier { get; set; } = new System.Collections.ObjectModel.Collection<ProductID>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Shared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Shared { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BuildFromCatalogOfferingsRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BuildFromCatalogOfferingsRequest>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum FareRulesEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TextShort")]
        TextShort = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TextLong")]
        TextLong = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Structured")]
        Structured = 2,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class PaymentCriteria 
    {
        /// <summary>This the BIN\/IIN</summary>
        [Newtonsoft.Json.JsonProperty("IssuerIdentificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{6,9}")]
        public string IssuerIdentificationNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PaymentCriteria FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentCriteria>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Amount 
    {
        /// <summary>Source of the selection of this currenct</summary>
        [Newtonsoft.Json.JsonProperty("currencySource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CurrencySourceEnum? CurrencySource { get; set; }
    
        /// <summary>Assigned Type: c-0400:CurrencyCodeISO</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{3}")]
        public string CurrencyCode { get; set; }
    
        /// <summary>The price prior to all applicable taxes of a product such as the rate for a room or fare for a flight.</summary>
        [Newtonsoft.Json.JsonProperty("Base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Base { get; set; }
    
        /// <summary>Assigned Type: c-0400:Taxes</summary>
        [Newtonsoft.Json.JsonProperty("Taxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Taxes Taxes { get; set; }
    
        /// <summary>Assigned Type: c-0400:Fees</summary>
        [Newtonsoft.Json.JsonProperty("Fees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fees Fees { get; set; }
    
        /// <summary>Specifies the total price including base + taxes + fees</summary>
        [Newtonsoft.Json.JsonProperty("Total", Required = Newtonsoft.Json.Required.Always)]
        public double Total { get; set; }
    
        /// <summary>True if this amount has been converted from the original amount</summary>
        [Newtonsoft.Json.JsonProperty("approximateInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApproximateInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Amount FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Amount>(data);
        }
    
    }
    
    /// <summary>The default currency that will apply to all prices, amounts, fares, etc. in a message.  It is placed at the top of any message using this object.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Currency 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }
    
        /// <summary>Assigned Type: c-0400:CurrencyCodeISO</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{3}")]
        public string Code { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Currency FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Currency>(data);
        }
    
    }
    
    /// <summary>A monetary amount, up to 4 decimal places. Decimal place needs to be included.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CurrencyAmount 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }
    
        /// <summary>Assigned Type: c-0400:CurrencyCodeISO</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{3}")]
        public string Code { get; set; }
    
        /// <summary>Assigned Type: c-0400:CurrencyMinorUnit</summary>
        [Newtonsoft.Json.JsonProperty("minorUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? MinorUnit { get; set; }
    
        /// <summary>The origin of the requested currency code</summary>
        [Newtonsoft.Json.JsonProperty("currencySource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CurrencySourceEnum? CurrencySource { get; set; }
    
        /// <summary>True if the currency amount has been converted from the original amount</summary>
        [Newtonsoft.Json.JsonProperty("approximateInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApproximateInd { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CurrencyAmount FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CurrencyAmount>(data);
        }
    
    }
    
    /// <summary>Specifies the ID for the membership program.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CustomerLoyalty 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 1)]
        public string Value { get; set; }
    
        /// <summary>Customer Loyality Id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Assigned Type: c-0400:Priority</summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 300)]
        public int? Priority { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringShort</summary>
        [Newtonsoft.Json.JsonProperty("programId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string ProgramId { get; set; }
    
        /// <summary>Assigned Type: c-0400:LoyaltyProgramName</summary>
        [Newtonsoft.Json.JsonProperty("programName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string ProgramName { get; set; }
    
        /// <summary>Assigned Type: c-0400:LoyaltySupplierType</summary>
        [Newtonsoft.Json.JsonProperty("supplierType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string SupplierType { get; set; }
    
        /// <summary>Assigned Type: c-0400:LoyaltySupplier</summary>
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Supplier { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringTiny</summary>
        [Newtonsoft.Json.JsonProperty("tier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Tier { get; set; }
    
        /// <summary>Assigned Type: c-0400:TinyStrings</summary>
        [Newtonsoft.Json.JsonProperty("shareWithSupplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ShareWithSupplier { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringShort</summary>
        [Newtonsoft.Json.JsonProperty("cardHolderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string CardHolderName { get; set; }
    
        /// <summary>Customer loyalty number has been validated by the supplier</summary>
        [Newtonsoft.Json.JsonProperty("validatedInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidatedInd { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CustomerLoyalty FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomerLoyalty>(data);
        }
    
    }
    
    /// <summary>Time stamp of the creation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class DateCreateModify 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Value { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringTiny</summary>
        [Newtonsoft.Json.JsonProperty("creatorID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string CreatorID { get; set; }
    
        /// <summary>Time stamp of last modification.</summary>
        [Newtonsoft.Json.JsonProperty("lastModify", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModify { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringTiny</summary>
        [Newtonsoft.Json.JsonProperty("lastModifierID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string LastModifierID { get; set; }
    
        /// <summary>Date an item will be purged from a system of record</summary>
        [Newtonsoft.Json.JsonProperty("purge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Purge { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DateCreateModify FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateCreateModify>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("ErrorWarningDetail", typeof(ErrorWarningDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ErrorWarning 
    {
        /// <summary>Http standard response code</summary>
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.Always)]
        public int StatusCode { get; set; }
    
        /// <summary>TODO - \nTravelport standardized error\/warning text. May contain parameters, and include which specific part of the request did not work and why. Get standardized message list, with parameters if appropriate, from ?????????????????????</summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4096)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NameValuePair", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<NameValuePair> NameValuePair { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ErrorWarning FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorWarning>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("ErrorDetail", typeof(ErrorDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Error 
    {
        /// <summary>Http standard response code</summary>
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.Always)]
        public int StatusCode { get; set; }
    
        /// <summary>TODO - \nTravelport standardized error\/warning text. May contain parameters, and include which specific part of the request did not work and why. Get standardized message list, with parameters if appropriate, from ?????????????????????</summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4096)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NameValuePair", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<NameValuePair> NameValuePair { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Error FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("WarningDetail", typeof(WarningDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Warning 
    {
        /// <summary>Http standard response code</summary>
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.Always)]
        public int StatusCode { get; set; }
    
        /// <summary>TODO - \nTravelport standardized error\/warning text. May contain parameters, and include which specific part of the request did not work and why. Get standardized message list, with parameters if appropriate, from ?????????????????????</summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4096)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NameValuePair", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<NameValuePair> NameValuePair { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Warning FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Warning>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ErrorWarningDetail : ErrorWarning
    {
        /// <summary>Travelport assigned source host or core identifier</summary>
        [Newtonsoft.Json.JsonProperty("SourceID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string SourceID { get; set; }
    
        /// <summary>The error or warning code returned by the core\/host system</summary>
        [Newtonsoft.Json.JsonProperty("SourceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string SourceCode { get; set; }
    
        /// <summary>The error message as it is returned from the originating core\/host system</summary>
        [Newtonsoft.Json.JsonProperty("SourceDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4096)]
        public string SourceDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ErrorWarningDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorWarningDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ErrorDetail : Error
    {
        /// <summary>Travelport assigned source host or core identifier</summary>
        [Newtonsoft.Json.JsonProperty("SourceID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string SourceID { get; set; }
    
        /// <summary>The error or warning code returned by the core\/host system</summary>
        [Newtonsoft.Json.JsonProperty("SourceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string SourceCode { get; set; }
    
        /// <summary>The error message as it is returned from the originating core\/host system</summary>
        [Newtonsoft.Json.JsonProperty("SourceDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4096)]
        public string SourceDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ErrorDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class WarningDetail : Warning
    {
        /// <summary>Travelport assigned source host or core identifier</summary>
        [Newtonsoft.Json.JsonProperty("SourceID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string SourceID { get; set; }
    
        /// <summary>The error or warning code returned by the core\/host system</summary>
        [Newtonsoft.Json.JsonProperty("SourceCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string SourceCode { get; set; }
    
        /// <summary>The error message as it is returned from the originating core\/host system</summary>
        [Newtonsoft.Json.JsonProperty("SourceDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4096)]
        public string SourceDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static WarningDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WarningDetail>(data);
        }
    
    }
    
    /// <summary>The fee amount with feecode and reporting informtion</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Fee 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }
    
        /// <summary>Assigned Type: c-0400:CurrencyCodeISO</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{3}")]
        public string CurrencyCode { get; set; }
    
        /// <summary>Assigned Type: c-0400:String</summary>
        [Newtonsoft.Json.JsonProperty("feeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string FeeCode { get; set; }
    
        /// <summary>Assigned Type: c-0400:String</summary>
        [Newtonsoft.Json.JsonProperty("reportingAuthority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ReportingAuthority { get; set; }
    
        /// <summary>Assigned Type: c-0400:String</summary>
        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Purpose { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringLong</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4096)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Fee FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Fee>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("FeesDetail", typeof(FeesDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Fees 
    {
        /// <summary>A monetary amount, up to 4 decimal places. Decimal place needs to be included.</summary>
        [Newtonsoft.Json.JsonProperty("TotalFees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalFees { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Fees FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Fees>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class FeesDetail : Fees
    {
        [Newtonsoft.Json.JsonProperty("Fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<Fee> Fee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FeesDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FeesDetail>(data);
        }
    
    }
    
    /// <summary>Identifier provides the ability to create a globally unique identifier. For the identifier to be globally unique it must have a system provided identifier and the system must be identified using a global naming authority. System identification uses the domain naming system (DNS) to assure they are globally unique and should be an URL. The system provided ID will typically be a primary or surrogate key in a database.\n\nThe URL, system and company attributes can be omitted only when the system context can be implied by a parent or ancestor element.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Identifier 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Value { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringShort</summary>
        [Newtonsoft.Json.JsonProperty("authority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Authority { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Identifier FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Identifier>(data);
        }
    
    }
    
    /// <summary>Image Details</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Image 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        /// <summary>The number of pixels on the vertical edge of the image.</summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Height { get; set; }
    
        /// <summary>The number of pixels on the horizontal edge of the image.</summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Image FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Image>(data);
        }
    
    }
    
    /// <summary>Used for dimensional units (width, height, depth) or weight</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Measurement 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }
    
        /// <summary>The type of measurement, such as width, height, weight</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MeasurementTypeEnum? Type { get; set; }
    
        /// <summary>The unit that applies to the amount, such as feet, meters, pounds</summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UnitOfMeasureEnum? Unit { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Measurement FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Measurement>(data);
        }
    
    }
    
    /// <summary>Used for data stored in Name\/Value pairs</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class NameValuePair 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Value { get; set; }
    
        /// <summary>Optional internally referenced id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Assigned Type: c-0400:String</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static NameValuePair FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NameValuePair>(data);
        }
    
    }
    
    /// <summary>A URL that describes a step that can be applied to the resource containing the next step structure.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class NextStep 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        /// <summary>Identifier for the Next Step</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringTiny</summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Action { get; set; }
    
        /// <summary>possible action that can be performed on the returned results</summary>
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NextStepMethodEnum Method { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringTiny</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static NextStep FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NextStep>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class NextSteps 
    {
        /// <summary>The base portion of the uri in order to shorten the uri's in the individual steps</summary>
        [Newtonsoft.Json.JsonProperty("baseURI", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BaseURI { get; set; }
    
        /// <summary>Optional internally referenced id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("NextStep", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(20)]
        public System.Collections.Generic.ICollection<NextStep> NextStep { get; set; } = new System.Collections.ObjectModel.Collection<NextStep>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static NextSteps FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NextSteps>(data);
        }
    
    }
    
    /// <summary>a pseudo city information contains the details about the corporate user of a computer reservation system (CRS) or global distribution system (GDS), typically a travel agency.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class PseudoCityInfo 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 2)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z0-9]{2,10})")]
        public string Value { get; set; }
    
        /// <summary>Assigned Type: c-0400:SupplierCode</summary>
        [Newtonsoft.Json.JsonProperty("providerCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 2)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z0-9]{2,5})")]
        public string ProviderCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PseudoCityInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PseudoCityInfo>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Result 
    {
        /// <summary>Indication of the processing status of the response message</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResultStatusEnum? Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(50)]
        public System.Collections.Generic.ICollection<Error> Error { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Warning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<Warning> Warning { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Result FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(data);
        }
    
    }
    
    /// <summary>The tax amount with tax code and reporting informtion</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Tax 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }
    
        /// <summary>Assigned Type: c-0400:CurrencyCodeISO</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{3}")]
        public string CurrencyCode { get; set; }
    
        /// <summary>Assigned Type: c-0400:String</summary>
        [Newtonsoft.Json.JsonProperty("taxCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string TaxCode { get; set; }
    
        /// <summary>Assigned Type: c-0400:String</summary>
        [Newtonsoft.Json.JsonProperty("reportingAuthority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string ReportingAuthority { get; set; }
    
        /// <summary>Assigned Type: c-0400:String</summary>
        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Purpose { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringLong</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4096)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Tax FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Tax>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("TaxesDetail", typeof(TaxesDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Taxes 
    {
        /// <summary>A monetary amount, up to 4 decimal places. Decimal place needs to be included.</summary>
        [Newtonsoft.Json.JsonProperty("TotalTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Taxes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Taxes>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class TaxesDetail : Taxes
    {
        [Newtonsoft.Json.JsonProperty("Tax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<Tax> Tax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TaxesDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaxesDetail>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("TextBlockDetail", typeof(TextBlockDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class TextBlock 
    {
        /// <summary>Assigned Type: c-0400:String</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Title { get; set; }
    
        /// <summary>Internally referenced id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TextFormatted", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(50)]
        public System.Collections.Generic.ICollection<TextFormatted> TextFormatted { get; set; } = new System.Collections.ObjectModel.Collection<TextFormatted>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TextBlock FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TextBlock>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("BrandTextDetail", typeof(BrandTextDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BrandText 
    {
        /// <summary>Internally referenced id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The audience targeted for the brand information</summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrandTargetEnum? Target { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TextFormatted", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(50)]
        public System.Collections.Generic.ICollection<TextFormatted> TextFormatted { get; set; } = new System.Collections.ObjectModel.Collection<TextFormatted>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BrandText FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BrandText>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("RateDescriptionDetail", typeof(RateDescriptionDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class RateDescription 
    {
        /// <summary>Assigned Type: c-0400:String</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Title { get; set; }
    
        /// <summary>Internally referenced id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TextFormatted", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(50)]
        public System.Collections.Generic.ICollection<TextFormatted> TextFormatted { get; set; } = new System.Collections.ObjectModel.Collection<TextFormatted>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static RateDescription FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RateDescription>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("TermsAndConditionsSubCategoryDetail", typeof(TermsAndConditionsSubCategoryDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class TermsAndConditionsSubCategory 
    {
        /// <summary>Assigned Type: c-0400:String</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Title { get; set; }
    
        /// <summary>Internally referenced id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TextFormatted", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(50)]
        public System.Collections.Generic.ICollection<TextFormatted> TextFormatted { get; set; } = new System.Collections.ObjectModel.Collection<TextFormatted>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TermsAndConditionsSubCategory FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsAndConditionsSubCategory>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("BrandFeatureTextDetail", typeof(BrandFeatureTextDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BrandFeatureText 
    {
        /// <summary>Assigned Type: c-0400:String</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Title { get; set; }
    
        /// <summary>Internally referenced id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TextFormatted", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(50)]
        public System.Collections.Generic.ICollection<TextFormatted> TextFormatted { get; set; } = new System.Collections.ObjectModel.Collection<TextFormatted>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BrandFeatureText FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BrandFeatureText>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class TextBlockDetail : TextBlock
    {
        /// <summary>The order of the text block, if there are more than one block.</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sequence { get; set; }
    
        /// <summary>Assigned Type: c-0400:Description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string Description { get; set; }
    
        /// <summary>Assigned Type: c-0400:Image</summary>
        [Newtonsoft.Json.JsonProperty("Image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Image { get; set; }
    
        /// <summary>A URL for this block</summary>
        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string URL { get; set; }
    
        /// <summary>Assigned Type: c-0400:DateCreateModify</summary>
        [Newtonsoft.Json.JsonProperty("DateCreateModify", Required = Newtonsoft.Json.Required.Always)]
        public DateCreateModify DateCreateModify { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TextBlockDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TextBlockDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BrandTextDetail : BrandText
    {
        /// <summary>The order of the text block, if there are more than one block.</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sequence { get; set; }
    
        /// <summary>Assigned Type: c-0400:Description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string Description { get; set; }
    
        /// <summary>Assigned Type: c-0400:Image</summary>
        [Newtonsoft.Json.JsonProperty("Image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Image { get; set; }
    
        /// <summary>A URL for this block</summary>
        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string URL { get; set; }
    
        /// <summary>Assigned Type: c-0400:DateCreateModify</summary>
        [Newtonsoft.Json.JsonProperty("DateCreateModify", Required = Newtonsoft.Json.Required.Always)]
        public DateCreateModify DateCreateModify { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BrandTextDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BrandTextDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class RateDescriptionDetail : RateDescription
    {
        /// <summary>The order of the text block, if there are more than one block.</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sequence { get; set; }
    
        /// <summary>Assigned Type: c-0400:Description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string Description { get; set; }
    
        /// <summary>Assigned Type: c-0400:Image</summary>
        [Newtonsoft.Json.JsonProperty("Image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Image { get; set; }
    
        /// <summary>A URL for this block</summary>
        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string URL { get; set; }
    
        /// <summary>Assigned Type: c-0400:DateCreateModify</summary>
        [Newtonsoft.Json.JsonProperty("DateCreateModify", Required = Newtonsoft.Json.Required.Always)]
        public DateCreateModify DateCreateModify { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static RateDescriptionDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RateDescriptionDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class TermsAndConditionsSubCategoryDetail : TermsAndConditionsSubCategory
    {
        /// <summary>The order of the text block, if there are more than one block.</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sequence { get; set; }
    
        /// <summary>Assigned Type: c-0400:Description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string Description { get; set; }
    
        /// <summary>Assigned Type: c-0400:Image</summary>
        [Newtonsoft.Json.JsonProperty("Image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Image { get; set; }
    
        /// <summary>A URL for this block</summary>
        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string URL { get; set; }
    
        /// <summary>Assigned Type: c-0400:DateCreateModify</summary>
        [Newtonsoft.Json.JsonProperty("DateCreateModify", Required = Newtonsoft.Json.Required.Always)]
        public DateCreateModify DateCreateModify { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TermsAndConditionsSubCategoryDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsAndConditionsSubCategoryDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BrandFeatureTextDetail : BrandFeatureText
    {
        /// <summary>The order of the text block, if there are more than one block.</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sequence { get; set; }
    
        /// <summary>Assigned Type: c-0400:Description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string Description { get; set; }
    
        /// <summary>Assigned Type: c-0400:Image</summary>
        [Newtonsoft.Json.JsonProperty("Image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Image { get; set; }
    
        /// <summary>A URL for this block</summary>
        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string URL { get; set; }
    
        /// <summary>Assigned Type: c-0400:DateCreateModify</summary>
        [Newtonsoft.Json.JsonProperty("DateCreateModify", Required = Newtonsoft.Json.Required.Always)]
        public DateCreateModify DateCreateModify { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BrandFeatureTextDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BrandFeatureTextDetail>(data);
        }
    
    }
    
    /// <summary>Provides text and indicates whether it is formatted or not.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class TextFormatted 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4096)]
        public string Value { get; set; }
    
        /// <summary>The language in which the text is provided.</summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        /// <summary>Indicates the format of text used in the description e.g. plain text or html.</summary>
        [Newtonsoft.Json.JsonProperty("textFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TextFormatEnum? TextFormat { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TextFormatted FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TextFormatted>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("PriceDetail", typeof(PriceDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Price 
    {
        /// <summary>Assigned Type: c-0400:CurrencyCodeISO</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{3}")]
        public string CurrencyCode { get; set; }
    
        /// <summary>Internally referenced id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The total amount not including taxes and\/or fees</summary>
        [Newtonsoft.Json.JsonProperty("Base", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Base { get; set; }
    
        /// <summary>The total of the taxes included in the total price</summary>
        [Newtonsoft.Json.JsonProperty("TotalTaxes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalTaxes { get; set; }
    
        /// <summary>The total of the fees included in the total price</summary>
        [Newtonsoft.Json.JsonProperty("TotalFees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalFees { get; set; }
    
        /// <summary>The total price of the product in the currency indicated</summary>
        [Newtonsoft.Json.JsonProperty("TotalPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPrice { get; set; }
    
        /// <summary>Assigned Type: c-0400:VendorCurrencyAmount</summary>
        [Newtonsoft.Json.JsonProperty("VendorCurrencyTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VendorCurrencyAmount VendorCurrencyTotal { get; set; }
    
        /// <summary>If exchangeInd is true then the price is as a result of an exchange</summary>
        [Newtonsoft.Json.JsonProperty("exchangeInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExchangeInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Price FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Price>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class PriceDetail : Price
    {
        [Newtonsoft.Json.JsonProperty("PriceBreakdown", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<PriceBreakdown> PriceBreakdown { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PriceDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PriceDetail>(data);
        }
    
    }
    
    /// <summary>Use only when the vendor currency is different than the requested currency.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class VendorCurrencyAmount 
    {
        /// <summary>Vendor Currency Amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }
    
        /// <summary>Assigned Type: c-0400:CurrencyCodeISO</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{3}")]
        public string CurrencyCode { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static VendorCurrencyAmount FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VendorCurrencyAmount>(data);
        }
    
    }
    
    /// <summary>Clarification of how the airport or city code is used</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum CityOrAirportEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Airport Only")]
        Airport_Only = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"City or Airport")]
        City_or_Airport = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"City Only")]
        City_Only = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Use Default")]
        Use_Default = 3,
    
    }
    
    /// <summary>The system requesting or returning the currency code specified in the attribute</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum CurrencySourceEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Supplier")]
        Supplier = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Charged")]
        Charged = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Requested")]
        Requested = 2,
    
    }
    
    /// <summary>The names of the days of the week.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum DayOfWeekEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Sunday")]
        Sunday = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Monday")]
        Monday = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tuesday")]
        Tuesday = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wednesday")]
        Wednesday = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Thursday")]
        Thursday = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Friday")]
        Friday = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Saturday")]
        Saturday = 6,
    
    }
    
    /// <summary>REVIEW: Defines the type of fares to return (Only public fares, Only private fares, Only agency private fares, Only\n                airline private fares or all fares)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum FaresFilterEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PublicFaresOnly")]
        PublicFaresOnly = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PrivateFaresOnly")]
        PrivateFaresOnly = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AgencyPrivateFaresOnly")]
        AgencyPrivateFaresOnly = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AirlinePrivateFaresOnly")]
        AirlinePrivateFaresOnly = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PublicAndPrivateFares")]
        PublicAndPrivateFares = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NetFaresOnly")]
        NetFaresOnly = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AllFares")]
        AllFares = 6,
    
    }
    
    /// <summary>Defines the type of fares to return (Only public fares, Only private fares, Only agency private fares, Only\n airline private fares or all fares)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum FareTypeEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PublicFare")]
        PublicFare = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AgencyPrivateFare")]
        AgencyPrivateFare = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AirlinePrivateFare")]
        AirlinePrivateFare = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NetFare")]
        NetFare = 3,
    
    }
    
    /// <summary>The type of measurement such as width, height, weight</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum MeasurementTypeEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Width")]
        Width = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Height")]
        Height = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Depth")]
        Depth = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Weight")]
        Weight = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OverallDimension")]
        OverallDimension = 4,
    
    }
    
    /// <summary>Describes the set of potential methods that can be taken after an operation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum NextStepMethodEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"GET")]
        GET = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PUT")]
        PUT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"POST")]
        POST = 3,
    
    }
    
    /// <summary>The status of an error or warning</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum ResultStatusEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Not processed")]
        Not_processed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Incomplete")]
        Incomplete = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Complete")]
        Complete = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 3,
    
    }
    
    /// <summary>Describes the format of text such as plain text or html</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum TextFormatEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PlainText")]
        PlainText = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HTML")]
        HTML = 1,
    
    }
    
    /// <summary>The unit of measure in a code format. Refer to OpenTravel Code List Unit of Measure Code (UOM).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum UnitOfMeasureEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Miles")]
        Miles = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kilometers")]
        Kilometers = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Meters")]
        Meters = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Millimeters")]
        Millimeters = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Centimeters")]
        Centimeters = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Yards")]
        Yards = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Feet")]
        Feet = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Inches")]
        Inches = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pixels")]
        Pixels = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Block")]
        Block = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Megabytes")]
        Megabytes = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gigabytes")]
        Gigabytes = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Square feet")]
        Square_feet = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Square meters")]
        Square_meters = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Pounds")]
        Pounds = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kilograms")]
        Kilograms = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Square inch")]
        Square_inch = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Square yard")]
        Square_yard = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Acre")]
        Acre = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Square millimeter")]
        Square_millimeter = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Square centimeter")]
        Square_centimeter = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hectare")]
        Hectare = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ounce")]
        Ounce = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gram")]
        Gram = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gallons")]
        Gallons = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Liters")]
        Liters = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Kilowatts")]
        Kilowatts = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cubic meters")]
        Cubic_meters = 27,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class TermsAndConditionsAir : TermsAndConditions
    {
        /// <summary>Assigned Type: c-0400:AirlineCode</summary>
        [Newtonsoft.Json.JsonProperty("validatingCarrier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z0-9]{2,3})")]
        public string ValidatingCarrier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BaggageAllowance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(99)]
        public System.Collections.Generic.ICollection<BaggageAllowance> BaggageAllowance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FareRuleInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(50)]
        public System.Collections.Generic.ICollection<FareRuleInfo> FareRuleInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Restriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<string> Restriction { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OrganizationIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OrganizationIdentifier> OrganizationIdentifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Custom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Custom { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TermsAndConditionsAir FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TermsAndConditionsAir>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class PriceBreakdownAir : PriceBreakdown
    {
        /// <summary>Assigned Type: c-0400:NumberDoubleDigit</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }
    
        /// <summary>Assigned Type: c-0400:PassengerTypeCode</summary>
        [Newtonsoft.Json.JsonProperty("requestedPassengerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z0-9]{3,5})")]
        public string RequestedPassengerType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PriceBreakdownAir FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PriceBreakdownAir>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ProductAir : Product
    {
        /// <summary>Total duration of all Segments that are part of this ProductAir</summary>
        [Newtonsoft.Json.JsonProperty("totalDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalDuration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FlightSegment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(99)]
        public System.Collections.Generic.ICollection<FlightSegment> FlightSegment { get; set; } = new System.Collections.ObjectModel.Collection<FlightSegment>();
    
        [Newtonsoft.Json.JsonProperty("PassengerFlight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<PassengerFlight> PassengerFlight { get; set; } = new System.Collections.ObjectModel.Collection<PassengerFlight>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Custom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Custom { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProductAir FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductAir>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ReferenceListFlight : ReferenceList
    {
        [Newtonsoft.Json.JsonProperty("Flight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FlightID> Flight { get; set; } = new System.Collections.ObjectModel.Collection<FlightID>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ReferenceListFlight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReferenceListFlight>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CatalogOfferingsRequestAir : CatalogOfferingsRequest
    {
        /// <summary>Assigned Type: c-0400:NonnegativeInteger</summary>
        [Newtonsoft.Json.JsonProperty("maxNumberOfOffersToReturn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? MaxNumberOfOffersToReturn { get; set; }
    
        /// <summary>Assigned Type: c-0400:NonnegativeInteger</summary>
        [Newtonsoft.Json.JsonProperty("offersPerPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? OffersPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contentSourceList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ContentSourceEnum> ContentSourceList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PassengerCriteria", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<PassengerCriteria> PassengerCriteria { get; set; } = new System.Collections.ObjectModel.Collection<PassengerCriteria>();
    
        [Newtonsoft.Json.JsonProperty("SearchCriteriaFlight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(20)]
        public System.Collections.Generic.ICollection<SearchCriteriaFlight> SearchCriteriaFlight { get; set; } = new System.Collections.ObjectModel.Collection<SearchCriteriaFlight>();
    
        /// <summary>Assigned Type: ctar-0400:SearchModifiersAir</summary>
        [Newtonsoft.Json.JsonProperty("SearchModifiersAir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchModifiersAir SearchModifiersAir { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:PricingModifiersAir</summary>
        [Newtonsoft.Json.JsonProperty("PricingModifiersAir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PricingModifiersAir PricingModifiersAir { get; set; }
    
        /// <summary>Assigned Type: c-0400:PseudoCityInfo</summary>
        [Newtonsoft.Json.JsonProperty("PseudoCityInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PseudoCityInfo PseudoCityInfo { get; set; }
    
        /// <summary>If present and true, branded fares are returned</summary>
        [Newtonsoft.Json.JsonProperty("returnBrandedFaresInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReturnBrandedFaresInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CatalogOfferingsRequestAir FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingsRequestAir>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BuildFromProductsRequestAir : BuildFromProductsRequest
    {
        /// <summary>Assigned Type: ctar-0400:PricingModifiersAir</summary>
        [Newtonsoft.Json.JsonProperty("PricingModifiersAir", Required = Newtonsoft.Json.Required.Always)]
        public PricingModifiersAir PricingModifiersAir { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PassengerCriteria", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<PassengerCriteria> PassengerCriteria { get; set; } = new System.Collections.ObjectModel.Collection<PassengerCriteria>();
    
        [Newtonsoft.Json.JsonProperty("ProductCriteriaAir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<ProductCriteriaAir> ProductCriteriaAir { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BuildFromProductsRequestAir FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BuildFromProductsRequestAir>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BuildFromCatalogOfferingsRequestAir : BuildFromCatalogOfferingsRequest
    {
        /// <summary>Assigned Type: ctar-0400:PricingModifiersAir</summary>
        [Newtonsoft.Json.JsonProperty("PricingModifiersAir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PricingModifiersAir PricingModifiersAir { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BuildFromCatalogOfferingsRequestAir FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BuildFromCatalogOfferingsRequestAir>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CatalogOfferingsRequestAirChange : CatalogOfferingsRequest
    {
        /// <summary>Assigned Type: c-0400:NonnegativeInteger</summary>
        [Newtonsoft.Json.JsonProperty("maxNumberOfOffersToReturn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? MaxNumberOfOffersToReturn { get; set; }
    
        /// <summary>Assigned Type: c-0400:NonnegativeInteger</summary>
        [Newtonsoft.Json.JsonProperty("offersPerPage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? OffersPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SearchCriteriaFlightChange", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(20)]
        public System.Collections.Generic.ICollection<SearchCriteriaFlightChange> SearchCriteriaFlightChange { get; set; } = new System.Collections.ObjectModel.Collection<SearchCriteriaFlightChange>();
    
        [Newtonsoft.Json.JsonProperty("PassengerCriteria", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<PassengerCriteria> PassengerCriteria { get; set; } = new System.Collections.ObjectModel.Collection<PassengerCriteria>();
    
        /// <summary>Assigned Type: c-0400:Identifier</summary>
        [Newtonsoft.Json.JsonProperty("TicketNumber", Required = Newtonsoft.Json.Required.Always)]
        public Identifier TicketNumber { get; set; }
    
        /// <summary>If present and true, branded fares are returned</summary>
        [Newtonsoft.Json.JsonProperty("returnBrandedFaresInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReturnBrandedFaresInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CatalogOfferingsRequestAirChange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingsRequestAirChange>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CatalogOfferingsQueryBuildOptionsFromCatalogOfferings 
    {
        /// <summary>Fare rule type to use when creating this offer.</summary>
        [Newtonsoft.Json.JsonProperty("fareRuleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FareRulesEnum? FareRuleType { get; set; }
    
        /// <summary>Assigned Type: ctlg-0400:BuildFromCatalogOfferingsRequest</summary>
        [Newtonsoft.Json.JsonProperty("BuildFromCatalogOfferingsRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildFromCatalogOfferingsRequest BuildFromCatalogOfferingsRequest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FareRuleCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(8)]
        public System.Collections.Generic.ICollection<FareRuleCategoryEnum> FareRuleCategory { get; set; }
    
        /// <summary>Assigned Type: ctlg-0400:PaymentCriteria</summary>
        [Newtonsoft.Json.JsonProperty("PaymentCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentCriteria PaymentCriteria { get; set; }
    
        /// <summary>If present and true , branded fares are returned</summary>
        [Newtonsoft.Json.JsonProperty("returnBrandedFaresInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReturnBrandedFaresInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CatalogOfferingsQueryBuildOptionsFromCatalogOfferings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingsQueryBuildOptionsFromCatalogOfferings>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CatalogOfferingsQueryBuildOptionsFromProducts 
    {
        /// <summary>Fare rule type to use when creating this offer.</summary>
        [Newtonsoft.Json.JsonProperty("fareRuleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FareRulesEnum? FareRuleType { get; set; }
    
        /// <summary>Assigned Type: ctlg-0400:BuildFromProductsRequest</summary>
        [Newtonsoft.Json.JsonProperty("BuildFromProductsRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BuildFromProductsRequest BuildFromProductsRequest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FareRuleCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(8)]
        public System.Collections.Generic.ICollection<FareRuleCategoryEnum> FareRuleCategory { get; set; }
    
        /// <summary>Assigned Type: ctlg-0400:PaymentCriteria</summary>
        [Newtonsoft.Json.JsonProperty("PaymentCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentCriteria PaymentCriteria { get; set; }
    
        /// <summary>If present and true , branded fares are returned</summary>
        [Newtonsoft.Json.JsonProperty("returnBrandedFaresInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReturnBrandedFaresInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CatalogOfferingsQueryBuildOptionsFromProducts FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CatalogOfferingsQueryBuildOptionsFromProducts>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class PassengerFlight 
    {
        /// <summary>Number of passengers of the specified passenger type code</summary>
        [Newtonsoft.Json.JsonProperty("passengerQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PassengerQuantity { get; set; }
    
        /// <summary>Assigned Type: c-0400:PassengerTypeCode</summary>
        [Newtonsoft.Json.JsonProperty("passengerTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z0-9]{3,5})")]
        public string PassengerTypeCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FlightProduct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(99)]
        public System.Collections.Generic.ICollection<FlightProduct> FlightProduct { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PassengerFlight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PassengerFlight>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class FlightProduct 
    {
        /// <summary>Assigned Type: ctar-0400:SegmentSequenceList</summary>
        [Newtonsoft.Json.JsonProperty("segmentSequence", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> SegmentSequence { get; set; } = new System.Collections.ObjectModel.Collection<int>();
    
        /// <summary>Assigned Type: c-0400:ClassOfService</summary>
        [Newtonsoft.Json.JsonProperty("classOfService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z0-9]{1,2})")]
        public string ClassOfService { get; set; }
    
        /// <summary>The cabin</summary>
        [Newtonsoft.Json.JsonProperty("cabin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CabinAirEnum? Cabin { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringTiny</summary>
        [Newtonsoft.Json.JsonProperty("fareBasisCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string FareBasisCode { get; set; }
    
        /// <summary>Type of fare which has been returned</summary>
        [Newtonsoft.Json.JsonProperty("fareType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FareTypeEnum? FareType { get; set; }
    
        /// <summary>Assigned Type: ctbr-0400:Brand</summary>
        [Newtonsoft.Json.JsonProperty("Brand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BrandID Brand { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FlightProduct FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightProduct>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class FlightSegment 
    {
        /// <summary>Local indentifier within a given message for this object.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:SegmentSequence</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Always)]
        public int Sequence { get; set; }
    
        /// <summary>The actual duration (in minutes) between\n\tsegments.</summary>
        [Newtonsoft.Json.JsonProperty("connectionDuration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ConnectionDuration { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:Flight</summary>
        [Newtonsoft.Json.JsonProperty("Flight", Required = Newtonsoft.Json.Required.Always)]
        public FlightID Flight { get; set; }
    
        /// <summary>If present and true, the Segments in this Connection must be sold and cancelled together.</summary>
        [Newtonsoft.Json.JsonProperty("boundFlightsInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BoundFlightsInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FlightSegment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightSegment>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("Flight", typeof(Flight))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class FlightID 
    {
        /// <summary>Internal ID</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Reference to a Flight object eslewhere in the message</summary>
        [Newtonsoft.Json.JsonProperty("FlightRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FlightRef { get; set; }
    
        /// <summary>Assigned Type: c-0400:Identifier</summary>
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifier Identifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FlightID FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightID>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Flight : FlightID
    {
        /// <summary>Assigned Type: c-0400:NonnegativeInteger</summary>
        [Newtonsoft.Json.JsonProperty("distance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Distance { get; set; }
    
        /// <summary>Assigned Type: c-0400:NumberSingleDigit</summary>
        [Newtonsoft.Json.JsonProperty("stops", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Stops { get; set; }
    
        /// <summary>Elapsed flight time in minutes</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        /// <summary>Assigned Type: c-0400:AirlineCode</summary>
        [Newtonsoft.Json.JsonProperty("carrier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z0-9]{2,3})")]
        public string Carrier { get; set; }
    
        /// <summary>Assigned Type: c-0400:FlightNumber</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{1,4}[A-Z]?|OPEN|ARNK")]
        public string Number { get; set; }
    
        /// <summary>Assigned Type: c-0400:AirlineCode</summary>
        [Newtonsoft.Json.JsonProperty("operatingCarrier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z0-9]{2,3})")]
        public string OperatingCarrier { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringShort</summary>
        [Newtonsoft.Json.JsonProperty("operatingCarrierName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string OperatingCarrierName { get; set; }
    
        /// <summary>Assigned Type: c-0400:AirEquipCodeIATA</summary>
        [Newtonsoft.Json.JsonProperty("equipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([A-Z0-9]{3})?")]
        public string Equipment { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:Departure</summary>
        [Newtonsoft.Json.JsonProperty("Departure", Required = Newtonsoft.Json.Required.Always)]
        public Departure Departure { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:Arrival</summary>
        [Newtonsoft.Json.JsonProperty("Arrival", Required = Newtonsoft.Json.Required.Always)]
        public Arrival Arrival { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IntermediateStop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(9)]
        public System.Collections.Generic.ICollection<IntermediateStop> IntermediateStop { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Flight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Flight>(data);
        }
    
    }
    
    /// <summary>Location code</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class FromTo 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z]{3})")]
        public string Value { get; set; }
    
        /// <summary>Airport or City</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CityOrAirportEnum? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FromTo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FromTo>(data);
        }
    
    }
    
    /// <summary>An intermediate stop location and duration</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class IntermediateStop 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z]{3})")]
        public string Value { get; set; }
    
        /// <summary>Duration stopped at this location</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }
    
        /// <summary>Assigned Type: c-0400:AirEquipCodeIATA</summary>
        [Newtonsoft.Json.JsonProperty("equipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([A-Z0-9]{3})?")]
        public string Equipment { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static IntermediateStop FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<IntermediateStop>(data);
        }
    
    }
    
    /// <summary>Specifies the cabin type (e.g. first, business, economy).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum CabinAirEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PremiumFirst")]
        PremiumFirst = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"First")]
        First = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PremiumEconomy")]
        PremiumEconomy = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Economy")]
        Economy = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum CabinPreferenceTypeEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Preferred")]
        Preferred = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Permitted")]
        Permitted = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PreferredWithUpgrade")]
        PreferredWithUpgrade = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum CarrierPreferenceTypeEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Preferred")]
        Preferred = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Permitted")]
        Permitted = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Prohibited")]
        Prohibited = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum ConnectionTypeEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NonStopDirect")]
        NonStopDirect = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"StopDirect")]
        StopDirect = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SingleConnection")]
        SingleConnection = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DoubleConnection")]
        DoubleConnection = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TripleConnection")]
        TripleConnection = 4,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("BaggageAllowanceDetail", typeof(BaggageAllowanceDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BaggageAllowance 
    {
        /// <summary>Assigned Type: c-0400:PassengerTypeCodeList</summary>
        [Newtonsoft.Json.JsonProperty("passengerTypeCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PassengerTypeCodes { get; set; }
    
        /// <summary>The type of baggage that is being limmited.</summary>
        [Newtonsoft.Json.JsonProperty("baggageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BaggageTypeEnum? BaggageType { get; set; }
    
        /// <summary>A product is any product, service or package of products and services  that can be priced and purchased by a specific supplier.</summary>
        [Newtonsoft.Json.JsonProperty("ProductRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProductRef { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BaggageItem", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<BaggageItem> BaggageItem { get; set; } = new System.Collections.ObjectModel.Collection<BaggageItem>();
    
        /// <summary>Segment sequence is only to be used when the baggage allowance differs between segments within a product. If so, then the ProducRef must be specified.</summary>
        [Newtonsoft.Json.JsonProperty("SegmentSequenceList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> SegmentSequenceList { get; set; }
    
        /// <summary>Text returned from the Airlines with general baggage information.</summary>
        [Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Text { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BaggageAllowance FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaggageAllowance>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BaggageAllowanceDetail : BaggageAllowance
    {
        /// <summary>Url for the airline's baggage information web site</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BaggageAllowanceDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaggageAllowanceDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum BaggageTypeEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CarryOn")]
        CarryOn = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FirstCheckedBag")]
        FirstCheckedBag = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SecondCheckedBag")]
        SecondCheckedBag = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AdditionalBags")]
        AdditionalBags = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BaggageEmbargo")]
        BaggageEmbargo = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum ExcludeGroundTypeEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Train")]
        Train = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 1,
    
    }
    
    /// <summary>Layover is Domestic</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum MaxLayoverTypeEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Domestic")]
        Domestic = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"International")]
        International = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DomesticToFromInternational")]
        DomesticToFromInternational = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum TravelerGeographicTypeEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Country")]
        Country = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"StateProvence")]
        StateProvence = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"City")]
        City = 2,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("DepartureArrivalDetail", typeof(DepartureArrivalDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class DepartureArrival 
    {
        /// <summary>Assigned Type: c-0400:LocationCodeIATA</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z]{3})")]
        public string Location { get; set; }
    
        /// <summary>Local date of for arrival or departure</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>Local time Date of for arrival or departure</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Time { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DepartureArrival FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DepartureArrival>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("ArrivalDetail", typeof(ArrivalDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Arrival 
    {
        /// <summary>Assigned Type: c-0400:LocationCodeIATA</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z]{3})")]
        public string Location { get; set; }
    
        /// <summary>Local date of for arrival or departure</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>Local time Date of for arrival or departure</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Time { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Arrival FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Arrival>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("DepartureDetail", typeof(DepartureDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Departure 
    {
        /// <summary>Assigned Type: c-0400:LocationCodeIATA</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z]{3})")]
        public string Location { get; set; }
    
        /// <summary>Local date of for arrival or departure</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>Local time Date of for arrival or departure</summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Time { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Departure FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Departure>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class DepartureArrivalDetail : DepartureArrival
    {
        /// <summary>Assigned Type: c-0400:StringAlphaNumeric</summary>
        [Newtonsoft.Json.JsonProperty("terminal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4096)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9a-zA-Z]+)?")]
        public string Terminal { get; set; }
    
        /// <summary>Assigned Type: c-0400:CountryCodeISO</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{2}")]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DepartureArrivalDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DepartureArrivalDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ArrivalDetail : Arrival
    {
        /// <summary>Assigned Type: c-0400:StringAlphaNumeric</summary>
        [Newtonsoft.Json.JsonProperty("terminal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4096)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9a-zA-Z]+)?")]
        public string Terminal { get; set; }
    
        /// <summary>Assigned Type: c-0400:CountryCodeISO</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{2}")]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ArrivalDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArrivalDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class DepartureDetail : Departure
    {
        /// <summary>Assigned Type: c-0400:StringAlphaNumeric</summary>
        [Newtonsoft.Json.JsonProperty("terminal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4096)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9a-zA-Z]+)?")]
        public string Terminal { get; set; }
    
        /// <summary>Assigned Type: c-0400:CountryCodeISO</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{2}")]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static DepartureDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DepartureDetail>(data);
        }
    
    }
    
    /// <summary>Passenger Type Code</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class PassengerCriteria 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z0-9]{3,5})")]
        public string Value { get; set; }
    
        /// <summary>Assigned Type: c-0400:NonnegativeInteger</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Number { get; set; }
    
        /// <summary>Assigned Type: c-0400:NumberDoubleDigit</summary>
        [Newtonsoft.Json.JsonProperty("age", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Age { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:TravelerGeographicLocation</summary>
        [Newtonsoft.Json.JsonProperty("travelerGeographicLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string TravelerGeographicLocation { get; set; }
    
        /// <summary>Assigned Type: c-0400:CustomerLoyalty</summary>
        [Newtonsoft.Json.JsonProperty("customerLoyalty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 1)]
        public string CustomerLoyalty { get; set; }
    
        /// <summary>The geographic location type.  For example (Country)</summary>
        [Newtonsoft.Json.JsonProperty("travelerGeographicLocationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelerGeographicTypeEnum? TravelerGeographicLocationType { get; set; }
    
        /// <summary>Customer Loyality Id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Assigned Type: c-0400:Priority</summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 300)]
        public int? Priority { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringShort</summary>
        [Newtonsoft.Json.JsonProperty("programId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string ProgramId { get; set; }
    
        /// <summary>Assigned Type: c-0400:LoyaltyProgramName</summary>
        [Newtonsoft.Json.JsonProperty("programName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string ProgramName { get; set; }
    
        /// <summary>Assigned Type: c-0400:LoyaltySupplierType</summary>
        [Newtonsoft.Json.JsonProperty("supplierType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string SupplierType { get; set; }
    
        /// <summary>Assigned Type: c-0400:LoyaltySupplier</summary>
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Supplier { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringTiny</summary>
        [Newtonsoft.Json.JsonProperty("tier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Tier { get; set; }
    
        /// <summary>Assigned Type: c-0400:TinyStrings</summary>
        [Newtonsoft.Json.JsonProperty("shareWithSupplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ShareWithSupplier { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringShort</summary>
        [Newtonsoft.Json.JsonProperty("cardHolderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string CardHolderName { get; set; }
    
        /// <summary>If true then the Offering\/Offer will only be returned for the specific passengerTypeCode</summary>
        [Newtonsoft.Json.JsonProperty("specifiedPassengerTypeCodeOnlyInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SpecifiedPassengerTypeCodeOnlyInd { get; set; }
    
        /// <summary>Customer loyalty number has been validated by the supplier</summary>
        [Newtonsoft.Json.JsonProperty("validatedInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidatedInd { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PassengerCriteria FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PassengerCriteria>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("PricingModifiersAirDetail", typeof(PricingModifiersAirDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class PricingModifiersAir 
    {
        /// <summary>Assigned Type: c-0400:CurrencyCodeISO</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-zA-Z]{3}")]
        public string CurrencyCode { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:FareSelection</summary>
        [Newtonsoft.Json.JsonProperty("FareSelection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FareSelection FareSelection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OrganizationIdentifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OrganizationIdentifier> OrganizationIdentifier { get; set; } = new System.Collections.ObjectModel.Collection<OrganizationIdentifier>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PricingModifiersAir FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PricingModifiersAir>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class PricingModifiersAirDetail : PricingModifiersAir
    {
        /// <summary>Assigned Type: ctbr-0400:Brand</summary>
        [Newtonsoft.Json.JsonProperty("Brand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BrandID Brand { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PricingModifiersAirDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PricingModifiersAirDetail>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class SearchCriteriaFlight 
    {
        /// <summary>Departure date</summary>
        [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DepartureDate { get; set; }
    
        /// <summary>Detarture time</summary>
        [Newtonsoft.Json.JsonProperty("departureTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DepartureTime { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:SegmentSequence</summary>
        [Newtonsoft.Json.JsonProperty("legSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LegSequence { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:FromTo</summary>
        [Newtonsoft.Json.JsonProperty("From", Required = Newtonsoft.Json.Required.Always)]
        public FromTo From { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:FromTo</summary>
        [Newtonsoft.Json.JsonProperty("To", Required = Newtonsoft.Json.Required.Always)]
        public FromTo To { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SearchCriteriaFlight FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchCriteriaFlight>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class SearchModifiersAir 
    {
        /// <summary>A type of ground transportation that is to be excluded for the response</summary>
        [Newtonsoft.Json.JsonProperty("excludeGround", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExcludeGroundTypeEnum? ExcludeGround { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:FlightType</summary>
        [Newtonsoft.Json.JsonProperty("FlightType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlightType FlightType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CarrierPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(20)]
        public System.Collections.Generic.ICollection<CarrierPreference> CarrierPreference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CabinPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(20)]
        public System.Collections.Generic.ICollection<CabinPreference> CabinPreference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaxLayover", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(3)]
        public System.Collections.Generic.ICollection<MaxLayover> MaxLayover { get; set; }
    
        /// <summary>Do not include connections over this duration in the response</summary>
        [Newtonsoft.Json.JsonProperty("MaxConnectionDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaxConnectionDuration { get; set; }
    
        /// <summary>Do not include overnight connections over this duration in the response</summary>
        [Newtonsoft.Json.JsonProperty("MaxOvernightDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaxOvernightDuration { get; set; }
    
        /// <summary>If present and true, connections that require a change of airports are not returned</summary>
        [Newtonsoft.Json.JsonProperty("prohibitChangeOfAirportInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProhibitChangeOfAirportInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SearchModifiersAir FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchModifiersAir>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CabinPreference 
    {
        /// <summary>Preference type.  i.e. Permitted</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CabinPreferenceTypeEnum? Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cabins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<CabinAirEnum> Cabins { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:SegmentSequenceList</summary>
        [Newtonsoft.Json.JsonProperty("legSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> LegSequence { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CabinPreference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CabinPreference>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class CarrierPreference 
    {
        /// <summary>Preference type. i.e Permitted</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CarrierPreferenceTypeEnum Type { get; set; }
    
        /// <summary>Assigned Type: c-0400:AirlineCodes</summary>
        [Newtonsoft.Json.JsonProperty("carriers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Carriers { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Assigned Type: ctar-0400:SegmentSequenceList</summary>
        [Newtonsoft.Json.JsonProperty("legSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> LegSequence { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CarrierPreference FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CarrierPreference>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("FareSelectionDetail", typeof(FareSelectionDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class FareSelection 
    {
        /// <summary>Indicates whether only public fares\n                        should be returned or specific type of private fares</summary>
        [Newtonsoft.Json.JsonProperty("fareType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FaresFilterEnum? FareType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FareSelection FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FareSelection>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class FareSelectionDetail : FareSelection
    {
        /// <summary>Assigned Type: c-0400:AirlineCode</summary>
        [Newtonsoft.Json.JsonProperty("validatingCarrier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z0-9]{2,3})")]
        public string ValidatingCarrier { get; set; }
    
        /// <summary>Assigned Type: c-0400:AirlineCode</summary>
        [Newtonsoft.Json.JsonProperty("overrideCarrier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z0-9]{2,3})")]
        public string OverrideCarrier { get; set; }
    
        /// <summary>If present and true, fares with minimum stays will not be returned</summary>
        [Newtonsoft.Json.JsonProperty("prohibitMinStayFaresInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProhibitMinStayFaresInd { get; set; }
    
        /// <summary>If present and true, fares with maximum stays will not be returned</summary>
        [Newtonsoft.Json.JsonProperty("prohibitMaxStayFaresInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProhibitMaxStayFaresInd { get; set; }
    
        /// <summary>If present and true, only refundable fares will be returned</summary>
        [Newtonsoft.Json.JsonProperty("refundableOnlyInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RefundableOnlyInd { get; set; }
    
        /// <summary>If present and true, fares with advance purchase requirements will not be returned</summary>
        [Newtonsoft.Json.JsonProperty("prohibitAdvancePurchaseFaresInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProhibitAdvancePurchaseFaresInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FareSelectionDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FareSelectionDetail>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class FlightType 
    {
        /// <summary>Describes if the flight type is nonstop, direct, single connection, etc.</summary>
        [Newtonsoft.Json.JsonProperty("connectionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConnectionTypeEnum? ConnectionType { get; set; }
    
        /// <summary>If present and true, exclude interline connections</summary>
        [Newtonsoft.Json.JsonProperty("excludeInterlineConnectionsInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeInterlineConnectionsInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FlightType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FlightType>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class MaxLayover 
    {
        /// <summary>Type of Layover</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MaxLayoverTypeEnum Type { get; set; }
    
        /// <summary>Maximum duration for this layover type</summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static MaxLayover FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MaxLayover>(data);
        }
    
    }
    
    /// <summary>A counrty, provence\/state or city code</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class TravelerGeographicLocation 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Value { get; set; }
    
        /// <summary>The geographic location type.  For example (Country)</summary>
        [Newtonsoft.Json.JsonProperty("travelerGeographicLocationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TravelerGeographicTypeEnum? TravelerGeographicLocationType { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TravelerGeographicLocation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TravelerGeographicLocation>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class SpecificFlightCriteria 
    {
        /// <summary>Assigned Type: c-0400:AirlineCode</summary>
        [Newtonsoft.Json.JsonProperty("carrier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z0-9]{2,3})")]
        public string Carrier { get; set; }
    
        /// <summary>Assigned Type: c-0400:FlightNumber</summary>
        [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{1,4}[A-Z]?|OPEN|ARNK")]
        public string FlightNumber { get; set; }
    
        /// <summary>date of departure</summary>
        [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DepartureDate { get; set; }
    
        /// <summary>Assigned Type: ota2:LocalTime</summary>
        [Newtonsoft.Json.JsonProperty("departureTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?")]
        public string DepartureTime { get; set; }
    
        /// <summary>Assigned Type: ota2:LocalDate</summary>
        [Newtonsoft.Json.JsonProperty("arrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(\d{4}-\d{2}-\d{2})")]
        public string ArrivalDate { get; set; }
    
        /// <summary>Assigned Type: ota2:LocalTime</summary>
        [Newtonsoft.Json.JsonProperty("arrivalTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?")]
        public string ArrivalTime { get; set; }
    
        /// <summary>Assigned Type: c-0400:AirportCodeIATA</summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z]{3})")]
        public string From { get; set; }
    
        /// <summary>Assigned Type: c-0400:AirportCodeIATA</summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z]{3})")]
        public string To { get; set; }
    
        /// <summary>Cabin</summary>
        [Newtonsoft.Json.JsonProperty("cabin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CabinAirEnum? Cabin { get; set; }
    
        /// <summary>Assigned Type: c-0400:ClassOfService</summary>
        [Newtonsoft.Json.JsonProperty("classOfService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z0-9]{1,2})")]
        public string ClassOfService { get; set; }
    
        /// <summary>Assigned Type: c-0400:NumberSingleDigit</summary>
        [Newtonsoft.Json.JsonProperty("brandTier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BrandTier { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:SegmentSequence</summary>
        [Newtonsoft.Json.JsonProperty("segmentSequence", Required = Newtonsoft.Json.Required.Always)]
        public int SegmentSequence { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SpecificFlightCriteria FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecificFlightCriteria>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ProductCriteriaAir 
    {
        /// <summary>Assigned Type: c-0400:NonnegativeInteger</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Sequence { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SpecificFlightCriteria", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(20)]
        public System.Collections.Generic.ICollection<SpecificFlightCriteria> SpecificFlightCriteria { get; set; } = new System.Collections.ObjectModel.Collection<SpecificFlightCriteria>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ProductCriteriaAir FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductCriteriaAir>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BaggageItem 
    {
        /// <summary>Assigned Type: c-0400:NumberSingleDigit</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Measurement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(6)]
        public System.Collections.Generic.ICollection<Measurement> Measurement { get; set; }
    
        /// <summary>Assigned Type: c-0400:CurrencyAmount</summary>
        [Newtonsoft.Json.JsonProperty("BaggageFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmount BaggageFee { get; set; }
    
        /// <summary>Text returned from the shop response</summary>
        [Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Text { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BaggageItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BaggageItem>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("SearchCriteriaFlightChangeByLocation", typeof(SearchCriteriaFlightChangeByLocation))]
    [JsonInheritanceAttribute("SearchCriteriaFlightChangeSpecific", typeof(SearchCriteriaFlightChangeSpecific))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class SearchCriteriaFlightChange 
    {
        /// <summary>Assigned Type: c-0400:NonnegativeInteger</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Sequence { get; set; }
    
        /// <summary>Assigned Type: ota2:LocalDate</summary>
        [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(\d{4}-\d{2}-\d{2})")]
        public string DepartureDate { get; set; }
    
        /// <summary>Assigned Type: ota2:LocalTime</summary>
        [Newtonsoft.Json.JsonProperty("departureTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?")]
        public string DepartureTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Shared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Shared { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SearchCriteriaFlightChange FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchCriteriaFlightChange>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class SearchCriteriaFlightChangeByLocation : SearchCriteriaFlightChange
    {
        /// <summary>Assigned Type: ctar-0400:FromTo</summary>
        [Newtonsoft.Json.JsonProperty("From", Required = Newtonsoft.Json.Required.Always)]
        public FromTo From { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:FromTo</summary>
        [Newtonsoft.Json.JsonProperty("To", Required = Newtonsoft.Json.Required.Always)]
        public FromTo To { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SearchCriteriaFlightChangeByLocation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchCriteriaFlightChangeByLocation>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class SearchCriteriaFlightChangeSpecific : SearchCriteriaFlightChange
    {
        /// <summary>Assigned Type: c-0400:AirlineCode</summary>
        [Newtonsoft.Json.JsonProperty("carrier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z0-9]{2,3})")]
        public string Carrier { get; set; }
    
        /// <summary>Assigned Type: c-0400:FlightNumber</summary>
        [Newtonsoft.Json.JsonProperty("flightNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{1,4}[A-Z]?|OPEN|ARNK")]
        public string FlightNumber { get; set; }
    
        /// <summary>Assigned Type: ota2:LocalDate</summary>
        [Newtonsoft.Json.JsonProperty("arrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(\d{4}-\d{2}-\d{2})")]
        public string ArrivalDate { get; set; }
    
        /// <summary>Assigned Type: ota2:LocalTime</summary>
        [Newtonsoft.Json.JsonProperty("arrivalTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?")]
        public string ArrivalTime { get; set; }
    
        /// <summary>Assigned Type: c-0400:AirportCodeIATA</summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z]{3})")]
        public string From { get; set; }
    
        /// <summary>Assigned Type: c-0400:AirportCodeIATA</summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z]{3})")]
        public string To { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static SearchCriteriaFlightChangeSpecific FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchCriteriaFlightChangeSpecific>(data);
        }
    
    }
    
    /// <summary>Text describing this fare rule</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class FareRuleText 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4096)]
        public string Value { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringTiny</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FareRuleText FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FareRuleText>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum FareRuleCategoryEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AdvanceReservations/Ticketing")]
        AdvanceReservations_Ticketing = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MinimumStay")]
        MinimumStay = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MaximumStay")]
        MaximumStay = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stopovers")]
        Stopovers = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Penalties")]
        Penalties = 4,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Change 
    {
        [Newtonsoft.Json.JsonProperty("penaltyTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<PenaltyTypeEnum> PenaltyTypes { get; set; }
    
        /// <summary>Assigned Type: c-0400:CurrencyAmount</summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmount Amount { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:PenaltyAppliesToEnum</summary>
        [Newtonsoft.Json.JsonProperty("PenaltyAppliesTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PenaltyAppliesToEnum? PenaltyAppliesTo { get; set; }
    
        /// <summary>Changes are not permitted</summary>
        [Newtonsoft.Json.JsonProperty("notPermittedInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotPermittedInd { get; set; }
    
        /// <summary>structured fare rules could not be determined for this category</summary>
        [Newtonsoft.Json.JsonProperty("indeterminateInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IndeterminateInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Change FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Change>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Refund 
    {
        [Newtonsoft.Json.JsonProperty("penaltyTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<PenaltyTypeEnum> PenaltyTypes { get; set; }
    
        /// <summary>Assigned Type: c-0400:CurrencyAmount</summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyAmount Amount { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:PenaltyAppliesToEnum</summary>
        [Newtonsoft.Json.JsonProperty("PenaltyAppliesTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PenaltyAppliesToEnum? PenaltyAppliesTo { get; set; }
    
        /// <summary>Changes are not permitted</summary>
        [Newtonsoft.Json.JsonProperty("notPermittedInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotPermittedInd { get; set; }
    
        /// <summary>structured fare rules could not be determined for this category</summary>
        [Newtonsoft.Json.JsonProperty("indeterminateInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IndeterminateInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Refund FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Refund>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum PenaltyTypeEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BeforeDeparture")]
        BeforeDeparture = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AfterDeparture")]
        AfterDeparture = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Anytime")]
        Anytime = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NoShow")]
        NoShow = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExchangeRequired")]
        ExchangeRequired = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExchangeNotRequired")]
        ExchangeNotRequired = 7,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Penalties 
    {
        /// <summary>Assigned Type: c-0400:PassengerTypeCodeList</summary>
        [Newtonsoft.Json.JsonProperty("passengerTypeCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PassengerTypeCodes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Change", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<Change> Change { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Refund", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<Refund> Refund { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Waiver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<WaiverEnum> Waiver { get; set; }
    
        /// <summary>Penalties apply for involuntary changes initiated by the airline</summary>
        [Newtonsoft.Json.JsonProperty("involuntaryInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InvoluntaryInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Penalties FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Penalties>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("FareRuleInfoText", typeof(FareRuleInfoText))]
    [JsonInheritanceAttribute("FareRuleInfoStructured", typeof(FareRuleInfoStructured))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class FareRuleInfo 
    {
        /// <summary>The flight segment IDs to which this fare rule applies</summary>
        [Newtonsoft.Json.JsonProperty("flightRefs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FlightRefs { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringTiny</summary>
        [Newtonsoft.Json.JsonProperty("ruleNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string RuleNumber { get; set; }
    
        /// <summary>Assigned Type: c-0400:StringTiny</summary>
        [Newtonsoft.Json.JsonProperty("tariffNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string TariffNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Shared", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Shared { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FareRuleInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FareRuleInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class FareRuleInfoText : FareRuleInfo
    {
        [Newtonsoft.Json.JsonProperty("FareRuleText", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(100)]
        public System.Collections.Generic.ICollection<FareRuleText> FareRuleText { get; set; } = new System.Collections.ObjectModel.Collection<FareRuleText>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FareRuleInfoText FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FareRuleInfoText>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class FareRuleInfoStructured : FareRuleInfo
    {
        [Newtonsoft.Json.JsonProperty("Penalties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<Penalties> Penalties { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MinimumStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<MinimumStay> MinimumStay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MaximumStay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<MaximumStay> MaximumStay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FareRuleInfoStructured FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FareRuleInfoStructured>(data);
        }
    
    }
    
    /// <summary>Minimum Stay</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class MinimumStay 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        /// <summary>Assigned Type: c-0400:PassengerTypeCodeList</summary>
        [Newtonsoft.Json.JsonProperty("passengerTypeCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PassengerTypeCodes { get; set; }
    
        /// <summary>This day of the week must be included as part of the minimum stay</summary>
        [Newtonsoft.Json.JsonProperty("mustIncludeDayOfWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DayOfWeekEnum? MustIncludeDayOfWeek { get; set; }
    
        /// <summary>The rule applies to trips commencing on a specific day of a week</summary>
        [Newtonsoft.Json.JsonProperty("originDayOfWeek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DayOfWeekEnum? OriginDayOfWeek { get; set; }
    
        /// <summary>Assigned Type: ota2:LocalTime</summary>
        [Newtonsoft.Json.JsonProperty("returnTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?")]
        public string ReturnTime { get; set; }
    
        /// <summary>Structured fare rules could not be determined for this category</summary>
        [Newtonsoft.Json.JsonProperty("indeterminateInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IndeterminateInd { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static MinimumStay FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MinimumStay>(data);
        }
    
    }
    
    /// <summary>Type of Waiver like Death of Pessanger,illness Of Passenger, Death of Immediate Family Member  etc</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum WaiverEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DeathOfPassenger")]
        DeathOfPassenger = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IllnessOfPassenger")]
        IllnessOfPassenger = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeathOfImmediateFamilyMember")]
        DeathOfImmediateFamilyMember = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IllnessOfImmediateFamilyMember")]
        IllnessOfImmediateFamilyMember = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TicketUpgrade")]
        TicketUpgrade = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ScheduleChange")]
        ScheduleChange = 5,
    
    }
    
    /// <summary>Penalty applicable list</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum PenaltyAppliesToEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OneWay")]
        OneWay = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RoundTrip")]
        RoundTrip = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PerTicket")]
        PerTicket = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PerCoupon")]
        PerCoupon = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PerDirectionOfTravel")]
        PerDirectionOfTravel = 4,
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class MaximumStay 
    {
        /// <summary>Assigned Type: c-0400:PassengerTypeCodeList</summary>
        [Newtonsoft.Json.JsonProperty("passengerTypeCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PassengerTypeCodes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximumStayDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MaximumStayDuration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maximumStayDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? MaximumStayDate { get; set; }
    
        /// <summary>Assigned Type: ota2:LocalTime</summary>
        [Newtonsoft.Json.JsonProperty("returnTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)((:?)[0-5]\d)?([\.,]\d+(?!:))?")]
        public string ReturnTime { get; set; }
    
        /// <summary>Assigned Type: ctar-0400:RuleAppliesEnum</summary>
        [Newtonsoft.Json.JsonProperty("RuleApplies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuleAppliesEnum? RuleApplies { get; set; }
    
        /// <summary>Structured fare rules could not be determined for this category</summary>
        [Newtonsoft.Json.JsonProperty("indeterminateInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IndeterminateInd { get; set; }
    
        /// <summary>Indicates if travel must commence by this date\/duration</summary>
        [Newtonsoft.Json.JsonProperty("mustCommenceByInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MustCommenceByInd { get; set; }
    
        /// <summary>Indicates if travel must complete by this date\/duration</summary>
        [Newtonsoft.Json.JsonProperty("mustCompleteByInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MustCompleteByInd { get; set; }
    
        /// <summary>If true the Maximum stay is calculated from the date of ticket issuance</summary>
        [Newtonsoft.Json.JsonProperty("fromDateOfIssueInd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FromDateOfIssueInd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static MaximumStay FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MaximumStay>(data);
        }
    
    }
    
    /// <summary>Used when multiple maximumStayDuration and maximumStayDate are given and you must indicate which one applies. (max stay is 1 year or 15thDecember, the later of the two)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum RuleAppliesEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"EarliestApplies")]
        EarliestApplies = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LaterApplies")]
        LaterApplies = 1,
    
    }
    
    /// <summary>The organization identifier</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class OrganizationIdentifier 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string Value { get; set; }
    
        /// <summary>Assigned Type: c-0400:AirlineCode</summary>
        [Newtonsoft.Json.JsonProperty("supplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([a-zA-Z0-9]{2,3})")]
        public string Supplier { get; set; }
    
        /// <summary>The type od code.  Organization or account</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrganizationCodeTypeEnum? Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static OrganizationIdentifier FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrganizationIdentifier>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum OrganizationCodeTypeEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Account")]
        Account = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Organization")]
        Organization = 1,
    
    }
    
    /// <summary>The source of the content to be returned in CatalogOfferings</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum ContentSourceEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"GDS")]
        GDS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NDC")]
        NDC = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ReferenceListBrand : ReferenceList
    {
        [Newtonsoft.Json.JsonProperty("Brand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BrandID> Brand { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ReferenceListBrand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReferenceListBrand>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("Brand", typeof(Brand))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BrandID 
    {
        /// <summary>Local indentifier within a given message for this object.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Used to reference another instance of this object in the same message</summary>
        [Newtonsoft.Json.JsonProperty("BrandRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandRef { get; set; }
    
        /// <summary>Assigned Type: c-0400:Identifier</summary>
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifier Identifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BrandID FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BrandID>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class Brand : BrandID
    {
        /// <summary>Assigned Type: ctbr-0400:BrandName</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Name { get; set; }
    
        /// <summary>Assigned Type: c-0400:NumberSingleDigit</summary>
        [Newtonsoft.Json.JsonProperty("tier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Tier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BrandAttribute", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(7)]
        public System.Collections.Generic.ICollection<BrandAttribute> BrandAttribute { get; set; } = new System.Collections.ObjectModel.Collection<BrandAttribute>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Brand FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Brand>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BrandAttribute 
    {
        /// <summary>The Travelport classification used for a category of ancillaries such as Seat, Bags, etc. This is an initial list that will be added to.</summary>
        [Newtonsoft.Json.JsonProperty("classification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrandClassificationEnum Classification { get; set; }
    
        /// <summary>whether this attribute is included, chargeable, etc.</summary>
        [Newtonsoft.Json.JsonProperty("inclusion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrandInclusionEnum Inclusion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BrandAttribute FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BrandAttribute>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("BrandFullInfo", typeof(BrandFullInfo))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BrandFullInfoID 
    {
        /// <summary>Local indentifier within a given message for this object.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Used to reference another instance of this object in the same message</summary>
        [Newtonsoft.Json.JsonProperty("BrandFullInfoRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandFullInfoRef { get; set; }
    
        /// <summary>Assigned Type: c-0400:Identifier</summary>
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifier Identifier { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BrandFullInfoID FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BrandFullInfoID>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BrandFullInfo : BrandFullInfoID
    {
        /// <summary>Assigned Type: ctbr-0400:BrandInfo</summary>
        [Newtonsoft.Json.JsonProperty("BrandInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BrandInfo BrandInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BrandFullInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BrandFullInfo>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BrandFullInfoQueryMerchandising 
    {
        /// <summary>Merchandising ID</summary>
        [Newtonsoft.Json.JsonProperty("MerchandisingID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string MerchandisingID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BrandFullInfoQueryMerchandising FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BrandFullInfoQueryMerchandising>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class BrandInfo 
    {
        /// <summary>Assigned Type: ctbr-0400:BrandName</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Name { get; set; }
    
        /// <summary>The indicator as to hoe the brand and the product are associated.</summary>
        [Newtonsoft.Json.JsonProperty("inclusion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrandInclusionEnum Inclusion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BrandText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<BrandText> BrandText { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AttributeInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(25)]
        public System.Collections.Generic.ICollection<AttributeInfo> AttributeInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BrandInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BrandInfo>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class AttributeInfo 
    {
        /// <summary>Assigned Type: ctbr-0400:BrandName</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Name { get; set; }
    
        /// <summary>The indicator as to hoe the brand and the product are associated.</summary>
        [Newtonsoft.Json.JsonProperty("inclusion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrandInclusionEnum Inclusion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BrandText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<BrandText> BrandText { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AttributeInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(25)]
        public System.Collections.Generic.ICollection<AttributeInfo> AttributeInfo1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AttributeInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttributeInfo>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("AncillaryBrandTextDetail", typeof(AncillaryBrandTextDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class AncillaryBrandText 
    {
        /// <summary>Internally referenced id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The audience targeted for the brand information</summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrandTargetEnum? Target { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TextFormatted", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(50)]
        public System.Collections.Generic.ICollection<TextFormatted> TextFormatted { get; set; } = new System.Collections.ObjectModel.Collection<TextFormatted>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AncillaryBrandText FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AncillaryBrandText>(data);
        }
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "@type")]
    [JsonInheritanceAttribute("FareBrandTextDetail", typeof(FareBrandTextDetail))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class FareBrandText 
    {
        /// <summary>Internally referenced id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>The audience targeted for the brand information</summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrandTargetEnum? Target { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TextFormatted", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(50)]
        public System.Collections.Generic.ICollection<TextFormatted> TextFormatted { get; set; } = new System.Collections.ObjectModel.Collection<TextFormatted>();
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Summary { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FareBrandText FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FareBrandText>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class AncillaryBrandTextDetail : AncillaryBrandText
    {
        /// <summary>The order of the text block, if there are more than one block.</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sequence { get; set; }
    
        /// <summary>Assigned Type: c-0400:Description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string Description { get; set; }
    
        /// <summary>Assigned Type: c-0400:Image</summary>
        [Newtonsoft.Json.JsonProperty("Image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Image { get; set; }
    
        /// <summary>A URL for this block</summary>
        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string URL { get; set; }
    
        /// <summary>Assigned Type: c-0400:DateCreateModify</summary>
        [Newtonsoft.Json.JsonProperty("DateCreateModify", Required = Newtonsoft.Json.Required.Always)]
        public DateCreateModify DateCreateModify { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static AncillaryBrandTextDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AncillaryBrandTextDetail>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class FareBrandTextDetail : FareBrandText
    {
        /// <summary>The order of the text block, if there are more than one block.</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sequence { get; set; }
    
        /// <summary>Assigned Type: c-0400:Description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string Description { get; set; }
    
        /// <summary>Assigned Type: c-0400:Image</summary>
        [Newtonsoft.Json.JsonProperty("Image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Image { get; set; }
    
        /// <summary>A URL for this block</summary>
        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string URL { get; set; }
    
        /// <summary>Assigned Type: c-0400:DateCreateModify</summary>
        [Newtonsoft.Json.JsonProperty("DateCreateModify", Required = Newtonsoft.Json.Required.Always)]
        public DateCreateModify DateCreateModify { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint_Detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint_Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FareBrandTextDetail FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FareBrandTextDetail>(data);
        }
    
    }
    
    /// <summary>The indicator as to hoe the brand and the product are associated.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum BrandInclusionEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Included")]
        Included = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Chargeable")]
        Chargeable = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Not Offered")]
        Not_Offered = 2,
    
    }
    
    /// <summary>The audience targeted for the brand information</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum BrandTargetEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Strapline")]
        Strapline = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MarketingAgent")]
        MarketingAgent = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MarketingConsumer")]
        MarketingConsumer = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"External")]
        External = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Short")]
        Short = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Agent")]
        Agent = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Upsell")]
        Upsell = 7,
    
    }
    
    /// <summary>The Travelport classification used for a category of ancillaries such as Seat, Bags, etc. This is an initial list that will be added to.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public enum BrandClassificationEnum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CheckedBag")]
        CheckedBag = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CarryOn")]
        CarryOn = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rebooking")]
        Rebooking = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Refund")]
        Refund = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Seats")]
        Seats = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Meals")]
        Meals = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WiFi")]
        WiFi = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    public partial class ReferenceListBrandFullInfo : ReferenceList
    {
        [Newtonsoft.Json.JsonProperty("BrandFullInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BrandFullInfoID> BrandFullInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtensionPoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtensionPoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ReferenceListBrandFullInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReferenceListBrandFullInfo>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }
    
        public string Key { get; }
    
        public System.Type Type { get; }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    internal class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";
    
        private readonly string _discriminator;
    
        [System.ThreadStatic]
        private static bool _isReading;
    
        [System.ThreadStatic]
        private static bool _isWriting;
    
        public JsonInheritanceConverter()
        {
            _discriminator = DefaultDiscriminatorName;
        }
    
        public JsonInheritanceConverter(string discriminator)
        {
            _discriminator = discriminator;
        }
    
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;
    
                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminator, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }
    
        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }
    
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;
    
            var discriminator = Newtonsoft.Json.Linq.Extensions.Value<string>(jObject.GetValue(_discriminator));
            var subtype = GetObjectSubtype(objectType, discriminator);
    
            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }
    
        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }
    
            return objectType;
        }
    
        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }
    
            return objectType.Name;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.37.0 (Newtonsoft.Json v9.0.0.1)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.5.0 (NJsonSchema v9.13.37.0 (Newtonsoft.Json v9.0.0.1))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.2.5.0 (NJsonSchema v9.13.37.0 (Newtonsoft.Json v9.0.0.1))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

    #pragma warning restore
}